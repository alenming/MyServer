!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddAttrib	Extern/Tool/XML/XML.h	/^    bool AddAttrib( const char* szAttrib, const char* szValue ) { return x_SetAttrib(m_iPos,szAttrib,szValue); };$/;"	f	class:XML
AddAttrib	Extern/Tool/XML/XML.h	/^    bool AddAttrib( const char* szAttrib, int nValue ) { return x_SetAttrib(m_iPos,szAttrib,nValue); };$/;"	f	class:XML
AddChildAttrib	Extern/Tool/XML/XML.h	/^    bool AddChildAttrib( const char* szAttrib, const char* szValue ) { return x_SetAttrib(m_iPosChild,szAttrib,szValue); };$/;"	f	class:XML
AddChildAttrib	Extern/Tool/XML/XML.h	/^    bool AddChildAttrib( const char* szAttrib, int nValue ) { return x_SetAttrib(m_iPosChild,szAttrib,nValue); };$/;"	f	class:XML
AddChildElem	Extern/Tool/XML/XML.h	/^    bool AddChildElem( const char* szName, const char* szData=NULL ) { return x_AddElem(szName,szData,false,true); };$/;"	f	class:XML
AddChildSubDoc	Extern/Tool/XML/XML.h	/^    bool AddChildSubDoc( const char* szSubDoc ) { return x_AddSubDoc(szSubDoc,false,true); };$/;"	f	class:XML
AddElem	Extern/Tool/XML/XML.h	/^    bool AddElem( const char* szName, const char* szData=NULL ) { return x_AddElem(szName,szData,false,false); };$/;"	f	class:XML
AddModelType	LoginServer/LoginServer/LoginServer.cpp	/^void LoginServer::AddModelType()$/;"	f	class:LoginServer
AddNode	Extern/Tool/XML/XML.h	/^    bool AddNode( int nType, const char* szText ) { return x_AddNode(nType,szText,false); };$/;"	f	class:XML
AdjustEnd	Extern/Tool/XML/XML.h	/^        void AdjustEnd( int n ) { nEndL+=n; nEndR+=n; };$/;"	f	struct:XML::ElemPos
AdjustStart	Extern/Tool/XML/XML.h	/^        void AdjustStart( int n ) { nStartL+=n; nStartR+=n; };$/;"	f	struct:XML::ElemPos
AtoF	Extern/Tool/Common/Value_.cpp	/^double Value_::AtoF(const char* str) const$/;"	f	class:Value_
BOOLEAN	Extern/Tool/Common/Value_.h	/^        BOOLEAN,$/;"	m	class:Value_::Type
BUFF_SIZE	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^#define BUFF_SIZE /;"	d	file:
BYTE	Extern/Tool/Common/Value_.h	/^        BYTE,$/;"	m	class:Value_::Type
BaseModule	Extern/ServerFrame/helper/BaseModule.h	/^    BaseModule(void){}$/;"	f	class:BaseModule
BaseModule	Extern/ServerFrame/helper/BaseModule.h	/^class BaseModule : public IKxModule$/;"	c
BufferData	Extern/ServerFrame/helper/BufferData.cpp	/^BufferData::BufferData()$/;"	f	class:BufferData
BufferData	Extern/ServerFrame/helper/BufferData.h	/^class BufferData$/;"	c
ByteTouint32_t	Extern/Tool/MD5/MD5.cpp	/^void MD5::ByteTouint32_t(UnInt32_t* Output, UnChar_t* Input, unsigned int nLength)$/;"	f	class:MD5
CGameNetworkNode	Client/Client/GameNetworkNode.cpp	/^CGameNetworkNode::CGameNetworkNode(void)$/;"	f	class:CGameNetworkNode
CGameNetworkNode	Client/Client/GameNetworkNode.h	/^class CGameNetworkNode  : public KxObject$/;"	c
CGameUserManager	Extern/ServerFrame/data/GameUserManager.cpp	/^CGameUserManager::CGameUserManager()$/;"	f	class:CGameUserManager
CGameUserManager	Extern/ServerFrame/data/GameUserManager.h	/^class CGameUserManager : public KxTimerObject$/;"	c
CHECKCONTEXT	Extern/Tool/DBDriver/RedisStorer.cpp	/^#define CHECKCONTEXT(/;"	d	file:
CHECKREPLY	Extern/Tool/DBDriver/RedisStorer.cpp	/^#define CHECKREPLY(/;"	d	file:
CMD5	Extern/Tool/MD5/MD5.cpp	/^CMD5::CMD5()$/;"	f	class:CMD5
CMD5	Extern/Tool/MD5/MD5.cpp	/^CMD5::CMD5(UnLong_t* md5src)$/;"	f	class:CMD5
CMD5	Extern/Tool/MD5/MD5.cpp	/^CMD5::CMD5(const char* md5src)$/;"	f	class:CMD5
CMD5	Extern/Tool/MD5/MD5.h	/^class CMD5$/;"	c
CMD_C2S_BEIGN	Extern/ServerFrame/server/Protocol.h	/^	CMD_C2S_BEIGN = 0,$/;"	e	enum:LOGIN_CMD
CMD_C2S_END	Extern/ServerFrame/server/Protocol.h	/^	CMD_C2S_END,$/;"	e	enum:LOGIN_CMD
CMD_C2S_LOGIN	Extern/ServerFrame/server/Protocol.h	/^	CMD_C2S_LOGIN,$/;"	e	enum:LOGIN_CMD
CMD_C2S_LOGIN	LoginServer/LoginServer/LoginService.cpp	/^void LoginService::CMD_C2S_LOGIN(int uid, char *buffer, int len, IKxComm *commun)$/;"	f	class:LoginService
CMD_C2S_REGISTER	Extern/ServerFrame/server/Protocol.h	/^	CMD_C2S_REGISTER,$/;"	e	enum:LOGIN_CMD
CMD_C2S_REGISTER	LoginServer/LoginServer/LoginService.cpp	/^void LoginService::CMD_C2S_REGISTER(int uid, char *buffer, int len, IKxComm *commun)$/;"	f	class:LoginService
CMD_HEARTBEART	Extern/ServerFrame/server/Protocol.h	/^	CMD_HEARTBEART = 0,$/;"	e	enum:MAIN_CMD
CMD_LOGIN_SERVER	Extern/ServerFrame/server/Protocol.h	/^	CMD_LOGIN_SERVER = 1,      \/\/ 登录$/;"	e	enum:MAIN_CMD
CMD_S2C_BGINE	Extern/ServerFrame/server/Protocol.h	/^	CMD_S2C_BGINE = 100,$/;"	e	enum:LOGIN_CMD
CMD_S2C_END	Extern/ServerFrame/server/Protocol.h	/^	CMD_S2C_END,$/;"	e	enum:LOGIN_CMD
CMD_S2C_LOGIN	Extern/ServerFrame/server/Protocol.h	/^	CMD_S2C_LOGIN,$/;"	e	enum:LOGIN_CMD
CMD_S2C_LOGIN	LoginServer/LoginServer/LoginService.cpp	/^void LoginService::CMD_S2C_LOGIN(int uid)$/;"	f	class:LoginService
CMD_S2C_REGISTER	Extern/ServerFrame/server/Protocol.h	/^	CMD_S2C_REGISTER,$/;"	e	enum:LOGIN_CMD
CMD_S2C_REGISTER	LoginServer/LoginServer/LoginService.cpp	/^void LoginService::CMD_S2C_REGISTER(int uid)$/;"	f	class:LoginService
CRYPT_ACCURACY	Extern/Tool/Utils/ValueCrypt.h	/^#define CRYPT_ACCURACY /;"	d
CSVParser_h__	Extern/Tool/DataManager/CSVParser.h	/^#define CSVParser_h__$/;"	d
Clear	Extern/Tool/XML/XML.h	/^        void Clear() { nL=0; nR=-1; nNext=0; bIsString=false; };$/;"	f	struct:XML::TokenPos
Clear	Extern/Tool/XML/XML.h	/^        void Clear()$/;"	f	struct:XML::ElemPos
ClientModule	SessionServer/SessionServer/ClientModule.cpp	/^ClientModule::ClientModule(void)$/;"	f	class:ClientModule
ClientModule	SessionServer/SessionServer/ClientModule.h	/^class ClientModule : public BaseModule$/;"	c
ConnIP	Client/Client/GameNetworkNode.h	/^    std::string                 ConnIP;         \/\/ 连接的ip地址$/;"	m	struct:ServerConn
Connect	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::Connect(std::string ip, int port, std::string passward)$/;"	f	class:RedisStorer
ConnectCallback	Client/Client/GameNetworkNode.h	/^    std::function<void(bool)>   ConnectCallback;$/;"	m	struct:ServerConn
ConnectEvent	SessionServer/SessionServer/ConnectEvent.cpp	/^ConnectEvent::ConnectEvent()$/;"	f	class:ConnectEvent
ConnectEvent	SessionServer/SessionServer/ConnectEvent.h	/^class ConnectEvent :public IGameEvent$/;"	c
ConnectModule	SessionServer/SessionServer/ConnectModule.cpp	/^ConnectModule::ConnectModule(void)$/;"	f	class:ConnectModule
ConnectModule	SessionServer/SessionServer/ConnectModule.h	/^class ConnectModule : public BaseModule$/;"	c
ConnectServerConf	Client/Client/TestClient.h	/^struct ConnectServerConf$/;"	s
ConnectingTimes	Client/Client/GameNetworkNode.h	/^    int                         ConnectingTimes;    \/\/ 正在重连中的次数（大于10次强制关闭重启）$/;"	m	struct:ServerConn
Connector	Client/Client/GameNetworkNode.h	/^    KxTCPConnector*   Connector;          \/\/ 连接$/;"	m	struct:ServerConn
CrevasseData	Extern/Tool/LocalDefault/LocalDefault.cpp	/^std::string LocalDefault::CrevasseData(const char* szEncryPass) const$/;"	f	class:LocalDefault
CsvLoader	Extern/ServerFrame/helper/CsvLoader.cpp	/^CsvLoader::CsvLoader()$/;"	f	class:CsvLoader
CsvLoader	Extern/ServerFrame/helper/CsvLoader.h	/^class CsvLoader$/;"	c
DATA	Extern/Tool/LocalDefault/LocalDefault.cpp	/^#define DATA /;"	d	file:
DATAEXCEPTION	Extern/Tool/DBDriver/RedisStorer.h	/^    DATAEXCEPTION   = -3,              \/\/ 处理异常$/;"	e	enum:ResultStatus
DATA_XXTABLE_CSV	Extern/Tool/DataManager/DataManager.h	/^#define DATA_XXTABLE_CSV /;"	d
DATA_XXTABLE_D	Extern/Tool/DataManager/DataManager.h	/^#define DATA_XXTABLE_D /;"	d
DBID	Extern/Tool/DBDriver/IStorer.h	/^enum DBID$/;"	g
DBManager	Extern/Tool/DBDriver/DBManager.cpp	/^DBManager::DBManager()$/;"	f	class:DBManager
DBManager	Extern/Tool/DBDriver/DBManager.h	/^class DBManager$/;"	c
DBRule	Extern/Tool/DBDriver/IStorer.h	/^struct DBRule$/;"	s
DB_NONE	Extern/Tool/DBDriver/IStorer.h	/^	DB_NONE = 0,			   \/\/无$/;"	e	enum:DBID
DB_USER_MODEL	Extern/Tool/DBDriver/IStorer.h	/^	DB_USER_MODEL = 1,$/;"	e	enum:DBID
DECRYPT_DOUBLE	Extern/Tool/Utils/ValueCrypt.h	/^#define DECRYPT_DOUBLE(/;"	d
DECRYPT_FLOAT	Extern/Tool/Utils/ValueCrypt.h	/^#define DECRYPT_FLOAT(/;"	d
DECRYPT_INT	Extern/Tool/Utils/ValueCrypt.h	/^#define DECRYPT_INT(/;"	d
DECRYPT_LONG	Extern/Tool/Utils/ValueCrypt.h	/^#define DECRYPT_LONG(/;"	d
DOUBLE	Extern/Tool/Common/Value_.h	/^        DOUBLE,$/;"	m	class:Value_::Type
DataManager	Extern/Tool/DataManager/DataManager.cpp	/^DataManager::DataManager()$/;"	f	class:DataManager
DataManager	Extern/Tool/DataManager/DataManager.h	/^class DataManager$/;"	c
DataManager_AllData	Extern/Tool/DataManager/DataManager.h	/^static const char* DataManager_AllData[] =$/;"	v
DataManager_h__	Extern/Tool/DataManager/DataManager.h	/^#define DataManager_h__$/;"	d
DataTable	Extern/Tool/DataManager/DataTable.cpp	/^DataTable::DataTable()$/;"	f	class:DataTable
DataTable	Extern/Tool/DataManager/DataTable.h	/^class DataTable$/;"	c
DataTable_h__	Extern/Tool/DataManager/DataTable.h	/^#define DataTable_h__$/;"	d
Data_	Extern/Tool/Common/Data_.cpp	/^Data_::Data_() :$/;"	f	class:Data_
Data_	Extern/Tool/Common/Data_.cpp	/^Data_::Data_(Data_&& other) :$/;"	f	class:Data_
Data_	Extern/Tool/Common/Data_.cpp	/^Data_::Data_(const Data_& other) :$/;"	f	class:Data_
Data_	Extern/Tool/Common/Data_.h	/^class Data_$/;"	c
Decode	Extern/Tool/Utils/UrlEncode.cpp	/^std::string UrlEncode::Decode(const std::string& str)$/;"	f	class:UrlEncode
DecodeBase64	Extern/Tool/XML/XML.cpp	/^int XML::DecodeBase64( const string& strBase64, unsigned char* pBuffer, int nBufferLen )$/;"	f	class:XML
DelHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::DelHashByField(const std::string &key, const std::string &field)$/;"	f	class:RedisStorer
DelHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::DelHashByField(const std::string &key, int field)$/;"	f	class:RedisStorer
DelKey	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::DelKey(const std::string &key)$/;"	f	class:RedisStorer
DelKey	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::DelKey(std::vector<std::string> &keys)$/;"	f	class:RedisStorer
EEventId	SessionServer/SessionServer/GameInterface.h	/^enum EEventId$/;"	g
ENCRYPT_DOUBLE	Extern/Tool/Utils/ValueCrypt.h	/^#define ENCRYPT_DOUBLE(/;"	d
ENCRYPT_DOUBLE_GETTER_SETTER	Extern/Tool/Utils/ValueCrypt.h	/^#define ENCRYPT_DOUBLE_GETTER_SETTER(/;"	d
ENCRYPT_FLOAT	Extern/Tool/Utils/ValueCrypt.h	/^#define ENCRYPT_FLOAT(/;"	d
ENCRYPT_FLOAT_GETTER_SETTER	Extern/Tool/Utils/ValueCrypt.h	/^#define ENCRYPT_FLOAT_GETTER_SETTER(/;"	d
ENCRYPT_INT	Extern/Tool/Utils/ValueCrypt.h	/^#define ENCRYPT_INT(/;"	d
ENCRYPT_INT_GETTER_SETTER	Extern/Tool/Utils/ValueCrypt.h	/^#define ENCRYPT_INT_GETTER_SETTER(/;"	d
ENCRYPT_KEY_LENGTH	Extern/Tool/LocalDefault/LocalDefault.cpp	/^#define ENCRYPT_KEY_LENGTH /;"	d	file:
ENCRYPT_LONG	Extern/Tool/Utils/ValueCrypt.h	/^#define ENCRYPT_LONG(/;"	d
ENCRYPT_LONG_GETTER_SETTER	Extern/Tool/Utils/ValueCrypt.h	/^#define ENCRYPT_LONG_GETTER_SETTER(/;"	d
ENCRYPT_TYPE	Extern/Tool/LocalDefault/LocalDefault.h	/^	enum ENCRYPT_TYPE  \/\/是否加密$/;"	g	class:LocalDefault
EServerConnType	Client/Client/GameNetworkNode.h	/^enum EServerConnType$/;"	g
ElemPos	Extern/Tool/XML/XML.h	/^        ElemPos( const ElemPos& pos ) { *this = pos; };$/;"	f	struct:XML::ElemPos
ElemPos	Extern/Tool/XML/XML.h	/^        ElemPos() { Clear(); };$/;"	f	struct:XML::ElemPos
ElemPos	Extern/Tool/XML/XML.h	/^    struct ElemPos$/;"	s	class:XML
Encode	Extern/Tool/Utils/UrlEncode.cpp	/^std::string UrlEncode::Encode(const std::string& str)$/;"	f	class:UrlEncode
EncodeBase64	Extern/Tool/XML/XML.cpp	/^string XML::EncodeBase64( const unsigned char* pBuffer, int nBufferLen )$/;"	f	class:XML
EncryptData	Extern/Tool/LocalDefault/LocalDefault.cpp	/^std::string LocalDefault::EncryptData(const char* szPass) const$/;"	f	class:LocalDefault
EventClosed	SessionServer/SessionServer/GameInterface.h	/^	EventClosed$/;"	e	enum:EEventId
EventKick	SessionServer/SessionServer/GameInterface.h	/^    EventKick,$/;"	e	enum:EEventId
EventLogin	SessionServer/SessionServer/GameInterface.h	/^    EventLogin,$/;"	e	enum:EEventId
ExistKey	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ExistKey(const std::string &key)$/;"	f	class:RedisStorer
Expire	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::Expire(const std::string &key, int seconds)$/;"	f	class:RedisStorer
ExpireAt	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ExpireAt(const std::string &key, unsigned int timestamp)$/;"	f	class:RedisStorer
F	Extern/Tool/MD5/MD5.cpp	/^#define F(/;"	d	file:
F	Extern/Tool/MD5/MD5.cpp	/^#undef F$/;"	d	file:
FAILED	Extern/Tool/DBDriver/RedisStorer.h	/^    FAILED          = -1,              \/\/ 失败返回$/;"	e	enum:ResultStatus
FD_SETSIZE	Extern/ServerFrame/core/KxCore.h	/^#define FD_SETSIZE /;"	d
FF	Extern/Tool/MD5/MD5.cpp	/^void MD5::FF( UnInt32_t& A, UnInt32_t B, UnInt32_t C, UnInt32_t D, UnInt32_t X, UnInt32_t S, UnInt32_t T)$/;"	f	class:MD5
FLOAT	Extern/Tool/Common/Value_.h	/^        FLOAT,$/;"	m	class:Value_::Type
Final	Extern/Tool/MD5/MD5.cpp	/^std::string MD5::Final()$/;"	f	class:MD5
FindChildElem	Extern/Tool/XML/XML.cpp	/^bool XML::FindChildElem( const char* szName )$/;"	f	class:XML
FindElem	Extern/Tool/XML/XML.cpp	/^bool XML::FindElem( const char* szName )$/;"	f	class:XML
FindGetData	Extern/Tool/XML/XML.cpp	/^string XML::FindGetData( const char* szName )$/;"	f	class:XML
FindNode	Extern/Tool/XML/XML.cpp	/^int XML::FindNode( int nType )$/;"	f	class:XML
FindSetData	Extern/Tool/XML/XML.cpp	/^bool XML::FindSetData( const char* szName, const char* szData, int nCDATA )$/;"	f	class:XML
FromHex	Extern/Tool/Utils/UrlEncode.cpp	/^unsigned char FromHex(unsigned char x)   $/;"	f
GET_ARRAY_LEN	Extern/Tool/DataManager/DataManager.cpp	/^#define GET_ARRAY_LEN(/;"	d	file:
GET_UINT32	Extern/Tool/MD5/MD5.cpp	/^#define GET_UINT32(/;"	d	file:
GG	Extern/Tool/MD5/MD5.cpp	/^void MD5::GG( UnInt32_t& A, UnInt32_t B, UnInt32_t C, UnInt32_t D, UnInt32_t X, UnInt32_t S, UnInt32_t T)$/;"	f	class:MD5
GameModule	Client/Client/GameModule.cpp	/^GameModule::GameModule(void)$/;"	f	class:GameModule
GameModule	Client/Client/GameModule.h	/^class GameModule : public BaseModule$/;"	c
GameUser	Extern/ServerFrame/data/GameUser.cpp	/^GameUser::GameUser()$/;"	f	class:GameUser
GameUser	Extern/ServerFrame/data/GameUser.h	/^class GameUser$/;"	c
GateManager	LoginServer/LoginServer/GateManager.cpp	/^GateManager::GateManager(void)$/;"	f	class:GateManager
GateManager	LoginServer/LoginServer/GateManager.h	/^class GateManager$/;"	c
GenerateMD5	Extern/Tool/MD5/MD5.cpp	/^void CMD5::GenerateMD5(UnChar_t* buffer, int bufferlen)$/;"	f	class:CMD5
GetAttrib	Extern/Tool/XML/XML.h	/^    std::string GetAttrib( const char* szAttrib ) const { return x_GetAttrib(m_iPos,szAttrib); };$/;"	f	class:XML
GetAttribName	Extern/Tool/XML/XML.cpp	/^string XML::GetAttribName( int n ) const$/;"	f	class:XML
GetBoolFromXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define GetBoolFromXML	/;"	d
GetChildAttrib	Extern/Tool/XML/XML.h	/^    std::string GetChildAttrib( const char* szAttrib ) const { return x_GetAttrib(m_iPosChild,szAttrib); };$/;"	f	class:XML
GetChildData	Extern/Tool/XML/XML.h	/^    std::string GetChildData() const { return x_GetData(m_iPosChild); };$/;"	f	class:XML
GetChildSubDoc	Extern/Tool/XML/XML.cpp	/^string XML::GetChildSubDoc() const$/;"	f	class:XML
GetChildTagName	Extern/Tool/XML/XML.h	/^    std::string GetChildTagName() const { return x_GetTagName(m_iPosChild); };$/;"	f	class:XML
GetData	Extern/Tool/XML/XML.h	/^    std::string GetData() const { return x_GetData(m_iPos); };$/;"	f	class:XML
GetDataFromXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define GetDataFromXML	/;"	d
GetDoc	Extern/Tool/XML/XML.h	/^    std::string GetDoc() const { return m_strDoc; };$/;"	f	class:XML
GetDoubleFromXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define GetDoubleFromXML	/;"	d
GetError	Extern/Tool/XML/XML.h	/^    std::string GetError() const { return m_strError; };$/;"	f	class:XML
GetFloatFromXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define GetFloatFromXML	/;"	d
GetGate	LoginServer/LoginServer/GateManager.h	/^    IKxComm* GetGate()$/;"	f	class:GateManager
GetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHash(const std::string &key, std::map<int, RedisBinaryData> &mapret)$/;"	f	class:RedisStorer
GetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHash(const std::string &key, std::map<int, int> &mapret)$/;"	f	class:RedisStorer
GetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHash(const std::string &key, std::map<int, std::string> &mapret)$/;"	f	class:RedisStorer
GetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHash(const std::string &key, std::map<std::string, RedisBinaryData> &mapret)$/;"	f	class:RedisStorer
GetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHash(const std::string &key, std::map<std::string, int> &mapret)$/;"	f	class:RedisStorer
GetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHash(const std::string &key, std::map<std::string, std::string> &mapret)$/;"	f	class:RedisStorer
GetHashBy2Field	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHashBy2Field(const std::string &key, int field1, int field2, int &value1, int &value2)$/;"	f	class:RedisStorer
GetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHashByField(const std::string &key, const std::string &field, int &value)$/;"	f	class:RedisStorer
GetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHashByField(const std::string &key, const std::string &field, std::string &value)$/;"	f	class:RedisStorer
GetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHashByField(const std::string &key, int field, char *value, int &len)$/;"	f	class:RedisStorer
GetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHashByField(const std::string &key, int field, int &value)$/;"	f	class:RedisStorer
GetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHashByField(const std::string &key, int field, std::string &value)$/;"	f	class:RedisStorer
GetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHashByField(const std::string &key, std::map<int, int> &mapret)$/;"	f	class:RedisStorer
GetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHashByField(const std::string &key, std::map<std::string, std::string> &mapret)$/;"	f	class:RedisStorer
GetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetHashByField(const std::string &key, std::string field, char *value, int &len)$/;"	f	class:RedisStorer
GetIntFromXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define GetIntFromXML	/;"	d
GetKey	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetKey(const std::string &key, std::vector<std::string> vec)$/;"	f	class:RedisStorer
GetMD5	Extern/Tool/MD5/MD5.cpp	/^std::string MD5::GetMD5(const std::string& strFilePath)$/;"	f	class:MD5
GetMD5OfString	Extern/Tool/MD5/MD5.cpp	/^std::string MD5::GetMD5OfString(std::string strString)$/;"	f	class:MD5
GetName	Extern/ServerFrame/data/DataModel/UserModel.cpp	/^std::string& UserModel::GetName()$/;"	f	class:UserModel
GetNodeType	Extern/Tool/XML/XML.h	/^    int GetNodeType() { return m_nNodeType; };$/;"	f	class:XML
GetOffsets	Extern/Tool/XML/XML.cpp	/^bool XML::GetOffsets( int& nStart, int& nEnd ) const$/;"	f	class:XML
GetRedisContext	Extern/Tool/DBDriver/RedisStorer.cpp	/^redisContext *RedisStorer::GetRedisContext()$/;"	f	class:RedisStorer
GetServerID	Extern/ServerFrame/server/KxBaseServer.h	/^	int  GetServerID() { return m_ServerID; }$/;"	f	class:KxBaseServer
GetSetAll	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetSetAll(const std::string &key, std::set<int> &setret)$/;"	f	class:RedisStorer
GetSetAll	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetSetAll(const std::string &key, std::set<std::string> &setret)$/;"	f	class:RedisStorer
GetSetAllString	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetSetAllString(const std::string &key, std::set<int> &setret)$/;"	f	class:RedisStorer
GetStorer	Extern/Tool/DBDriver/DBManager.cpp	/^DBRule *DBManager::GetStorer(DBID id)$/;"	f	class:DBManager
GetStorer	Extern/Tool/DBDriver/DBManager.cpp	/^DBRule *DBManager::GetStorer(DBRule& rule)$/;"	f	class:DBManager
GetString	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetString(const std::string &key, char** value, unsigned int &len)$/;"	f	class:RedisStorer
GetString	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetString(const std::string &key, int &value)$/;"	f	class:RedisStorer
GetString	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetString(const std::string &key, std::string &value)$/;"	f	class:RedisStorer
GetStringFromXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define GetStringFromXML	/;"	d
GetStringRange	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::GetStringRange(const std::string &key, int offset, int len, char** value)$/;"	f	class:RedisStorer
GetTagName	Extern/Tool/XML/XML.cpp	/^string XML::GetTagName() const$/;"	f	class:XML
GetUserInfo	Extern/ServerFrame/data/DataModel/UserModel.cpp	/^std::map<int, int>& UserModel::GetUserInfo()$/;"	f	class:UserModel
HEARTBEATTIME	SessionServer/SessionServer/SessionClient.cpp	/^#define HEARTBEATTIME /;"	d	file:
HH	Extern/Tool/MD5/MD5.cpp	/^void MD5::HH( UnInt32_t& A, UnInt32_t B, UnInt32_t C, UnInt32_t D, UnInt32_t X, UnInt32_t S, UnInt32_t T)$/;"	f	class:MD5
HIREDIS_MAJOR	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define HIREDIS_MAJOR /;"	d
HIREDIS_MINOR	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define HIREDIS_MINOR /;"	d
HIREDIS_PATCH	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define HIREDIS_PATCH /;"	d
HIREDIS_SONAME	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define HIREDIS_SONAME /;"	d
HashFieldExist	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::HashFieldExist(const std::string &key, const std::string &field)$/;"	f	class:RedisStorer
HashFieldExist	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::HashFieldExist(const std::string &key, int field)$/;"	f	class:RedisStorer
HashLen	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::HashLen(const std::string &key, long long &value)$/;"	f	class:RedisStorer
Head	Extern/ServerFrame/server/Head.h	/^struct Head$/;"	s
HexDumpImp	Extern/ServerFrame/log/LogManager.cpp	/^void LogManager::HexDumpImp(const void *pdata, unsigned int len)$/;"	f	class:LogManager
IDBModel	Extern/ServerFrame/helper/IDBModel.cpp	/^IDBModel::IDBModel()$/;"	f	class:IDBModel
IDBModel	Extern/ServerFrame/helper/IDBModel.h	/^class IDBModel$/;"	c
IGameEvent	SessionServer/SessionServer/GameInterface.h	/^struct IGameEvent$/;"	s
II	Extern/Tool/MD5/MD5.cpp	/^void MD5::II( UnInt32_t& A, UnInt32_t B, UnInt32_t C, UnInt32_t D, UnInt32_t X, UnInt32_t S, UnInt32_t T)$/;"	f	class:MD5
IKxComm	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    IKxComm()$/;"	f	class:IKxComm
IKxComm	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^class IKxComm : virtual public KxObject$/;"	c
IKxCommPoller	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^class IKxCommPoller : public KxObject$/;"	c
IKxModule	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^class IKxModule : public KxObject$/;"	c
ILogHandler	Extern/ServerFrame/log/ILogHandler.h	/^	ILogHandler()$/;"	f	class:ILogHandler
ILogHandler	Extern/ServerFrame/log/ILogHandler.h	/^class ILogHandler$/;"	c
INTEGER	Extern/Tool/Common/Value_.h	/^        INTEGER,$/;"	m	class:Value_::Type
IS_EN	Extern/Tool/LocalDefault/LocalDefault.h	/^		IS_EN,$/;"	e	enum:LocalDefault::ENCRYPT_TYPE
ISerializable	Extern/ServerFrame/helper/BufferData.h	/^class ISerializable$/;"	c
IStorer	Extern/Tool/DBDriver/IStorer.cpp	/^IStorer::IStorer()$/;"	f	class:IStorer
IStorer	Extern/Tool/DBDriver/IStorer.h	/^class IStorer$/;"	c
IncrString	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::IncrString(const std::string &key, int &value)$/;"	f	class:RedisStorer
IncreHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::IncreHashByField(const std::string &key, const std::string &filed, int &value)$/;"	f	class:RedisStorer
IncreHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::IncreHashByField(const std::string &key, int field, int &value)$/;"	f	class:RedisStorer
InitWithXML	Extern/Tool/DBDriver/DBManager.cpp	/^bool DBManager::InitWithXML(std::string xmlFile)$/;"	f	class:DBManager
InsertChildElem	Extern/Tool/XML/XML.h	/^    bool InsertChildElem( const char* szName, const char* szData=NULL ) { return x_AddElem(szName,szData,true,true); };$/;"	f	class:XML
InsertChildSubDoc	Extern/Tool/XML/XML.h	/^    bool InsertChildSubDoc( const char* szSubDoc ) { return x_AddSubDoc(szSubDoc,true,true); };$/;"	f	class:XML
InsertElem	Extern/Tool/XML/XML.h	/^    bool InsertElem( const char* szName, const char* szData=NULL ) { return x_AddElem(szName,szData,true,false); };$/;"	f	class:XML
InsertNode	Extern/Tool/XML/XML.h	/^    bool InsertNode( int nType, const char* szText ) { return x_AddNode(nType,szText,true); };$/;"	f	class:XML
InsertStorer	Extern/Tool/DBDriver/DBManager.cpp	/^bool DBManager::InsertStorer(DBRule rule)$/;"	f	class:DBManager
IntoElem	Extern/Tool/XML/XML.cpp	/^bool XML::IntoElem()$/;"	f	class:XML
IsEmptyElement	Extern/Tool/XML/XML.h	/^        bool IsEmptyElement() const { return (nStartR == nEndL + 1); };$/;"	f	struct:XML::ElemPos
IsSet	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::IsSet(const std::string &key, const char* value, unsigned int len)$/;"	f	class:RedisStorer
IsSet	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::IsSet(const std::string &key, std::string value)$/;"	f	class:RedisStorer
IsWellFormed	Extern/Tool/XML/XML.cpp	/^bool XML::IsWellFormed()$/;"	f	class:XML
KEY1	Extern/Tool/Utils/ValueCrypt.h	/^#define KEY1 /;"	d
KEY2	Extern/Tool/Utils/ValueCrypt.h	/^#define KEY2 /;"	d
KXASSERT	Extern/ServerFrame/core/KxCore.h	/^#define KXASSERT /;"	d
KXCOMMID	Extern/ServerFrame/core/KxCore.h	/^typedef SOCKET KXCOMMID;$/;"	t
KXCOMMID	Extern/ServerFrame/core/KxCore.h	/^typedef int KXCOMMID;$/;"	t
KXEPOLL_ERROR	Extern/ServerFrame/commnication/KxEpoller.cpp	/^#define KXEPOLL_ERROR(/;"	d	file:
KXEVENT_CONNECTER	Extern/ServerFrame/commnication/KxTCPConnector.h	/^enum KXEVENT_CONNECTER$/;"	g
KXEVENT_CONNECT_FAILE	Extern/ServerFrame/commnication/KxTCPConnector.h	/^    KXEVENT_CONNECT_FAILE,$/;"	e	enum:KXEVENT_CONNECTER
KXEVENT_CONNECT_SUCCESS	Extern/ServerFrame/commnication/KxTCPConnector.h	/^    KXEVENT_CONNECT_SUCCESS,$/;"	e	enum:KXEVENT_CONNECTER
KXINVALID_COMMID	Extern/ServerFrame/core/KxCore.h	/^#define KXINVALID_COMMID /;"	d
KXPOLLTYPE_ERR	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    KXPOLLTYPE_ERR = 8$/;"	e	enum:KXPOLL_TYPE
KXPOLLTYPE_IN	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    KXPOLLTYPE_IN = 1,$/;"	e	enum:KXPOLL_TYPE
KXPOLLTYPE_OUT	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    KXPOLLTYPE_OUT = 4,$/;"	e	enum:KXPOLL_TYPE
KXPOLLTYPE_UNKNOWN	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    KXPOLLTYPE_UNKNOWN = 0,$/;"	e	enum:KXPOLL_TYPE
KXPOLL_TYPE	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^enum KXPOLL_TYPE$/;"	g
KXREPEAT_FOREVER	Extern/ServerFrame/helper/KxTimerManager.h	/^#define KXREPEAT_FOREVER /;"	d
KXSAFE_DELETE	Extern/ServerFrame/core/KxObject.h	/^#define KXSAFE_DELETE(/;"	d
KXSAFE_RECYCLE	Extern/ServerFrame/core/KxMemPool.h	/^#define KXSAFE_RECYCLE(/;"	d
KXSAFE_RELEASE	Extern/ServerFrame/core/KxObject.h	/^#define KXSAFE_RELEASE(/;"	d
KXSAFE_RETAIN	Extern/ServerFrame/core/KxObject.h	/^#define KXSAFE_RETAIN(/;"	d
KXSELECT_ERROR	Extern/ServerFrame/commnication/KxSelectPoller.cpp	/^#define KXSELECT_ERROR(/;"	d	file:
KXSOCK_CODE	Extern/ServerFrame/commnication/KxSock.h	/^enum KXSOCK_CODE$/;"	g
KXSOCK_ERRORFAILE	Extern/ServerFrame/commnication/KxSock.h	/^    KXSOCK_ERRORFAILE,                  \/\/ Socket操作失败$/;"	e	enum:KXSOCK_CODE
KXSOCK_ERRORTYPE	Extern/ServerFrame/commnication/KxSock.h	/^    KXSOCK_ERRORTYPE,                   \/\/ Socket类型错误:非TCP和UDP，或UDP调用TCP操作$/;"	e	enum:KXSOCK_CODE
KXSOCK_ERRORUNKNOW	Extern/ServerFrame/commnication/KxSock.h	/^    KXSOCK_ERRORUNKNOW = -9999,		    \/\/ 未知的Socket错误$/;"	e	enum:KXSOCK_CODE
KXSOCK_RAW	Extern/ServerFrame/commnication/KxSock.h	/^    KXSOCK_RAW,$/;"	e	enum:KXSOCK_TYPE
KXSOCK_SUCCESS	Extern/ServerFrame/commnication/KxSock.h	/^	KXSOCK_SUCCESS		= 0				\/\/ 成功返回$/;"	e	enum:KXSOCK_CODE
KXSOCK_TCP	Extern/ServerFrame/commnication/KxSock.h	/^    KXSOCK_TCP,$/;"	e	enum:KXSOCK_TYPE
KXSOCK_TYPE	Extern/ServerFrame/commnication/KxSock.h	/^enum KXSOCK_TYPE$/;"	g
KXSOCK_UDP	Extern/ServerFrame/commnication/KxSock.h	/^    KXSOCK_UDP$/;"	e	enum:KXSOCK_TYPE
KXSOCK_UNKNOWN	Extern/ServerFrame/commnication/KxSock.h	/^    KXSOCK_UNKNOWN,$/;"	e	enum:KXSOCK_TYPE
KXSOCK_VERSION	Extern/ServerFrame/commnication/KxSock.h	/^enum KXSOCK_VERSION$/;"	g
KXV_IPV4	Extern/ServerFrame/commnication/KxSock.h	/^	KXV_IPV4,							\/\/使用ipv4$/;"	e	enum:KXSOCK_VERSION
KXV_IPV6	Extern/ServerFrame/commnication/KxSock.h	/^	KXV_IPV6,							\/\/使用ipv6$/;"	e	enum:KXSOCK_VERSION
KX_LOG	Extern/ServerFrame/log/LogManager.h	/^#define KX_LOG(/;"	d
KX_LOGDEBUG	Extern/ServerFrame/log/LogManager.h	/^#define KX_LOGDEBUG(/;"	d
KX_LOGERROR	Extern/ServerFrame/log/LogManager.h	/^#define KX_LOGERROR(/;"	d
KX_LOGINFO	Extern/ServerFrame/log/LogManager.h	/^#define KX_LOGINFO(/;"	d
KX_LOG_DEBUG	Extern/ServerFrame/log/ILogHandler.h	/^	KX_LOG_DEBUG,        \/\/ 调试级别$/;"	e	enum:KX_LOG_LEVEL
KX_LOG_ERROR	Extern/ServerFrame/log/ILogHandler.h	/^    KX_LOG_ERROR         \/\/ 错误级别$/;"	e	enum:KX_LOG_LEVEL
KX_LOG_INFO	Extern/ServerFrame/log/ILogHandler.h	/^	KX_LOG_INFO,         \/\/ 信息级别$/;"	e	enum:KX_LOG_LEVEL
KX_LOG_LEVEL	Extern/ServerFrame/log/ILogHandler.h	/^enum KX_LOG_LEVEL$/;"	g
KX_PLATFORM_LINUX	Extern/ServerFrame/core/KxPlatform.h	/^#define KX_PLATFORM_LINUX /;"	d
KX_PLATFORM_MAC	Extern/ServerFrame/core/KxPlatform.h	/^#define KX_PLATFORM_MAC /;"	d
KX_PLATFORM_UNKNOWN	Extern/ServerFrame/core/KxPlatform.h	/^#define KX_PLATFORM_UNKNOWN /;"	d
KX_PLATFORM_WIN32	Extern/ServerFrame/core/KxPlatform.h	/^#define KX_PLATFORM_WIN32 /;"	d
KX_TARGET_PLATFORM	Extern/ServerFrame/core/KxPlatform.h	/^    #define KX_TARGET_PLATFORM /;"	d
KX_TARGET_PLATFORM	Extern/ServerFrame/core/KxPlatform.h	/^    #undef  KX_TARGET_PLATFORM$/;"	d
KX_TARGET_PLATFORM	Extern/ServerFrame/core/KxPlatform.h	/^#define KX_TARGET_PLATFORM /;"	d
KX_TARGET_PLATFORM	Extern/ServerFrame/core/KxPlatform.h	/^#undef  KX_TARGET_PLATFORM$/;"	d
KxBaseServer	Extern/ServerFrame/server/KxBaseServer.cpp	/^KxBaseServer::KxBaseServer()$/;"	f	class:KxBaseServer
KxBaseServer	Extern/ServerFrame/server/KxBaseServer.h	/^class KxBaseServer : public KxObject$/;"	c
KxBufferList	Extern/ServerFrame/commnication/KxBufferList.cpp	/^KxBufferList::KxBufferList()$/;"	f	class:KxBufferList
KxBufferList	Extern/ServerFrame/commnication/KxBufferList.h	/^class KxBufferList$/;"	c
KxEpoller	Extern/ServerFrame/commnication/KxEpoller.cpp	/^	KxEpoller::KxEpoller(int maxEventQueue)$/;"	f	class:KxEpoller
KxEpoller	Extern/ServerFrame/commnication/KxEpoller.h	/^class KxEpoller : public IKxCommPoller$/;"	c
KxMemManager	Extern/ServerFrame/core/KxMemPool.cpp	/^KxMemManager::KxMemManager()$/;"	f	class:KxMemManager
KxMemManager	Extern/ServerFrame/core/KxMemPool.h	/^class KxMemManager$/;"	c
KxMemPool	Extern/ServerFrame/core/KxMemPool.cpp	/^KxMemPool::KxMemPool() :$/;"	f	class:KxMemPool
KxMemPool	Extern/ServerFrame/core/KxMemPool.h	/^class KxMemPool$/;"	c
KxObject	Extern/ServerFrame/core/KxObject.cpp	/^KxObject::KxObject()$/;"	f	class:KxObject
KxObject	Extern/ServerFrame/core/KxObject.h	/^class KxObject$/;"	c
KxSelectPoller	Extern/ServerFrame/commnication/KxSelectPoller.cpp	/^KxSelectPoller::KxSelectPoller()$/;"	f	class:KxSelectPoller
KxSelectPoller	Extern/ServerFrame/commnication/KxSelectPoller.h	/^class KxSelectPoller : public IKxCommPoller$/;"	c
KxSock	Extern/ServerFrame/commnication/KxSock.cpp	/^KxSock::KxSock()$/;"	f	class:KxSock
KxSock	Extern/ServerFrame/commnication/KxSock.h	/^class KxSock : public KxObject$/;"	c
KxTCPClienter	Extern/ServerFrame/commnication/KxTCPClienter.cpp	/^KxTCPClienter::KxTCPClienter()$/;"	f	class:KxTCPClienter
KxTCPClienter	Extern/ServerFrame/commnication/KxTCPClienter.h	/^class KxTCPClienter : public KxTCPUnit$/;"	c
KxTCPConnector	Extern/ServerFrame/commnication/KxTCPConnector.cpp	/^KxTCPConnector::KxTCPConnector()$/;"	f	class:KxTCPConnector
KxTCPConnector	Extern/ServerFrame/commnication/KxTCPConnector.h	/^class KxTCPConnector : public KxTCPUnit$/;"	c
KxTCPListener	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^KxTCPListener::KxTCPListener()$/;"	f	class:KxTCPListener
KxTCPListener	Extern/ServerFrame/commnication/KxTCPListener.h	/^class KxTCPListener : public IKxComm$/;"	c
KxTCPUnit	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^KxTCPUnit::KxTCPUnit()$/;"	f	class:KxTCPUnit
KxTCPUnit	Extern/ServerFrame/commnication/KxTCPUnit.h	/^class KxTCPUnit : public IKxComm$/;"	c
KxTimerCallback	Extern/ServerFrame/helper/KxTimerCallback.h	/^    KxTimerCallback()$/;"	f	class:KxTimerCallback
KxTimerCallback	Extern/ServerFrame/helper/KxTimerCallback.h	/^    KxTimerCallback(float delay, int repeat = 0)$/;"	f	class:KxTimerCallback
KxTimerCallback	Extern/ServerFrame/helper/KxTimerCallback.h	/^class KxTimerCallback : public KxTimerObject$/;"	c
KxTimerList	Extern/ServerFrame/helper/KxTimerManager.cpp	/^KxTimerList::KxTimerList()$/;"	f	class:KxTimerList
KxTimerList	Extern/ServerFrame/helper/KxTimerManager.h	/^class KxTimerList : public KxObject$/;"	c
KxTimerManager	Extern/ServerFrame/helper/KxTimerManager.cpp	/^KxTimerManager::KxTimerManager()$/;"	f	class:KxTimerManager
KxTimerManager	Extern/ServerFrame/helper/KxTimerManager.h	/^class KxTimerManager : public KxObject$/;"	c
KxTimerObject	Extern/ServerFrame/helper/KxTimerManager.cpp	/^KxTimerObject::KxTimerObject()$/;"	f	class:KxTimerObject
KxTimerObject	Extern/ServerFrame/helper/KxTimerManager.cpp	/^KxTimerObject::KxTimerObject(float delay, int repeat)$/;"	f	class:KxTimerObject
KxTimerObject	Extern/ServerFrame/helper/KxTimerManager.h	/^class KxTimerObject : public KxObject$/;"	c
KxUDPUnit	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^KxUDPUnit::KxUDPUnit()$/;"	f	class:KxUDPUnit
KxUDPUnit	Extern/ServerFrame/commnication/KxUDPUnit.h	/^class KxUDPUnit : public IKxComm$/;"	c
LOCAL_DEFAULT	Extern/Tool/LocalDefault/LocalDefault.cpp	/^#define LOCAL_DEFAULT /;"	d	file:
LOGIN_CMD	Extern/ServerFrame/server/Protocol.h	/^enum LOGIN_CMD$/;"	g
LOGIN_DATA	Extern/ServerFrame/server/Protocol.h	/^struct LOGIN_DATA$/;"	s
LeftStr	Extern/ServerFrame/helper/CsvLoader.cpp	/^std::string CsvLoader::LeftStr()$/;"	f	class:CsvLoader
ListIndex	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListIndex(const std::string &key, int index, char *value, int &len)$/;"	f	class:RedisStorer
ListIndex	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListIndex(const std::string &key, int index, std::string &value)$/;"	f	class:RedisStorer
ListPop	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListPop(const std::string &key, char *value, int &len)$/;"	f	class:RedisStorer
ListPop	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListPop(const std::string &key, int &value)$/;"	f	class:RedisStorer
ListPush	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListPush(const std::string &key, char *value, int len)$/;"	f	class:RedisStorer
ListPush	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListPush(const std::string &key, int value)$/;"	f	class:RedisStorer
ListPush	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListPush(const std::string &key, std::string &str)$/;"	f	class:RedisStorer
ListRPop	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListRPop(const std::string &key, int &value)$/;"	f	class:RedisStorer
ListRange	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListRange(const std::string &key, std::list<int> &lst)$/;"	f	class:RedisStorer
ListRange	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListRange(const std::string &key, std::set<std::string> &str)$/;"	f	class:RedisStorer
ListRange	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListRange(const std::string &key, std::vector<int> &str)$/;"	f	class:RedisStorer
ListRange	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListRange(const std::string &key, std::vector<std::string> &str)$/;"	f	class:RedisStorer
ListRemove	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListRemove(const std::string &key, int count, int value)$/;"	f	class:RedisStorer
ListRemove	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ListRemove(const std::string &key, int count, std::string &value)$/;"	f	class:RedisStorer
Load	Extern/Tool/XML/XML.cpp	/^bool XML::Load( const char* szFileName )$/;"	f	class:XML
LoadCSV	Extern/ServerFrame/helper/CsvLoader.cpp	/^bool CsvLoader::LoadCSV(const char* fileName)$/;"	f	class:CsvLoader
LocalDefault	Extern/Tool/LocalDefault/LocalDefault.cpp	/^LocalDefault::LocalDefault()$/;"	f	class:LocalDefault
LocalDefault	Extern/Tool/LocalDefault/LocalDefault.h	/^class  LocalDefault$/;"	c
LogConsoleHandler	Extern/ServerFrame/log/LogConsoleHandler.h	/^	LogConsoleHandler()$/;"	f	class:LogConsoleHandler
LogConsoleHandler	Extern/ServerFrame/log/LogConsoleHandler.h	/^class LogConsoleHandler : public ILogHandler$/;"	c
LogFileHandler	Extern/ServerFrame/log/LogFileHandler.cpp	/^LogFileHandler::LogFileHandler()$/;"	f	class:LogFileHandler
LogFileHandler	Extern/ServerFrame/log/LogFileHandler.h	/^class LogFileHandler : public ILogHandler$/;"	c
LogManager	Extern/ServerFrame/log/LogManager.cpp	/^LogManager::LogManager()$/;"	f	class:LogManager
LogManager	Extern/ServerFrame/log/LogManager.h	/^class LogManager$/;"	c
LoginListener	LoginServer/LoginServer/LoginListener.cpp	/^LoginListener::LoginListener()$/;"	f	class:LoginListener
LoginListener	LoginServer/LoginServer/LoginListener.h	/^class LoginListener : public KxTCPListener$/;"	c
LoginServer	LoginServer/LoginServer/LoginServer.cpp	/^LoginServer::LoginServer(void)$/;"	f	class:LoginServer
LoginServer	LoginServer/LoginServer/LoginServer.h	/^class LoginServer : public KxBaseServer$/;"	c
LoginService	LoginServer/LoginServer/LoginService.h	/^class LoginService$/;"	c
LoginSessionModule	LoginServer/LoginServer/LoginSessionModule.cpp	/^LoginSessionModule::LoginSessionModule(void)$/;"	f	class:LoginSessionModule
LoginSessionModule	LoginServer/LoginServer/LoginSessionModule.h	/^class LoginSessionModule : public BaseModule$/;"	c
MAIN_CMD	Extern/ServerFrame/server/Protocol.h	/^enum MAIN_CMD$/;"	g
MAP	Extern/Tool/Common/Value_.h	/^        MAP,$/;"	m	class:Value_::Type
MARKUP_SETDEBUGSTATE	Extern/Tool/XML/XML.h	/^#define MARKUP_SETDEBUGSTATE /;"	d
MARKUP_SETDEBUGSTATE	Extern/Tool/XML/XML.h	/^#define MARKUP_SETDEBUGSTATE$/;"	d
MAX_BUF	Extern/ServerFrame/log/LogManager.cpp	/^#define MAX_BUF /;"	d	file:
MAX_EPOLL_EVENTS_PER_RUN	Extern/ServerFrame/commnication/KxEpoller.h	/^#define MAX_EPOLL_EVENTS_PER_RUN /;"	d
MAX_ITOA_BUFFER_SIZE	Extern/Tool/Common/Value_.cpp	/^#define MAX_ITOA_BUFFER_SIZE /;"	d	file:
MAX_POOL_SIZE	Extern/ServerFrame/core/KxMemPool.h	/^    static const unsigned int MAX_POOL_SIZE = 1 << 31;      \/\/内存池最大容量 $/;"	m	class:KxMemPool
MAX_RANGESCORE	Extern/Tool/DBDriver/RedisStorer.h	/^#define MAX_RANGESCORE /;"	d
MAX_RECONECT_TIME	SessionServer/SessionServer/SessionConnect.h	/^#define MAX_RECONECT_TIME	/;"	d
MAX_TCP_PKG_LEN	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^#define MAX_TCP_PKG_LEN /;"	d	file:
MAX_UDP_PKG_LEN	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^#define MAX_UDP_PKG_LEN /;"	d	file:
MAX_WATER_MARK	Extern/ServerFrame/core/KxMemPool.h	/^    static const unsigned int MAX_WATER_MARK = 1 << 30;     \/\/最大水位$/;"	m	class:KxMemPool
MD5	Extern/Tool/MD5/MD5.cpp	/^MD5::MD5()$/;"	f	class:MD5
MD5	Extern/Tool/MD5/MD5.h	/^class MD5$/;"	c
MD5_GASSERT	Extern/Tool/MD5/MD5.cpp	/^#define MD5_GASSERT(/;"	d	file:
MD5_INIT_STATE_0	Extern/Tool/MD5/MD5Def.h	/^#define MD5_INIT_STATE_0 /;"	d
MD5_INIT_STATE_1	Extern/Tool/MD5/MD5Def.h	/^#define MD5_INIT_STATE_1 /;"	d
MD5_INIT_STATE_2	Extern/Tool/MD5/MD5Def.h	/^#define MD5_INIT_STATE_2 /;"	d
MD5_INIT_STATE_3	Extern/Tool/MD5/MD5Def.h	/^#define MD5_INIT_STATE_3 /;"	d
MD5_S11	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S11 /;"	d
MD5_S12	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S12 /;"	d
MD5_S13	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S13 /;"	d
MD5_S14	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S14 /;"	d
MD5_S21	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S21 /;"	d
MD5_S22	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S22 /;"	d
MD5_S23	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S23 /;"	d
MD5_S24	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S24 /;"	d
MD5_S31	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S31 /;"	d
MD5_S32	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S32 /;"	d
MD5_S33	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S33 /;"	d
MD5_S34	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S34 /;"	d
MD5_S41	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S41 /;"	d
MD5_S42	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S42 /;"	d
MD5_S43	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S43 /;"	d
MD5_S44	Extern/Tool/MD5/MD5Def.h	/^#define MD5_S44 /;"	d
MD5_T01	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T01 /;"	d
MD5_T02	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T02 /;"	d
MD5_T03	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T03 /;"	d
MD5_T04	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T04 /;"	d
MD5_T05	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T05 /;"	d
MD5_T06	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T06 /;"	d
MD5_T07	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T07 /;"	d
MD5_T08	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T08 /;"	d
MD5_T09	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T09 /;"	d
MD5_T10	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T10 /;"	d
MD5_T11	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T11 /;"	d
MD5_T12	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T12 /;"	d
MD5_T13	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T13 /;"	d
MD5_T14	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T14 /;"	d
MD5_T15	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T15 /;"	d
MD5_T16	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T16 /;"	d
MD5_T17	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T17 /;"	d
MD5_T18	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T18 /;"	d
MD5_T19	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T19 /;"	d
MD5_T20	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T20 /;"	d
MD5_T21	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T21 /;"	d
MD5_T22	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T22 /;"	d
MD5_T23	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T23 /;"	d
MD5_T24	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T24 /;"	d
MD5_T25	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T25 /;"	d
MD5_T26	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T26 /;"	d
MD5_T27	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T27 /;"	d
MD5_T28	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T28 /;"	d
MD5_T29	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T29 /;"	d
MD5_T30	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T30 /;"	d
MD5_T31	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T31 /;"	d
MD5_T32	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T32 /;"	d
MD5_T33	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T33 /;"	d
MD5_T34	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T34 /;"	d
MD5_T35	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T35 /;"	d
MD5_T36	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T36 /;"	d
MD5_T37	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T37 /;"	d
MD5_T38	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T38 /;"	d
MD5_T39	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T39 /;"	d
MD5_T40	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T40 /;"	d
MD5_T41	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T41 /;"	d
MD5_T42	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T42 /;"	d
MD5_T43	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T43 /;"	d
MD5_T44	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T44 /;"	d
MD5_T45	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T45 /;"	d
MD5_T46	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T46 /;"	d
MD5_T47	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T47 /;"	d
MD5_T48	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T48 /;"	d
MD5_T49	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T49 /;"	d
MD5_T50	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T50 /;"	d
MD5_T51	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T51 /;"	d
MD5_T52	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T52 /;"	d
MD5_T53	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T53 /;"	d
MD5_T54	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T54 /;"	d
MD5_T55	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T55 /;"	d
MD5_T56	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T56 /;"	d
MD5_T57	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T57 /;"	d
MD5_T58	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T58 /;"	d
MD5_T59	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T59 /;"	d
MD5_T60	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T60 /;"	d
MD5_T61	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T61 /;"	d
MD5_T62	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T62 /;"	d
MD5_T63	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T63 /;"	d
MD5_T64	Extern/Tool/MD5/MD5Def.h	/^#define MD5_T64 /;"	d
MEM_BASE_COUNT	Extern/ServerFrame/core/KxMemPool.h	/^    static const unsigned int MEM_BASE_COUNT = 32;          \/\/每次分配数量$/;"	m	class:KxMemPool
MEM_SIZE_BIG	Extern/ServerFrame/core/KxMemPool.h	/^    static const unsigned int MEM_SIZE_BIG = 1 << 27;       \/\/内存标量――大 128M$/;"	m	class:KxMemPool
MEM_SIZE_MID	Extern/ServerFrame/core/KxMemPool.h	/^    static const unsigned int MEM_SIZE_MID = 1 << 26;       \/\/内存标量――中 64M$/;"	m	class:KxMemPool
MEM_SIZE_MIN	Extern/ServerFrame/core/KxMemPool.h	/^    static const unsigned int MEM_SIZE_MIN = 1 << 20;       \/\/内存标量――小 1M$/;"	m	class:KxMemPool
MILLION	Extern/ServerFrame/helper/KxTimeVal.h	/^#define MILLION /;"	d
MINGASSERT	Extern/Tool/Common/Value_.cpp	/^#define MINGASSERT(/;"	d	file:
MING_SAFE_DELETE	Extern/Tool/Common/Value_.cpp	/^#define MING_SAFE_DELETE(/;"	d	file:
MNT_CDATA_SECTION	Extern/Tool/XML/XML.h	/^        MNT_CDATA_SECTION			= 8,  \/\/ 0x08$/;"	e	enum:XML::MarkupNodeType
MNT_COMMENT	Extern/Tool/XML/XML.h	/^        MNT_COMMENT					= 32, \/\/ 0x20$/;"	e	enum:XML::MarkupNodeType
MNT_DOCUMENT_TYPE	Extern/Tool/XML/XML.h	/^        MNT_DOCUMENT_TYPE			= 64, \/\/ 0x40$/;"	e	enum:XML::MarkupNodeType
MNT_ELEMENT	Extern/Tool/XML/XML.h	/^        MNT_ELEMENT					= 1,  \/\/ 0x01$/;"	e	enum:XML::MarkupNodeType
MNT_EXCLUDE_WHITESPACE	Extern/Tool/XML/XML.h	/^        MNT_EXCLUDE_WHITESPACE		= 123,\/\/ 0x7b$/;"	e	enum:XML::MarkupNodeType
MNT_PROCESSING_INSTRUCTION	Extern/Tool/XML/XML.h	/^        MNT_PROCESSING_INSTRUCTION	= 16, \/\/ 0x10$/;"	e	enum:XML::MarkupNodeType
MNT_TEXT	Extern/Tool/XML/XML.h	/^        MNT_TEXT					= 2,  \/\/ 0x02$/;"	e	enum:XML::MarkupNodeType
MNT_WHITESPACE	Extern/Tool/XML/XML.h	/^        MNT_WHITESPACE				= 4,  \/\/ 0x04$/;"	e	enum:XML::MarkupNodeType
MODELTYPE_NONE	Extern/ServerFrame/helper/IDBModel.h	/^	MODELTYPE_NONE,					\/\/无$/;"	e	enum:ModelType
MODELTYPE_USER	Extern/ServerFrame/helper/IDBModel.h	/^	MODELTYPE_USER,					\/\/玩家数据模型$/;"	e	enum:ModelType
MainCommand	Extern/ServerFrame/server/Head.h	/^    inline int MainCommand()$/;"	f	struct:Head
MakeCommand	Extern/ServerFrame/server/Head.h	/^    inline void MakeCommand(int main, int sub)$/;"	f	struct:Head
MakeCommand	Extern/ServerFrame/server/Head.h	/^inline int MakeCommand(int main, int sub)$/;"	f
MakeKey	Extern/ServerFrame/helper/ModelDef.h	/^    static std::string MakeKey(int num, std::string prefix)$/;"	f	class:ModelKey
MarkupNodeType	Extern/Tool/XML/XML.h	/^    enum MarkupNodeType$/;"	g	class:XML
Match	Extern/Tool/XML/XML.h	/^        bool Match( const char* szName )$/;"	f	struct:XML::TokenPos
MemML	Extern/ServerFrame/core/KxMemPool.h	/^typedef std::map<unsigned int, std::list<void*>*>   MemML;$/;"	t
MemMS	Extern/ServerFrame/core/KxMemPool.h	/^typedef std::map<unsigned int, std::set<void*>*>    MemMS;$/;"	t
ModelKey	Extern/ServerFrame/helper/ModelDef.h	/^class ModelKey$/;"	c
ModelType	Extern/ServerFrame/helper/IDBModel.h	/^enum ModelType$/;"	g
NONE	Extern/Tool/Common/Value_.h	/^        NONE = 0,$/;"	m	class:Value_::Type
NO_EN	Extern/Tool/LocalDefault/LocalDefault.h	/^		NO_EN$/;"	e	enum:LocalDefault::ENCRYPT_TYPE
NetWorkManager	SessionServer/SessionServer/NetworkManager.cpp	/^NetWorkManager::NetWorkManager(void)$/;"	f	class:NetWorkManager
NetWorkManager	SessionServer/SessionServer/NetworkManager.h	/^class NetWorkManager : public KxTimerObject$/;"	c
NewUser	Extern/ServerFrame/data/DataModel/UserModel.cpp	/^bool UserModel::NewUser(int uid, std::string name, std::map<int, int> &info)$/;"	f	class:UserModel
NextFloat	Extern/ServerFrame/helper/CsvLoader.cpp	/^float CsvLoader::NextFloat()$/;"	f	class:CsvLoader
NextInt	Extern/ServerFrame/helper/CsvLoader.cpp	/^int CsvLoader::NextInt()$/;"	f	class:CsvLoader
NextLine	Extern/ServerFrame/helper/CsvLoader.cpp	/^bool CsvLoader::NextLine()$/;"	f	class:CsvLoader
NextStr	Extern/ServerFrame/helper/CsvLoader.cpp	/^std::string CsvLoader::NextStr()$/;"	f	class:CsvLoader
Null	Extern/Tool/Common/Data_.cpp	/^const Data_ Data_::Null;$/;"	m	class:Data_	file:
Null	Extern/Tool/Common/Data_.h	/^	static const Data_ Null;$/;"	m	class:Data_
Null	Extern/Tool/Common/Value_.cpp	/^const Value_ Value_::Null;$/;"	m	class:Value_	file:
Null	Extern/Tool/Common/Value_.h	/^    static const Value_ Null;$/;"	m	class:Value_
Observable	Extern/Tool/Observer/Observer.h	/^	Observable(){}$/;"	f	class:Observable
Observable	Extern/Tool/Observer/Observer.h	/^class Observable$/;"	c
Observer	Extern/Tool/Observer/Observer.h	/^	Observer(){}$/;"	f	class:Observer
Observer	Extern/Tool/Observer/Observer.h	/^class Observer$/;"	c
ObserverParam	Extern/Tool/Observer/Observer.h	/^	ObserverParam()$/;"	f	struct:ObserverParam
ObserverParam	Extern/Tool/Observer/Observer.h	/^struct ObserverParam$/;"	s
OutOfElem	Extern/Tool/XML/XML.cpp	/^bool XML::OutOfElem()$/;"	f	class:XML
P	Extern/Tool/MD5/MD5.cpp	/^#define P(/;"	d	file:
PADDING	Extern/Tool/MD5/MD5Def.h	/^static unsigned char PADDING[64] = {$/;"	v
PASSWD_SIZE	Extern/ServerFrame/server/Protocol.h	/^#define PASSWD_SIZE /;"	d
PUT_UINT32	Extern/Tool/MD5/MD5.cpp	/^#define PUT_UINT32(/;"	d	file:
Persist	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::Persist(const std::string &key)$/;"	f	class:RedisStorer
Port	Client/Client/GameNetworkNode.h	/^    int                         Port;               \/\/ 连接的端口$/;"	m	struct:ServerConn
RECONNECT_TIME_INTERVAL	SessionServer/SessionServer/SessionConnect.h	/^#define RECONNECT_TIME_INTERVAL	/;"	d
REDIS_BLOCK	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_BLOCK /;"	d
REDIS_CONNECTED	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_CONNECTED /;"	d
REDIS_CONNECT_RETRIES	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_CONNECT_RETRIES /;"	d
REDIS_CONN_TCP	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    REDIS_CONN_TCP,$/;"	e	enum:redisConnectionType
REDIS_CONN_UNIX	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    REDIS_CONN_UNIX$/;"	e	enum:redisConnectionType
REDIS_DISCONNECTING	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_DISCONNECTING /;"	d
REDIS_ERR	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_ERR /;"	d
REDIS_ERR_EOF	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_ERR_EOF /;"	d
REDIS_ERR_IO	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_ERR_IO /;"	d
REDIS_ERR_OOM	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_ERR_OOM /;"	d
REDIS_ERR_OTHER	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_ERR_OTHER /;"	d
REDIS_ERR_PROTOCOL	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_ERR_PROTOCOL /;"	d
REDIS_FREEING	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_FREEING /;"	d
REDIS_IN_CALLBACK	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_IN_CALLBACK /;"	d
REDIS_KEEPALIVE_INTERVAL	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_KEEPALIVE_INTERVAL /;"	d
REDIS_MONITORING	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_MONITORING /;"	d
REDIS_OK	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_OK /;"	d
REDIS_READER_MAX_BUF	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_READER_MAX_BUF /;"	d
REDIS_REPLY_ARRAY	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_REPLY_ARRAY /;"	d
REDIS_REPLY_ERROR	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_REPLY_ERROR /;"	d
REDIS_REPLY_INTEGER	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_REPLY_INTEGER /;"	d
REDIS_REPLY_NIL	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_REPLY_NIL /;"	d
REDIS_REPLY_STATUS	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_REPLY_STATUS /;"	d
REDIS_REPLY_STRING	Extern/Tool/DBDriver/hiredis/read.h	/^#define REDIS_REPLY_STRING /;"	d
REDIS_REUSEADDR	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_REUSEADDR /;"	d
REDIS_SUBSCRIBED	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define REDIS_SUBSCRIBED /;"	d
REGISTER_DATA	Extern/ServerFrame/server/Protocol.h	/^struct REGISTER_DATA$/;"	s
RETRYFAILED	Extern/Tool/DBDriver/RedisStorer.h	/^    RETRYFAILED     = -2,              \/\/ 重试失败$/;"	e	enum:ResultStatus
RankData	Extern/Tool/DBDriver/RedisStorer.h	/^struct RankData$/;"	s
RealremoveGameUser	Extern/ServerFrame/data/GameUserManager.cpp	/^void CGameUserManager::RealremoveGameUser(int uid)$/;"	f	class:CGameUserManager
RedisBinaryData	Extern/Tool/DBDriver/RedisStorer.h	/^	RedisBinaryData()$/;"	f	struct:RedisBinaryData
RedisBinaryData	Extern/Tool/DBDriver/RedisStorer.h	/^    RedisBinaryData(const char *d, int len)$/;"	f	struct:RedisBinaryData
RedisBinaryData	Extern/Tool/DBDriver/RedisStorer.h	/^struct RedisBinaryData$/;"	s
RedisQtAdapter	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        RedisQtAdapter(QObject * parent = 0)$/;"	f	class:RedisQtAdapter
RedisQtAdapter	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^class RedisQtAdapter : public QObject {$/;"	c
RedisQtAddRead	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^    void RedisQtAddRead(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtAddWrite	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^    void RedisQtAddWrite(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtCleanup	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^    void RedisQtCleanup(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtDelRead	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^    void RedisQtDelRead(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtDelWrite	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^    void RedisQtDelWrite(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisRunLoop	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^} RedisRunLoop;$/;"	t	typeref:struct:__anon5
RedisSource	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^} RedisSource;$/;"	t	typeref:struct:__anon4
RedisStorer	Extern/Tool/DBDriver/RedisStorer.cpp	/^RedisStorer::RedisStorer()$/;"	f	class:RedisStorer
RedisStorer	Extern/Tool/DBDriver/RedisStorer.h	/^class RedisStorer : public IStorer$/;"	c
Refresh	Extern/ServerFrame/data/DataModel/UserModel.cpp	/^bool UserModel::Refresh()$/;"	f	class:UserModel
Refresh	Extern/ServerFrame/helper/IDBModel.h	/^	virtual bool Refresh() { return true; }$/;"	f	class:IDBModel
Release	Extern/ServerFrame/helper/CsvLoader.cpp	/^void CsvLoader::Release()$/;"	f	class:CsvLoader
RemoveAttrib	Extern/Tool/XML/XML.h	/^    bool RemoveAttrib( const char* szAttrib ) { return x_RemoveAttrib(m_iPos,szAttrib); };$/;"	f	class:XML
RemoveChildAttrib	Extern/Tool/XML/XML.h	/^    bool RemoveChildAttrib( const char* szAttrib ) { return x_RemoveAttrib(m_iPosChild,szAttrib); };$/;"	f	class:XML
RemoveChildElem	Extern/Tool/XML/XML.cpp	/^bool XML::RemoveChildElem()$/;"	f	class:XML
RemoveElem	Extern/Tool/XML/XML.cpp	/^bool XML::RemoveElem()$/;"	f	class:XML
RemoveNode	Extern/Tool/XML/XML.cpp	/^bool XML::RemoveNode()$/;"	f	class:XML
ResetChildPos	Extern/Tool/XML/XML.h	/^    void ResetChildPos() { x_SetPos(m_iPosParent,m_iPos,0); };$/;"	f	class:XML
ResetMainPos	Extern/Tool/XML/XML.h	/^    void ResetMainPos() { x_SetPos(m_iPosParent,0,0); };$/;"	f	class:XML
ResetPos	Extern/Tool/XML/XML.h	/^    void ResetPos() { x_SetPos(0,0,0); };$/;"	f	class:XML
RestorePos	Extern/Tool/XML/XML.cpp	/^bool XML::RestorePos( const char* szPosName )$/;"	f	class:XML
ResultStatus	Extern/Tool/DBDriver/RedisStorer.h	/^enum ResultStatus$/;"	g
RotateLeft	Extern/Tool/MD5/MD5.cpp	/^UnInt32_t MD5::RotateLeft(UnInt32_t x, int n)$/;"	f	class:MD5
RowData	Extern/Tool/DataManager/DataTable.cpp	/^RowData::RowData(DataTable* dataTable)$/;"	f	class:RowData
RowData	Extern/Tool/DataManager/DataTable.h	/^class RowData$/;"	c
RunningInServer	Extern/ServerFrame/core/KxCore.h	/^#define RunningInServer$/;"	d
RunningInServer	Extern/Tool/CommonHead.h	/^#define RunningInServer$/;"	d
S	Extern/Tool/MD5/MD5.cpp	/^#define S(/;"	d	file:
SDS_HDR	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_HDR(/;"	d
SDS_HDR_VAR	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_HDR_VAR(/;"	d
SDS_MAX_PREALLOC	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_MAX_PREALLOC /;"	d
SDS_TYPE_16	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_TYPE_16 /;"	d
SDS_TYPE_32	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_TYPE_32 /;"	d
SDS_TYPE_5	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_TYPE_5 /;"	d
SDS_TYPE_5_LEN	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_TYPE_5_LEN(/;"	d
SDS_TYPE_64	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_TYPE_64 /;"	d
SDS_TYPE_8	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_TYPE_8 /;"	d
SDS_TYPE_BITS	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_TYPE_BITS /;"	d
SDS_TYPE_MASK	Extern/Tool/DBDriver/hiredis/sds.h	/^#define SDS_TYPE_MASK /;"	d
SDelayDelData	Extern/ServerFrame/data/GameUserManager.h	/^struct SDelayDelData$/;"	s
SERIALIZE_MATCH	Extern/ServerFrame/helper/BufferData.h	/^#define SERIALIZE_MATCH(/;"	d
SERIALIZE_MATCH_VALUE	Extern/ServerFrame/helper/BufferData.h	/^#define SERIALIZE_MATCH_VALUE(/;"	d
SERVER_CONN_CHAT	Client/Client/GameNetworkNode.h	/^    SERVER_CONN_CHAT,         \/\/ chat服务器连接$/;"	e	enum:EServerConnType
SERVER_CONN_SESSION	Client/Client/GameNetworkNode.h	/^    SERVER_CONN_SESSION,      \/\/ session服务器连接$/;"	e	enum:EServerConnType
SERVER_MAIN	Extern/ServerFrame/server/Protocol.h	/^	SERVER_MAIN$/;"	e	enum:SERVER_MAIN_CMD
SERVER_MAIN_CMD	Extern/ServerFrame/server/Protocol.h	/^enum SERVER_MAIN_CMD$/;"	g
SERVER_NAME_LOGIN	Extern/ServerFrame/server/ServerConfig.h	/^#define  SERVER_NAME_LOGIN	/;"	d
SERVER_NAME_SESSION	Extern/ServerFrame/server/ServerConfig.h	/^#define  SERVER_NAME_SESSION	/;"	d
SERVER_PATH	Extern/ServerFrame/server/ServerConfig.cpp	/^#define SERVER_PATH /;"	d	file:
SERVER_PATH_FOR_DEBUG	Extern/ServerFrame/server/ServerConfig.cpp	/^#define SERVER_PATH_FOR_DEBUG /;"	d	file:
SERVER_SUB_CMD	Extern/ServerFrame/server/Protocol.h	/^enum SERVER_SUB_CMD$/;"	g
SERVER_SUB_OFFLINE	Extern/ServerFrame/server/Protocol.h	/^	SERVER_SUB_OFFLINE,$/;"	e	enum:SERVER_SUB_CMD
SERVER_SUB_OFFLINE	LoginServer/LoginServer/LoginService.cpp	/^void LoginService::SERVER_SUB_OFFLINE(int uid, char *buffer, int len, IKxComm *commun)$/;"	f	class:LoginService
SESSION_CONNECT_H__	SessionServer/SessionServer/SessionConnect.h	/^#define SESSION_CONNECT_H__$/;"	d
SOCKERR_ACCEPT_RETRIABLE	Extern/ServerFrame/core/KxCore.h	/^#define SOCKERR_ACCEPT_RETRIABLE(/;"	d
SOCKERR_CONNECT_REFUSED	Extern/ServerFrame/core/KxCore.h	/^#define SOCKERR_CONNECT_REFUSED(/;"	d
SOCKERR_CONNECT_RETRIABLE	Extern/ServerFrame/core/KxCore.h	/^#define SOCKERR_CONNECT_RETRIABLE(/;"	d
SOCKERR_RW_RETRIABLE	Extern/ServerFrame/core/KxCore.h	/^#define SOCKERR_RW_RETRIABLE(/;"	d
STORAGE_XML_FILE	Extern/Tool/DBDriver/DBManager.h	/^#define STORAGE_XML_FILE /;"	d
STORE_CACHE	Extern/Tool/DBDriver/IStorer.h	/^	STORE_CACHE,$/;"	e	enum:STORE_TYPE
STORE_MYSQL	Extern/Tool/DBDriver/IStorer.h	/^	STORE_MYSQL,$/;"	e	enum:STORE_TYPE
STORE_NONE	Extern/Tool/DBDriver/IStorer.h	/^	STORE_NONE,$/;"	e	enum:STORE_TYPE
STORE_OTHER	Extern/Tool/DBDriver/IStorer.h	/^	STORE_OTHER$/;"	e	enum:STORE_TYPE
STORE_REDIS	Extern/Tool/DBDriver/IStorer.h	/^	STORE_REDIS,$/;"	e	enum:STORE_TYPE
STORE_TMEM	Extern/Tool/DBDriver/IStorer.h	/^	STORE_TMEM,$/;"	e	enum:STORE_TYPE
STORE_TYPE	Extern/Tool/DBDriver/IStorer.h	/^enum STORE_TYPE$/;"	g
STRING	Extern/Tool/Common/Value_.h	/^        STRING,$/;"	m	class:Value_::Type
SUCCESS	Extern/Tool/DBDriver/RedisStorer.h	/^    SUCCESS         = 0                \/\/ 成功返回$/;"	e	enum:ResultStatus
Save	Extern/Tool/XML/XML.cpp	/^bool XML::Save( const char* szFileName )$/;"	f	class:XML
SavePos	Extern/Tool/XML/XML.cpp	/^bool XML::SavePos( const char* szPosName )$/;"	f	class:XML
SavedPos	Extern/Tool/XML/XML.h	/^    struct SavedPos$/;"	s	class:XML
Send	LoginServer/LoginServer/GateManager.cpp	/^int GateManager::Send( char* buffer, unsigned int len)$/;"	f	class:GateManager
ServerConfig	Extern/ServerFrame/server/ServerConfig.cpp	/^ServerConfig::ServerConfig()$/;"	f	class:ServerConfig
ServerConfig	Extern/ServerFrame/server/ServerConfig.h	/^class ServerConfig$/;"	c
ServerConn	Client/Client/GameNetworkNode.h	/^    ServerConn() :Port(0)$/;"	f	struct:ServerConn
ServerConn	Client/Client/GameNetworkNode.h	/^struct ServerConn$/;"	s
ServerData	Extern/ServerFrame/server/ServerConfig.h	/^	ServerData()$/;"	f	struct:ServerData
ServerData	Extern/ServerFrame/server/ServerConfig.h	/^struct ServerData$/;"	s
SessionClient	SessionServer/SessionServer/SessionClient.cpp	/^SessionClient::SessionClient()$/;"	f	class:SessionClient
SessionClient	SessionServer/SessionServer/SessionClient.h	/^class SessionClient : public KxTCPClienter$/;"	c
SessionConnector	SessionServer/SessionServer/SessionConnect.cpp	/^SessionConnector::SessionConnector()$/;"	f	class:SessionConnector
SessionConnector	SessionServer/SessionServer/SessionConnect.h	/^class SessionConnector : public KxTCPConnector$/;"	c
SessionEvent	SessionServer/SessionServer/SessionEvent.cpp	/^SessionEvent::SessionEvent()$/;"	f	class:SessionEvent
SessionEvent	SessionServer/SessionServer/SessionEvent.h	/^class SessionEvent :public IGameEvent$/;"	c
SessionListener	SessionServer/SessionServer/SessionListener.cpp	/^SessionListener::SessionListener()$/;"	f	class:SessionListener
SessionListener	SessionServer/SessionServer/SessionListener.h	/^class SessionListener : public KxTCPListener$/;"	c
SessionServer	SessionServer/SessionServer/SessionServer.cpp	/^SessionServer::SessionServer(void)$/;"	f	class:SessionServer
SessionServer	SessionServer/SessionServer/SessionServer.h	/^class SessionServer : public KxBaseServer$/;"	c
SetAdd	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetAdd(const std::string &key, const char* value, unsigned int len)$/;"	f	class:RedisStorer
SetAdd	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetAdd(const std::string &key, const std::string &value)$/;"	f	class:RedisStorer
SetAdd	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetAdd(const std::string &key, int& value)$/;"	f	class:RedisStorer
SetAttrib	Extern/Tool/XML/XML.h	/^    bool SetAttrib( const char* szAttrib, const char* szValue ) { return x_SetAttrib(m_iPos,szAttrib,szValue); };$/;"	f	class:XML
SetAttrib	Extern/Tool/XML/XML.h	/^    bool SetAttrib( const char* szAttrib, int nValue ) { return x_SetAttrib(m_iPos,szAttrib,nValue); };$/;"	f	class:XML
SetBoolToXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define SetBoolToXML	/;"	d
SetChildAttrib	Extern/Tool/XML/XML.h	/^    bool SetChildAttrib( const char* szAttrib, const char* szValue ) { return x_SetAttrib(m_iPosChild,szAttrib,szValue); };$/;"	f	class:XML
SetChildAttrib	Extern/Tool/XML/XML.h	/^    bool SetChildAttrib( const char* szAttrib, int nValue ) { return x_SetAttrib(m_iPosChild,szAttrib,nValue); };$/;"	f	class:XML
SetChildData	Extern/Tool/XML/XML.h	/^    bool SetChildData( const char* szData, int nCDATA=0 ) { return x_SetData(m_iPosChild,szData,nCDATA); };$/;"	f	class:XML
SetData	Extern/Tool/XML/XML.h	/^    bool SetData( const char* szData, int nCDATA=0 ) { return x_SetData(m_iPos,szData,nCDATA); };$/;"	f	class:XML
SetDataToXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define SetDataToXML	/;"	d
SetDel	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetDel(const std::string &key, const char* value, unsigned int len)$/;"	f	class:RedisStorer
SetDel	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetDel(const std::string &key, const std::string &value)$/;"	f	class:RedisStorer
SetDel	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetDel(const std::string &key, int &value)$/;"	f	class:RedisStorer
SetDoc	Extern/Tool/XML/XML.cpp	/^bool XML::SetDoc( const char* szDoc )$/;"	f	class:XML
SetDoubleToXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define SetDoubleToXML	/;"	d
SetFloatToXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define SetFloatToXML	/;"	d
SetGate	LoginServer/LoginServer/GateManager.h	/^    void SetGate(IKxComm* gate)$/;"	f	class:GateManager
SetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHash(const std::string &key, const char *format, ...)$/;"	f	class:RedisStorer
SetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHash(const std::string &key, std::map<int, int> &mapset)$/;"	f	class:RedisStorer
SetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHash(const std::string &key, std::map<int, std::string> &mapset)$/;"	f	class:RedisStorer
SetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHash(const std::string &key, std::map<std::string, int> &mapset)$/;"	f	class:RedisStorer
SetHash	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHash(const std::string &key, std::map<std::string, std::string> &mapset)$/;"	f	class:RedisStorer
SetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHashByField(const std::string &key, const std::string &field, char *value, int len)$/;"	f	class:RedisStorer
SetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHashByField(const std::string &key, const std::string &field, const std::string &value)$/;"	f	class:RedisStorer
SetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHashByField(const std::string &key, const std::string &field, int &value)$/;"	f	class:RedisStorer
SetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHashByField(const std::string &key, int field, char *value, int len)$/;"	f	class:RedisStorer
SetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHashByField(const std::string &key, int field, int value)$/;"	f	class:RedisStorer
SetHashByField	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetHashByField(const std::string &key, int field, std::string value)$/;"	f	class:RedisStorer
SetIntToXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define SetIntToXML	/;"	d
SetMove	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetMove(const std::string &src, const std::string &dest, const char* value, unsigned int len)$/;"	f	class:RedisStorer
SetMove	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetMove(const std::string &src, const std::string &dest, const std::string &value)$/;"	f	class:RedisStorer
SetServerID	Extern/ServerFrame/server/KxBaseServer.h	/^	void SetServerID(int nServerID) { m_ServerID = nServerID; }$/;"	f	class:KxBaseServer
SetString	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetString(const std::string &key, const char* value, unsigned int len)$/;"	f	class:RedisStorer
SetString	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetString(const std::string &key, const std::string &value)$/;"	f	class:RedisStorer
SetString	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetString(const std::string &key, int value)$/;"	f	class:RedisStorer
SetStringRange	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::SetStringRange(const std::string &key, int offset, int valuelen, char* value)$/;"	f	class:RedisStorer
SetStringToXML	Extern/Tool/LocalDefault/LocalDefault.h	/^#define SetStringToXML	/;"	d
SockVersion	Client/Client/GameNetworkNode.h	/^    KXSOCK_VERSION	SockVersion;        \/\/ ipv4\/ipv6$/;"	m	struct:ServerConn
SplitFloatToVector	Extern/ServerFrame/helper/CsvLoader.cpp	/^bool CsvLoader::SplitFloatToVector(const std::string &str, char sep, std::vector<float>& out)$/;"	f	class:CsvLoader
SplitIntToVector	Extern/ServerFrame/helper/CsvLoader.cpp	/^bool CsvLoader::SplitIntToVector(const std::string &str, char sep, std::vector<int>& out)$/;"	f	class:CsvLoader
SplitStrToVector	Extern/ServerFrame/helper/CsvLoader.cpp	/^bool CsvLoader::SplitStrToVector(const std::string &str, char sep, std::vector<std::string>& out)$/;"	f	class:CsvLoader
StringFormat	Extern/Tool/StringFormat/StringFormat.h	/^class StringFormat$/;"	c
SubCommand	Extern/ServerFrame/server/Head.h	/^    inline int SubCommand()$/;"	f	struct:Head
TEACrypt	Extern/Tool/Tea/TEACrypt.cpp	/^TEACrypt::TEACrypt()$/;"	f	class:TEACrypt
TEACrypt	Extern/Tool/Tea/TEACrypt.h	/^class TEACrypt$/;"	c
TO_STR	Extern/Tool/StringFormat/StringFormat.h	/^	#define TO_STR /;"	d
TTL	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::TTL(const std::string &key, int &seconds)$/;"	f	class:RedisStorer
TestClient	Client/Client/TestClient.cpp	/^TestClient::TestClient(void)$/;"	f	class:TestClient
TestClient	Client/Client/TestClient.h	/^class TestClient$/;"	c
ToHex	Extern/Tool/Utils/UrlEncode.cpp	/^unsigned char ToHex(unsigned char x)   $/;"	f
ToString	Extern/Tool/MD5/MD5.cpp	/^std::string CMD5::ToString()$/;"	f	class:CMD5
TokenPos	Extern/Tool/XML/XML.h	/^        TokenPos( const char* sz ) { Clear(); szDoc = sz; };$/;"	f	struct:XML::TokenPos
TokenPos	Extern/Tool/XML/XML.h	/^    struct TokenPos$/;"	s	class:XML
Transform	Extern/Tool/MD5/MD5.cpp	/^void MD5::Transform(UnChar_t Block[64])$/;"	f	class:MD5
Trim	Extern/ServerFrame/helper/CsvLoader.cpp	/^std::string CsvLoader::Trim(std::string str)$/;"	f	class:CsvLoader
Type	Extern/Tool/Common/Value_.h	/^    enum class Type$/;"	c	class:Value_
UNSIGNED	Extern/Tool/Common/Value_.h	/^        UNSIGNED,$/;"	m	class:Value_::Type
UN_SERIALIZE_MATCH	Extern/ServerFrame/helper/BufferData.h	/^#define UN_SERIALIZE_MATCH(/;"	d
UN_SERIALIZE_MATCH_VALUE	Extern/ServerFrame/helper/BufferData.h	/^#define UN_SERIALIZE_MATCH_VALUE(/;"	d
USERFIELD	Extern/ServerFrame/data/DataModel/UserModel.h	/^enum USERFIELD$/;"	g
USR_FD_ACCOUNTID	Extern/ServerFrame/data/DataModel/UserModel.h	/^	USR_FD_ACCOUNTID = 10,			\/\/ accountid$/;"	e	enum:USERFIELD
USR_FD_CREATETIME	Extern/ServerFrame/data/DataModel/UserModel.h	/^	USR_FD_CREATETIME,			\/\/ 创建时间$/;"	e	enum:USERFIELD
USR_FD_DIAMOND	Extern/ServerFrame/data/DataModel/UserModel.h	/^	USR_FD_DIAMOND,			    \/\/ 钻石$/;"	e	enum:USERFIELD
USR_FD_END	Extern/ServerFrame/data/DataModel/UserModel.h	/^	USR_FD_END$/;"	e	enum:USERFIELD
USR_FD_EXP	Extern/ServerFrame/data/DataModel/UserModel.h	/^	USR_FD_EXP,				    \/\/ 经验$/;"	e	enum:USERFIELD
USR_FD_GOLD	Extern/ServerFrame/data/DataModel/UserModel.h	/^	USR_FD_GOLD,			    \/\/ 金币$/;"	e	enum:USERFIELD
USR_FD_NONE	Extern/ServerFrame/data/DataModel/UserModel.h	/^	USR_FD_NONE,			    \/\/$/;"	e	enum:USERFIELD
USR_FD_USERLV	Extern/ServerFrame/data/DataModel/UserModel.h	/^	USR_FD_USERLV,			    \/\/ 等级$/;"	e	enum:USERFIELD
USR_FD_USERNAME	Extern/ServerFrame/data/DataModel/UserModel.h	/^	USR_FD_USERNAME,			\/\/ name$/;"	e	enum:USERFIELD
UnChar_t	Extern/Tool/MD5/MD5.h	/^typedef unsigned char		UnChar_t;$/;"	t
UnInt32_t	Extern/Tool/MD5/MD5.h	/^typedef unsigned int		UnInt32_t;$/;"	t
UnInt32_t	Extern/Tool/Tea/TEACrypt.h	/^typedef unsigned int	UnInt32_t;$/;"	t
UnLongInt_t	Extern/Tool/MD5/MD5.h	/^typedef unsigned long int	UnLongInt_t;$/;"	t
UnLong_t	Extern/Tool/MD5/MD5.h	/^typedef unsigned long		UnLong_t;$/;"	t
Update	Extern/Tool/MD5/MD5.cpp	/^void MD5::Update(UnChar_t* Input, UnInt32_t nInputLen)$/;"	f	class:MD5
UrlEncode	Extern/Tool/Utils/UrlEncode.h	/^class UrlEncode$/;"	c
UrlEncode_h__	Extern/Tool/Utils/UrlEncode.h	/^#define UrlEncode_h__$/;"	d
UserModel	Extern/ServerFrame/data/DataModel/UserModel.cpp	/^UserModel::UserModel()$/;"	f	class:UserModel
UserModel	Extern/ServerFrame/data/DataModel/UserModel.h	/^class UserModel : public IDBModel$/;"	c
UsrKey	Extern/ServerFrame/helper/ModelDef.h	/^	static std::string UsrKey(int uid) $/;"	f	class:ModelKey
VECTOR	Extern/Tool/Common/Value_.h	/^        VECTOR,$/;"	m	class:Value_::Type
ValueCrypt	Extern/Tool/Utils/ValueCrypt.h	/^class ValueCrypt$/;"	c
ValueCrypt_h__	Extern/Tool/Utils/ValueCrypt.h	/^#define ValueCrypt_h__$/;"	d
ValueMap	Extern/Tool/Common/Value_.h	/^typedef std::unordered_map<std::string, Value_> ValueMap;$/;"	t
ValueMapIntKey	Extern/Tool/Common/Value_.h	/^typedef std::unordered_map<int, Value_> ValueMapIntKey;$/;"	t
ValueMapIntKeyNull	Extern/Tool/Common/Value_.cpp	/^const ValueMapIntKey ValueMapIntKeyNull;$/;"	v
ValueMapNull	Extern/Tool/Common/Value_.cpp	/^const ValueMap ValueMapNull;$/;"	v
ValueVector	Extern/Tool/Common/Value_.h	/^typedef std::vector<Value_> ValueVector;$/;"	t
ValueVectorNull	Extern/Tool/Common/Value_.cpp	/^const ValueVector ValueVectorNull;$/;"	v
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_()$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(ValueMap&& v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(ValueMapIntKey&& v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(ValueVector&& v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(Value_&& other)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(bool v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(const ValueMap& v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(const ValueMapIntKey& v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(const ValueVector& v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(const Value_& other)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(const char* v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(const std::string& v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(double v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(float v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(int v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(unsigned char v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.cpp	/^Value_::Value_(unsigned int v)$/;"	f	class:Value_
Value_	Extern/Tool/Common/Value_.h	/^class  Value_$/;"	c
Write	Extern/Tool/DBDriver/RedisStorer.h	/^	void Write(const char *d, int len)$/;"	f	struct:RedisBinaryData
XML	Extern/Tool/XML/XML.h	/^    XML( const XML& markup ) { *this = markup; };$/;"	f	class:XML
XML	Extern/Tool/XML/XML.h	/^    XML( const char* szDoc ) { SetDoc( szDoc ); };$/;"	f	class:XML
XML	Extern/Tool/XML/XML.h	/^    XML() { SetDoc( NULL ); };$/;"	f	class:XML
XML	Extern/Tool/XML/XML.h	/^class XML$/;"	c
XML_FILE_NAME	Extern/Tool/LocalDefault/LocalDefault.cpp	/^#define XML_FILE_NAME /;"	d	file:
ZCount	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ZCount(const std::string &key, int &count, int minsource, int maxsource)$/;"	f	class:RedisStorer
ZDel	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ZDel(const std::string &key, int start, int stop)$/;"	f	class:RedisStorer
ZRange	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ZRange(const std::string &key, std::vector<RankData> &ranks, int start, int stop)$/;"	f	class:RedisStorer
ZRank	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ZRank(const std::string &key, int id, int &rank)$/;"	f	class:RedisStorer
ZScore	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::ZScore(const std::string &key, int id, int &Score)$/;"	f	class:RedisStorer
Zadd	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::Zadd(const std::string &key, int id, int source)$/;"	f	class:RedisStorer
_COMMON_HEAD_H__	Extern/Tool/CommonHead.h	/^#define _COMMON_HEAD_H__$/;"	d
_DATASOURCE_H_	Extern/Tool/Observer/Observer.h	/^#define _DATASOURCE_H_$/;"	d
_DS	Extern/Tool/XML/XML.h	/^#define _DS(/;"	d
_GAME_CHANGE_CLIENT_H__	SessionServer/SessionServer/ConnectEvent.h	/^#define _GAME_CHANGE_CLIENT_H__$/;"	d
_GAME_INTERFACE_H__	SessionServer/SessionServer/GameInterface.h	/^#define _GAME_INTERFACE_H__$/;"	d
_KX_I_LOGMANAGER_H__	Extern/ServerFrame/log/ILogHandler.h	/^#define _KX_I_LOGMANAGER_H__$/;"	d
_KX_LOGMANAGER_H__	Extern/ServerFrame/log/LogManager.h	/^#define _KX_LOGMANAGER_H__$/;"	d
_SERVER_CONFIG_H__	Extern/ServerFrame/server/ServerConfig.h	/^#define _SERVER_CONFIG_H__$/;"	d
_STORAGE_MANAGER_H__	Extern/Tool/DBDriver/DBManager.h	/^#define _STORAGE_MANAGER_H__$/;"	d
_TO_STR	Extern/Tool/StringFormat/StringFormat.h	/^#define _TO_STR(/;"	d
_XML_H__	Extern/Tool/XML/XML.h	/^#define _XML_H__$/;"	d
__BASESERVER_H__	Extern/ServerFrame/server/KxBaseServer.h	/^#define __BASESERVER_H__$/;"	d
__BASE_MODULE_H__	Extern/ServerFrame/helper/BaseModule.h	/^#define __BASE_MODULE_H__$/;"	d
__BUFFERDATA_H__	Extern/ServerFrame/helper/BufferData.h	/^#define __BUFFERDATA_H__$/;"	d
__BUFFERLIST_H__	Extern/ServerFrame/commnication/KxBufferList.h	/^#define __BUFFERLIST_H__$/;"	d
__BUFFER_DATA_TOOL_H__	Extern/ServerFrame/helper/BufferTool.h	/^#define __BUFFER_DATA_TOOL_H__$/;"	d
__CSV_LOADER_H__	Extern/ServerFrame/helper/CsvLoader.h	/^#define __CSV_LOADER_H__$/;"	d
__EPOLLER_H__	Extern/ServerFrame/commnication/KxEpoller.h	/^#define __EPOLLER_H__$/;"	d
__GAMEMODULE_H__	Client/Client/GameModule.h	/^#define __GAMEMODULE_H__$/;"	d
__GAMENETWORKNODE_H__	Client/Client/GameNetworkNode.h	/^#define __GAMENETWORKNODE_H__$/;"	d
__GAMEUSER_MANAGER_H__	Extern/ServerFrame/data/GameUserManager.h	/^#define __GAMEUSER_MANAGER_H__$/;"	d
__GAME_MODULE_H__	SessionServer/SessionServer/ConnectModule.h	/^#define __GAME_MODULE_H__$/;"	d
__GAME_USER_H__	Extern/ServerFrame/data/GameUser.h	/^#define __GAME_USER_H__$/;"	d
__GATE_MANAGER_H__	LoginServer/LoginServer/GateManager.h	/^#define __GATE_MANAGER_H__$/;"	d
__HEAD_H__	Extern/ServerFrame/server/Head.h	/^#define __HEAD_H__$/;"	d
__HIREDIS_AE_H__	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^#define __HIREDIS_AE_H__$/;"	d
__HIREDIS_ASYNC_H	Extern/Tool/DBDriver/hiredis/async.h	/^#define __HIREDIS_ASYNC_H$/;"	d
__HIREDIS_GLIB_H__	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^#define __HIREDIS_GLIB_H__$/;"	d
__HIREDIS_H	Extern/Tool/DBDriver/hiredis/hiredis.h	/^#define __HIREDIS_H$/;"	d
__HIREDIS_IVYKIS_H__	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^#define __HIREDIS_IVYKIS_H__$/;"	d
__HIREDIS_LIBEVENT_H__	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^#define __HIREDIS_LIBEVENT_H__$/;"	d
__HIREDIS_LIBEV_H__	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^#define __HIREDIS_LIBEV_H__$/;"	d
__HIREDIS_LIBUV_H__	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^#define __HIREDIS_LIBUV_H__$/;"	d
__HIREDIS_MACOSX_H__	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^#define __HIREDIS_MACOSX_H__$/;"	d
__HIREDIS_QT_H__	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^#define __HIREDIS_QT_H__$/;"	d
__HIREDIS_READ_H	Extern/Tool/DBDriver/hiredis/read.h	/^#define __HIREDIS_READ_H$/;"	d
__IDBMODEL_H__	Extern/ServerFrame/helper/IDBModel.h	/^#define __IDBMODEL_H__$/;"	d
__ISTORER_H__	Extern/Tool/DBDriver/IStorer.h	/^#define __ISTORER_H__$/;"	d
__KXCOMM_INTERFACE_H__	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^#define __KXCOMM_INTERFACE_H__$/;"	d
__KXCORE_H__	Extern/ServerFrame/core/KxCore.h	/^#define __KXCORE_H__$/;"	d
__KXOBJECT_H__	Extern/ServerFrame/core/KxObject.h	/^#define __KXOBJECT_H__$/;"	d
__KXPLATFORM_H__	Extern/ServerFrame/core/KxPlatform.h	/^#define __KXPLATFORM_H__$/;"	d
__KXSERVER_H__	Extern/ServerFrame/KXServer.h	/^#define __KXSERVER_H__$/;"	d
__KXTIMEVAL_H__	Extern/ServerFrame/helper/KxTimeVal.h	/^#define __KXTIMEVAL_H__$/;"	d
__KX_LOG_CONSOLE_HANDLER_H__	Extern/ServerFrame/log/LogConsoleHandler.h	/^#define __KX_LOG_CONSOLE_HANDLER_H__$/;"	d
__KX_LOG_FILE_HANDLER_H__	Extern/ServerFrame/log/LogFileHandler.h	/^#define __KX_LOG_FILE_HANDLER_H__$/;"	d
__KX_SOCKET__	Extern/ServerFrame/commnication/KxSock.h	/^#define __KX_SOCKET__$/;"	d
__KX_TIMER_CALLBACK_H__	Extern/ServerFrame/helper/KxTimerCallback.h	/^#define __KX_TIMER_CALLBACK_H__$/;"	d
__LOCAL_DEFAULT_H__	Extern/Tool/LocalDefault/LocalDefault.h	/^#define __LOCAL_DEFAULT_H__$/;"	d
__LOGIN_SERVICE_H__	LoginServer/LoginServer/LoginService.h	/^#define __LOGIN_SERVICE_H__$/;"	d
__MD5Def__	Extern/Tool/MD5/MD5Def.h	/^#define __MD5Def__$/;"	d
__MD5__	Extern/Tool/MD5/MD5.h	/^#define __MD5__$/;"	d
__MEMPOOL_H__	Extern/ServerFrame/core/KxMemPool.h	/^#define __MEMPOOL_H__$/;"	d
__MODEL_DEF_H__	Extern/ServerFrame/helper/ModelDef.h	/^#define __MODEL_DEF_H__$/;"	d
__MY_DATA_H__	Extern/Tool/Common/Data_.h	/^#define __MY_DATA_H__$/;"	d
__NETWORKMANAGER_H__	SessionServer/SessionServer/NetworkManager.h	/^#define __NETWORKMANAGER_H__$/;"	d
__PROTOCOL_H__	Extern/ServerFrame/server/Protocol.h	/^#define __PROTOCOL_H__$/;"	d
__REDIS_STORER_H__	Extern/Tool/DBDriver/RedisStorer.h	/^#define __REDIS_STORER_H__$/;"	d
__SDS_H	Extern/Tool/DBDriver/hiredis/sds.h	/^#define __SDS_H$/;"	d
__SELECTPOLLER_H__	Extern/ServerFrame/commnication/KxSelectPoller.h	/^#define __SELECTPOLLER_H__$/;"	d
__SESSIONSERVER_H__	Client/Client/TestClient.h	/^#define __SESSIONSERVER_H__$/;"	d
__SESSIONSERVER_H__	LoginServer/LoginServer/LoginServer.h	/^#define __SESSIONSERVER_H__$/;"	d
__SESSIONSERVER_H__	SessionServer/SessionServer/SessionServer.h	/^#define __SESSIONSERVER_H__$/;"	d
__SESSION_CLIENTER_H__	SessionServer/SessionServer/SessionClient.h	/^#define __SESSION_CLIENTER_H__$/;"	d
__SESSION_LISTENER_H__	LoginServer/LoginServer/LoginListener.h	/^#define __SESSION_LISTENER_H__$/;"	d
__SESSION_LISTENER_H__	SessionServer/SessionServer/SessionListener.h	/^#define __SESSION_LISTENER_H__$/;"	d
__SESSION_MODULE_H__	LoginServer/LoginServer/LoginSessionModule.h	/^#define __SESSION_MODULE_H__$/;"	d
__SESSION_MODULE_H__	SessionServer/SessionServer/ClientModule.h	/^#define __SESSION_MODULE_H__$/;"	d
__STRING_FORMAT_H__	Extern/Tool/StringFormat/StringFormat.h	/^#define __STRING_FORMAT_H__$/;"	d
__SUPPORT_BASE64_H__	Extern/Tool/LocalDefault/base64_.h	/^#define __SUPPORT_BASE64_H__$/;"	d
__SessionEvent_H__	SessionServer/SessionServer/SessionEvent.h	/^#define __SessionEvent_H__$/;"	d
__TCPCLIENTER_H__	Extern/ServerFrame/commnication/KxTCPClienter.h	/^#define __TCPCLIENTER_H__$/;"	d
__TCPCONNECTOR_H__	Extern/ServerFrame/commnication/KxTCPConnector.h	/^#define __TCPCONNECTOR_H__$/;"	d
__TCPLISTENER_H__	Extern/ServerFrame/commnication/KxTCPListener.h	/^#define __TCPLISTENER_H__$/;"	d
__TCPUNIT_H__	Extern/ServerFrame/commnication/KxTCPUnit.h	/^#define __TCPUNIT_H__$/;"	d
__TEACRYPT_H__	Extern/Tool/Tea/TEACrypt.h	/^#define __TEACRYPT_H__$/;"	d
__TIMERMANAGER_H__	Extern/ServerFrame/helper/KxTimerManager.h	/^#define __TIMERMANAGER_H__$/;"	d
__UDPUNIT_H__	Extern/ServerFrame/commnication/KxUDPUnit.h	/^#define __UDPUNIT_H__$/;"	d
__USER_MODEL_H__	Extern/ServerFrame/data/DataModel/UserModel.h	/^#define __USER_MODEL_H__$/;"	d
__Value__	Extern/Tool/Common/Value_.h	/^#define __Value__$/;"	d
_base64Decode	Extern/Tool/LocalDefault/base64_.cpp	/^int _base64Decode(const unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len )$/;"	f
_base64Encode	Extern/Tool/LocalDefault/base64_.cpp	/^void _base64Encode( const unsigned char *input, unsigned int input_len, char *output )$/;"	f
_bytes	Extern/Tool/Common/Data_.h	/^	unsigned char* _bytes;$/;"	m	class:Data_
_field	Extern/Tool/Common/Value_.h	/^    }_field;$/;"	m	class:Value_	typeref:union:Value_::__anon1
_filePath	Extern/Tool/LocalDefault/LocalDefault.cpp	/^std::string LocalDefault::_filePath = std::string("");$/;"	m	class:LocalDefault	file:
_filePath	Extern/Tool/LocalDefault/LocalDefault.h	/^    static std::string _filePath;$/;"	m	class:LocalDefault
_httoi	Extern/Tool/MD5/MD5.cpp	/^int _httoi(const char *value)$/;"	f
_isFilePathInitialized	Extern/Tool/LocalDefault/LocalDefault.cpp	/^bool LocalDefault::_isFilePathInitialized = false;$/;"	m	class:LocalDefault	file:
_isFilePathInitialized	Extern/Tool/LocalDefault/LocalDefault.h	/^    static bool _isFilePathInitialized;$/;"	m	class:LocalDefault
_mIsEn	Extern/Tool/LocalDefault/LocalDefault.h	/^	ENCRYPT_TYPE _mIsEn;$/;"	m	class:LocalDefault
_mXML	Extern/Tool/LocalDefault/LocalDefault.h	/^	XML* _mXML;$/;"	m	class:LocalDefault
_size	Extern/Tool/Common/Data_.h	/^	size_t _size;$/;"	m	class:Data_
_type	Extern/Tool/Common/Value_.h	/^    Type _type;$/;"	m	class:Value_
_userDefault	Extern/Tool/LocalDefault/LocalDefault.cpp	/^LocalDefault* LocalDefault::_userDefault = nullptr;$/;"	m	class:LocalDefault	file:
_userDefault	Extern/Tool/LocalDefault/LocalDefault.h	/^    static LocalDefault* _userDefault;$/;"	m	class:LocalDefault
ac	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^    redisAsyncContext *ac;$/;"	m	struct:__anon4
accept	Extern/ServerFrame/commnication/KxSock.cpp	/^KXCOMMID KxSock::accept()$/;"	f	class:KxSock
accountId	Extern/ServerFrame/server/Protocol.h	/^	int  accountId;$/;"	m	struct:REGISTER_DATA
accountId	Extern/ServerFrame/server/Protocol.h	/^	int accountId;$/;"	m	struct:LOGIN_DATA
add	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline void add(const kxTimeVal& v)$/;"	f	class:kxTimeVal
addBakServer	SessionServer/SessionServer/NetworkManager.cpp	/^bool NetWorkManager::addBakServer(int nGroupID, IKxComm* obj)$/;"	f	class:NetWorkManager
addCommObject	Extern/ServerFrame/commnication/KxEpoller.cpp	/^	int KxEpoller::addCommObject(IKxComm* obj, int events)$/;"	f	class:KxEpoller
addCommObject	Extern/ServerFrame/commnication/KxSelectPoller.cpp	/^int KxSelectPoller::addCommObject(IKxComm* obj, int type)$/;"	f	class:KxSelectPoller
addGameUser	Extern/ServerFrame/data/GameUserManager.cpp	/^void CGameUserManager::addGameUser(int uid, GameUser* gameUsr)$/;"	f	class:CGameUserManager
addGuest	SessionServer/SessionServer/NetworkManager.cpp	/^bool NetWorkManager::addGuest(unsigned int guestId, IKxComm* obj)$/;"	f	class:NetWorkManager
addHandler	Extern/ServerFrame/log/LogManager.cpp	/^bool LogManager::addHandler(ILogHandler* handler)$/;"	f	class:LogManager
addHandler	Extern/ServerFrame/log/LogManager.cpp	/^bool LogManager::addHandler(int handleId, ILogHandler* handler)$/;"	f	class:LogManager
addModelType	Extern/ServerFrame/data/GameUserManager.cpp	/^void CGameUserManager::addModelType(ModelType Type)$/;"	f	class:CGameUserManager
addObserver	Extern/Tool/Observer/Observer.cpp	/^void Observable::addObserver(Observer* a)$/;"	f	class:Observable
addPollType	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    inline void addPollType(int type)$/;"	f	class:IKxComm
addRead	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        void addRead() {$/;"	f	class:RedisQtAdapter
addRead	Extern/Tool/DBDriver/hiredis/async.h	/^        void (*addRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon6
addRowData	Extern/Tool/DataManager/DataTable.cpp	/^void DataTable::addRowData(std::vector<std::string>& data)$/;"	f	class:DataTable
addServer	SessionServer/SessionServer/NetworkManager.cpp	/^bool NetWorkManager::addServer(int serverId, IKxComm* obj)$/;"	f	class:NetWorkManager
addTimer	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerManager::addTimer(KxTimerObject* obj)$/;"	f	class:KxTimerManager
addTimer	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerManager::addTimer(KxTimerObject* obj, float delay, int repeat)$/;"	f	class:KxTimerManager
addTimer	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerManager::addTimer(KxTimerObject* obj, int delay, int repeat)$/;"	f	class:KxTimerManager
addTimerOnTime	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerManager::addTimerOnTime(KxTimerObject* obj, long timestamp)$/;"	f	class:KxTimerManager
addWrite	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        void addWrite() {$/;"	f	class:RedisQtAdapter
addWrite	Extern/Tool/DBDriver/hiredis/async.h	/^        void (*addWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon6
alloc	Extern/Tool/DBDriver/hiredis/sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr16
alloc	Extern/Tool/DBDriver/hiredis/sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr32
alloc	Extern/Tool/DBDriver/hiredis/sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr64
alloc	Extern/Tool/DBDriver/hiredis/sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr8
alphabet	Extern/Tool/LocalDefault/base64_.cpp	/^unsigned char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	v
applyChange	Extern/ServerFrame/commnication/KxEpoller.cpp	/^	int KxEpoller::applyChange(KXCOMMID fd, int opt, int events)$/;"	f	class:KxEpoller
asBool	Extern/Tool/Common/Value_.cpp	/^bool Value_::asBool() const$/;"	f	class:Value_
asByte	Extern/Tool/Common/Value_.cpp	/^unsigned char Value_::asByte() const$/;"	f	class:Value_
asDouble	Extern/Tool/Common/Value_.cpp	/^double Value_::asDouble() const$/;"	f	class:Value_
asFloat	Extern/Tool/Common/Value_.cpp	/^float Value_::asFloat() const$/;"	f	class:Value_
asInt	Extern/Tool/Common/Value_.cpp	/^int Value_::asInt() const$/;"	f	class:Value_
asIntKeyMap	Extern/Tool/Common/Value_.cpp	/^ValueMapIntKey& Value_::asIntKeyMap()$/;"	f	class:Value_
asIntKeyMap	Extern/Tool/Common/Value_.cpp	/^const ValueMapIntKey& Value_::asIntKeyMap() const$/;"	f	class:Value_
asString	Extern/Tool/Common/Value_.cpp	/^std::string Value_::asString() const$/;"	f	class:Value_
asUnsignedInt	Extern/Tool/Common/Value_.cpp	/^unsigned int Value_::asUnsignedInt() const$/;"	f	class:Value_
asValueMap	Extern/Tool/Common/Value_.cpp	/^ValueMap& Value_::asValueMap()$/;"	f	class:Value_
asValueMap	Extern/Tool/Common/Value_.cpp	/^const ValueMap& Value_::asValueMap() const$/;"	f	class:Value_
asValueVector	Extern/Tool/Common/Value_.cpp	/^ValueVector& Value_::asValueVector()$/;"	f	class:Value_
asValueVector	Extern/Tool/Common/Value_.cpp	/^const ValueVector& Value_::asValueVector() const$/;"	f	class:Value_
atof	Extern/Tool/StringFormat/StringFormat.h	/^	static double atof(const char* str)$/;"	f	class:StringFormat
attachToAglieList	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerManager::attachToAglieList(KxTimerObject* obj)$/;"	f	class:KxTimerManager
attachToFixList	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerManager::attachToFixList(KxTimerObject* obj)$/;"	f	class:KxTimerManager
bIsString	Extern/Tool/XML/XML.h	/^        bool bIsString;$/;"	m	struct:XML::TokenPos
base64Decode	Extern/Tool/LocalDefault/base64_.cpp	/^int base64Decode(const unsigned char *input, unsigned int inLength, unsigned char **output)$/;"	f
base64Encode	Extern/Tool/LocalDefault/base64_.cpp	/^int base64Encode(const unsigned char *input, unsigned int inLength, char **output) {$/;"	f
bind	Extern/ServerFrame/commnication/KxSock.cpp	/^int KxSock::bind(const char* addr, int port)$/;"	f	class:KxSock
bind	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^int KxUDPUnit::bind(char* ip, int port)$/;"	f	class:KxUDPUnit
bindTable	Extern/Tool/DataManager/DataManager.cpp	/^void DataManager::bindTable(DataTable& dataTable, const char* filename)$/;"	f	class:DataManager
boolVal	Extern/Tool/Common/Value_.h	/^        bool boolVal;$/;"	m	union:Value_::__anon1
broadCastData	SessionServer/SessionServer/NetworkManager.cpp	/^bool NetWorkManager::broadCastData(char *pszContext, int nLen)$/;"	f	class:NetWorkManager
buf	Extern/Tool/DBDriver/hiredis/read.h	/^    char *buf; \/* Read buffer *\/$/;"	m	struct:redisReader
buf	Extern/Tool/DBDriver/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr16
buf	Extern/Tool/DBDriver/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr32
buf	Extern/Tool/DBDriver/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr5
buf	Extern/Tool/DBDriver/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr64
buf	Extern/Tool/DBDriver/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr8
buffer	Extern/ServerFrame/commnication/KxBufferList.h	/^	char* buffer;$/;"	m	struct:kxBufferNode
buffer	Extern/Tool/MD5/MD5.h	/^		UnChar_t buffer[64];$/;"	m	struct:CMD5::md5_context
byteVal	Extern/Tool/Common/Value_.h	/^        unsigned char byteVal;$/;"	m	union:Value_::__anon1
c	Extern/Tool/DBDriver/hiredis/async.h	/^    redisContext c;$/;"	m	struct:redisAsyncContext
c2i	Extern/Tool/StringFormat/StringFormat.cpp	/^int StringFormat::c2i(char ch)$/;"	f	class:StringFormat
changeGuestToUser	SessionServer/SessionServer/NetworkManager.cpp	/^bool NetWorkManager::changeGuestToUser(SessionClient* guest, unsigned int userId)$/;"	f	class:NetWorkManager
changePollType	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    inline void changePollType(int type)$/;"	f	class:IKxComm
channels	Extern/Tool/DBDriver/hiredis/async.h	/^        struct dict *channels;$/;"	m	struct:redisAsyncContext::__anon7	typeref:struct:redisAsyncContext::__anon7::dict
charToUint32	Extern/Tool/Tea/TEACrypt.cpp	/^ UnInt32_t TEACrypt::charToUint32(char c1, char c2, char c3, char c4) $/;"	f	class:TEACrypt
checkBufferSize	Extern/ServerFrame/helper/BufferData.cpp	/^bool BufferData::checkBufferSize(unsigned int newLength)$/;"	f	class:BufferData
checkDataLength	Extern/ServerFrame/helper/BufferData.cpp	/^bool BufferData::checkDataLength(unsigned int dataLength)$/;"	f	class:BufferData
checkNewFile	Extern/ServerFrame/log/LogFileHandler.cpp	/^bool LogFileHandler::checkNewFile(int addSize)$/;"	f	class:LogFileHandler
checkTime	Extern/ServerFrame/helper/KxTimerManager.h	/^	inline bool checkTime(const kxTimeVal& now)$/;"	f	class:KxTimerObject
checkUserIsExist	Extern/ServerFrame/data/GameUserManager.cpp	/^bool CGameUserManager::checkUserIsExist(int uid)$/;"	f	class:CGameUserManager
clean	Extern/ServerFrame/helper/BufferData.cpp	/^void BufferData::clean()$/;"	f	class:BufferData
clean	Extern/ServerFrame/helper/KxTimerCallback.h	/^    void clean()$/;"	f	class:KxTimerCallback
clean	Extern/ServerFrame/server/ServerConfig.cpp	/^void ServerConfig::clean()$/;"	f	class:ServerConfig
clean	SessionServer/SessionServer/SessionClient.cpp	/^void SessionClient::clean()$/;"	f	class:SessionClient
cleanup	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        void cleanup() {$/;"	f	class:RedisQtAdapter
cleanup	Extern/Tool/DBDriver/hiredis/async.h	/^        void (*cleanup)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon6
clear	Extern/ServerFrame/commnication/KxBufferList.cpp	/^void KxBufferList::clear()$/;"	f	class:KxBufferList
clear	Extern/ServerFrame/commnication/KxSelectPoller.cpp	/^void KxSelectPoller::clear()$/;"	f	class:KxSelectPoller
clear	Extern/Tool/Common/Data_.cpp	/^void Data_::clear()$/;"	f	class:Data_
clear	Extern/Tool/Common/Value_.cpp	/^void Value_::clear()$/;"	f	class:Value_
clear	Extern/Tool/Tea/TEACrypt.cpp	/^void TEACrypt::clear()$/;"	f	class:TEACrypt
clearBakServer	SessionServer/SessionServer/NetworkManager.cpp	/^bool NetWorkManager::clearBakServer(int nGroupID)$/;"	f	class:NetWorkManager
clearHandler	Extern/ServerFrame/log/LogManager.cpp	/^void LogManager::clearHandler()$/;"	f	class:LogManager
clearLog	Extern/ServerFrame/log/LogManager.cpp	/^void LogManager::clearLog()$/;"	f	class:LogManager
close	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::close()$/;"	f	class:KxSock
close	Extern/ServerFrame/commnication/KxTCPListener.h	/^    virtual void close() { m_Socket->close(); }$/;"	f	class:KxTCPListener
close	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    virtual void close() { m_Socket->close(); }$/;"	f	class:KxTCPUnit
close	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^void KxUDPUnit::close()$/;"	f	class:KxUDPUnit
closeAllServer	SessionServer/SessionServer/NetworkManager.cpp	/^void NetWorkManager::closeAllServer()$/;"	f	class:NetWorkManager
closeConnect	Client/Client/GameNetworkNode.cpp	/^void CGameNetworkNode::closeConnect()$/;"	f	class:CGameNetworkNode
cmd	Extern/ServerFrame/server/Head.h	/^    int cmd;$/;"	m	struct:Head
connect	Extern/ServerFrame/commnication/KxSock.cpp	/^int KxSock::connect(const char* addr, int port)$/;"	f	class:KxSock
connect	Extern/ServerFrame/commnication/KxTCPConnector.cpp	/^bool KxTCPConnector::connect(const char* addr, int port, bool nonblock)$/;"	f	class:KxTCPConnector
connect	SessionServer/SessionServer/SessionConnect.cpp	/^bool SessionConnector::connect(const char* addr, int port, int serverId, bool nonblock)$/;"	f	class:SessionConnector
connectToServer	Client/Client/GameNetworkNode.cpp	/^bool CGameNetworkNode::connectToServer(const char *ip, int port, EServerConnType connType, KXSOCK_VERSION version \/*= KXV_IPV4*\/, std::function<void(bool)> callBack \/*= nullptr*\/)$/;"	f	class:CGameNetworkNode
connection_type	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    enum redisConnectionType connection_type;$/;"	m	struct:redisContext	typeref:enum:redisContext::redisConnectionType
context	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents
context	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^    redisAsyncContext *context;$/;"	m	struct:redisIvykisEvents
context	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibevEvents
context	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibeventEvents
context	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^  redisAsyncContext* context;$/;"	m	struct:redisLibuvEvents
context	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^    redisAsyncContext *context;$/;"	m	struct:__anon5
copy	Extern/Tool/Common/Data_.cpp	/^void Data_::copy(unsigned char* bytes, const size_t size)$/;"	f	class:Data_
create	Client/Client/GameNetworkNode.cpp	/^CGameNetworkNode* CGameNetworkNode::create()$/;"	f	class:CGameNetworkNode
create	Extern/ServerFrame/server/ServerConfig.cpp	/^bool ServerConfig::create()$/;"	f	class:ServerConfig
createArray	Extern/Tool/DBDriver/hiredis/read.h	/^    void *(*createArray)(const redisReadTask*, int);$/;"	m	struct:redisReplyObjectFunctions
createInteger	Extern/Tool/DBDriver/hiredis/read.h	/^    void *(*createInteger)(const redisReadTask*, long long);$/;"	m	struct:redisReplyObjectFunctions
createNil	Extern/Tool/DBDriver/hiredis/read.h	/^    void *(*createNil)(const redisReadTask*);$/;"	m	struct:redisReplyObjectFunctions
createString	Extern/Tool/DBDriver/hiredis/read.h	/^    void *(*createString)(const redisReadTask*, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions
crossProduct	Extern/Tool/StringFormat/StringFormat.h	/^inline float crossProduct(float x1, float y1, float x2, float y2)$/;"	f
csvline_populate	Extern/Tool/DataManager/CSVParser.h	/^void csvline_populate(std::vector<std::string> &record, const std::string& line, char delimiter)$/;"	f
ctrlhandler	Extern/ServerFrame/server/KxBaseServer.cpp	/^    bool ctrlhandler(DWORD ev)$/;"	f
currentTimer	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline const KxTimerObject* currentTimer()$/;"	f	class:KxTimerList
data	Extern/ServerFrame/server/Head.h	/^    inline void* data()$/;"	f	struct:Head
data	Extern/Tool/DBDriver/RedisStorer.h	/^	char* data;$/;"	m	struct:RedisBinaryData
data	Extern/Tool/DBDriver/hiredis/async.h	/^        void *data;$/;"	m	struct:redisAsyncContext::__anon6
data	Extern/Tool/DBDriver/hiredis/async.h	/^    void *data;$/;"	m	struct:redisAsyncContext
db_id	Extern/Tool/DBDriver/IStorer.h	/^	DBID db_id;			 \/\/ modeltype$/;"	m	struct:DBRule
decrypt	Extern/Tool/Tea/TEACrypt.cpp	/^ void TEACrypt::decrypt(char src[])$/;"	f	class:TEACrypt
decrypt	Extern/Tool/Tea/TEACrypt.cpp	/^void TEACrypt::decrypt(UnInt32_t v[], UnInt32_t k[])$/;"	f	class:TEACrypt
decrypt	Extern/Tool/Tea/TEACrypt.cpp	/^void TEACrypt::decrypt(const char* src, size_t size)$/;"	f	class:TEACrypt
decryptDouble	Extern/Tool/Utils/ValueCrypt.cpp	/^double ValueCrypt::decryptDouble( double v, int key1, int key2 )$/;"	f	class:ValueCrypt
decryptFloat	Extern/Tool/Utils/ValueCrypt.cpp	/^float ValueCrypt::decryptFloat( float v, int key1, int key2 )$/;"	f	class:ValueCrypt
decryptInt	Extern/Tool/Utils/ValueCrypt.cpp	/^int ValueCrypt::decryptInt( int v, int key1, int key2 )$/;"	f	class:ValueCrypt
decryptLong	Extern/Tool/Utils/ValueCrypt.cpp	/^long long ValueCrypt::decryptLong(long long v, int key1, int key2)$/;"	f	class:ValueCrypt
default_data	Extern/Tool/LocalDefault/LocalDefault.cpp	/^std::string default_data = "<?xml version=\\"1.0\\" encoding=\\"utf-8\\" ?> <LocalDefault> <Data  \/> <\/LocalDefault>";$/;"	v
delPollType	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    inline void delPollType(int type)$/;"	f	class:IKxComm
delRead	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        void delRead() {$/;"	f	class:RedisQtAdapter
delRead	Extern/Tool/DBDriver/hiredis/async.h	/^        void (*delRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon6
delWrite	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        void delWrite() {$/;"	f	class:RedisQtAdapter
delWrite	Extern/Tool/DBDriver/hiredis/async.h	/^        void (*delWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon6
deleteBufferData	Extern/ServerFrame/helper/BufferTool.h	/^inline int deleteBufferData(BufferData* buffer)$/;"	f
destory	Extern/ServerFrame/server/KxBaseServer.h	/^    static void destory()$/;"	f	class:KxBaseServer
destroy	Client/Client/GameNetworkNode.cpp	/^void CGameNetworkNode::destroy()$/;"	f	class:CGameNetworkNode
destroy	Client/Client/TestClient.cpp	/^void TestClient::destroy()$/;"	f	class:TestClient
destroy	Extern/ServerFrame/core/KxMemPool.cpp	/^void KxMemManager::destroy()$/;"	f	class:KxMemManager
destroy	Extern/ServerFrame/data/GameUserManager.cpp	/^void CGameUserManager::destroy()$/;"	f	class:CGameUserManager
destroy	Extern/ServerFrame/log/LogManager.cpp	/^void LogManager::destroy()$/;"	f	class:LogManager
destroy	Extern/Tool/DBDriver/DBManager.cpp	/^void DBManager::destroy()$/;"	f	class:DBManager
destroy	LoginServer/LoginServer/GateManager.cpp	/^void GateManager::destroy()$/;"	f	class:GateManager
destroy	LoginServer/LoginServer/LoginServer.cpp	/^void LoginServer::destroy()$/;"	f	class:LoginServer
destroy	SessionServer/SessionServer/NetworkManager.cpp	/^void NetWorkManager::destroy()$/;"	f	class:NetWorkManager
destroy	SessionServer/SessionServer/SessionServer.cpp	/^void SessionServer::destroy()$/;"	f	class:SessionServer
destroyInstance	Extern/Tool/DataManager/DataManager.cpp	/^void DataManager::destroyInstance()$/;"	f	class:DataManager
destroyInstance	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::destroyInstance()$/;"	f	class:LocalDefault
direction	Extern/Tool/StringFormat/StringFormat.h	/^inline float direction(float x0, float y0, float x1, float y1, float x2, float y2)$/;"	f
donotDeleteUser	Extern/ServerFrame/data/GameUserManager.cpp	/^void CGameUserManager::donotDeleteUser(int uid)$/;"	f	class:CGameUserManager
doubleVal	Extern/Tool/Common/Value_.h	/^        double doubleVal;$/;"	m	union:Value_::__anon1
echoSockError	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::echoSockError(const char* msg)$/;"	f	class:KxSock
element	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    struct redisReply **element; \/* elements vector for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:struct:redisReply::redisReply
elements	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    size_t elements; \/* number of elements, for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply
elements	Extern/Tool/DBDriver/hiredis/read.h	/^    int elements; \/* number of elements in multibulk container *\/$/;"	m	struct:redisReadTask
encrypt	Extern/Tool/Tea/TEACrypt.cpp	/^ void TEACrypt::encrypt(char src[])$/;"	f	class:TEACrypt
encrypt	Extern/Tool/Tea/TEACrypt.cpp	/^void TEACrypt::encrypt(UnInt32_t v[], UnInt32_t k[])$/;"	f	class:TEACrypt
encrypt	Extern/Tool/Tea/TEACrypt.cpp	/^void TEACrypt::encrypt(const char* src, size_t size)$/;"	f	class:TEACrypt
encryptDouble	Extern/Tool/Utils/ValueCrypt.cpp	/^double ValueCrypt::encryptDouble( double v, int key1, int key2 )$/;"	f	class:ValueCrypt
encryptFloat	Extern/Tool/Utils/ValueCrypt.cpp	/^float ValueCrypt::encryptFloat( float v, int key1, int key2 )$/;"	f	class:ValueCrypt
encryptInt	Extern/Tool/Utils/ValueCrypt.cpp	/^int ValueCrypt::encryptInt( int v, int key1, int key2 )$/;"	f	class:ValueCrypt
encryptLong	Extern/Tool/Utils/ValueCrypt.cpp	/^long long ValueCrypt::encryptLong(long long v, int key1, int key2)$/;"	f	class:ValueCrypt
equals	Extern/Tool/Observer/Observer.cpp	/^bool Observable::equals(const Observable& obser)$/;"	f	class:Observable
eraseObjectInList	Extern/Tool/StringFormat/StringFormat.h	/^inline bool eraseObjectInList(std::list<T>& l, T obj)$/;"	f
eraseObjectInVec	Extern/Tool/StringFormat/StringFormat.h	/^inline bool eraseObjectInVec(std::vector<T>& l, T obj)$/;"	f
err	Extern/Tool/DBDriver/hiredis/async.h	/^    int err;$/;"	m	struct:redisAsyncContext
err	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisContext
err	Extern/Tool/DBDriver/hiredis/read.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisReader
errstr	Extern/Tool/DBDriver/hiredis/async.h	/^    char *errstr;$/;"	m	struct:redisAsyncContext
errstr	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisContext
errstr	Extern/Tool/DBDriver/hiredis/read.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisReader
ev	Extern/Tool/DBDriver/hiredis/async.h	/^    } ev;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon6
events	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^  int                events;$/;"	m	struct:redisLibuvEvents
fastInvSqrt	Extern/Tool/StringFormat/StringFormat.h	/^inline float fastInvSqrt(float x)$/;"	f
fastSet	Extern/Tool/Common/Data_.cpp	/^void Data_::fastSet(unsigned char* bytes, const size_t size)$/;"	f	class:Data_
fastSqrt	Extern/Tool/StringFormat/StringFormat.h	/^inline float fastSqrt(float x)$/;"	f
fd	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^    int fd;$/;"	m	struct:redisAeEvents
fd	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^    struct iv_fd fd;$/;"	m	struct:redisIvykisEvents	typeref:struct:redisIvykisEvents::iv_fd
fd	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    int fd;$/;"	m	struct:redisContext
flags	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    int flags;$/;"	m	struct:redisContext
flags	Extern/Tool/DBDriver/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr16
flags	Extern/Tool/DBDriver/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr32
flags	Extern/Tool/DBDriver/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr64
flags	Extern/Tool/DBDriver/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr8
flags	Extern/Tool/DBDriver/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:sdshdr5
floatVal	Extern/Tool/Common/Value_.h	/^        float floatVal;$/;"	m	union:Value_::__anon1
flush	Extern/ServerFrame/log/LogFileHandler.cpp	/^void LogFileHandler::flush()$/;"	f	class:LogFileHandler
fn	Extern/Tool/DBDriver/hiredis/async.h	/^    redisCallbackFn *fn;$/;"	m	struct:redisCallback
fn	Extern/Tool/DBDriver/hiredis/read.h	/^    redisReplyObjectFunctions *fn;$/;"	m	struct:redisReader
freeObject	Extern/Tool/DBDriver/hiredis/read.h	/^    void (*freeObject)(void*);$/;"	m	struct:redisReplyObjectFunctions
freeRedisRunLoop	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^static int freeRedisRunLoop(RedisRunLoop* redisRunLoop) {$/;"	f
genGuestId	SessionServer/SessionServer/NetworkManager.cpp	/^unsigned int NetWorkManager::genGuestId()$/;"	f	class:NetWorkManager
getAccountId	Extern/ServerFrame/data/GameUser.h	/^	int	getAccountId() { return m_nAccountId; }$/;"	f	class:GameUser
getAllServer	SessionServer/SessionServer/NetworkManager.h	/^	std::map<int, IKxComm*>& getAllServer() { return m_ServerList; }$/;"	f	class:NetWorkManager
getArrayLen	Extern/Tool/DataManager/DataManager.cpp	/^unsigned int getArrayLen(T& array)$/;"	f
getBakGroupServer	SessionServer/SessionServer/NetworkManager.cpp	/^std::vector<IKxComm*>* NetWorkManager::getBakGroupServer(int nGroupID)$/;"	f	class:NetWorkManager
getBoolForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^bool LocalDefault::getBoolForKeyValue(const std::string nKey)$/;"	f	class:LocalDefault
getBuffer	Extern/ServerFrame/helper/BufferData.h	/^	char *getBuffer(){ return m_Buffer; };$/;"	f	class:BufferData
getBuffer	Extern/Tool/Tea/TEACrypt.cpp	/^char* TEACrypt::getBuffer()$/;"	f	class:TEACrypt
getBufferSize	Extern/ServerFrame/helper/BufferData.h	/^    inline unsigned int getBufferSize() { return m_BufferSize; }$/;"	f	class:BufferData
getBufferSize	Extern/Tool/Tea/TEACrypt.cpp	/^size_t TEACrypt::getBufferSize()$/;"	f	class:TEACrypt
getBytes	Extern/Tool/Common/Data_.cpp	/^unsigned char* Data_::getBytes() const$/;"	f	class:Data_
getChangeFlag	SessionServer/SessionServer/NetworkManager.h	/^	bool getChangeFlag() { return m_bChanging; }$/;"	f	class:NetWorkManager
getClientModule	Extern/ServerFrame/commnication/KxTCPListener.h	/^    inline IKxModule* getClientModule()	{ return m_ClientModule; }$/;"	f	class:KxTCPListener
getClosingFlag	LoginServer/LoginServer/LoginServer.h	/^	bool getClosingFlag(){ return m_IsClosing; }$/;"	f	class:LoginServer
getClosingFlag	SessionServer/SessionServer/SessionServer.h	/^	bool getClosingFlag(){ return m_IsClosing; }			$/;"	f	class:SessionServer
getComm	Extern/ServerFrame/commnication/KxEpoller.cpp	/^	IKxComm* KxEpoller::getComm(KXCOMMID cid)$/;"	f	class:KxEpoller
getComm	Extern/ServerFrame/commnication/KxSelectPoller.cpp	/^IKxComm* KxSelectPoller::getComm(KXCOMMID cid)$/;"	f	class:KxSelectPoller
getCommId	Extern/ServerFrame/commnication/KxTCPListener.h	/^    virtual KXCOMMID getCommId() { return m_Socket->getSockFd(); }$/;"	f	class:KxTCPListener
getCommId	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    virtual KXCOMMID getCommId() { return m_Socket->getSockFd(); }$/;"	f	class:KxTCPUnit
getCommId	Extern/ServerFrame/commnication/KxUDPUnit.h	/^    virtual KXCOMMID getCommId() { return m_Socket->getSockFd(); }$/;"	f	class:KxUDPUnit
getConnector	Client/Client/GameNetworkNode.cpp	/^KxTCPConnector *CGameNetworkNode::getConnector(EServerConnType connType \/*= SERVER_CONN_SESSION*\/)$/;"	f	class:CGameNetworkNode
getCurClientNum	SessionServer/SessionServer/NetworkManager.cpp	/^unsigned int NetWorkManager::getCurClientNum()$/;"	f	class:NetWorkManager
getCurrentPollObject	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    IKxComm* getCurrentPollObject() { return m_CurrentPollObject; }$/;"	f	class:IKxCommPoller
getDataForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^Data_ LocalDefault::getDataForKeyValue(const char* nKey)$/;"	f	class:LocalDefault
getDataForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^cocos2d::Data LocalDefault::getDataForKeyValue(const char* nKey)$/;"	f	class:LocalDefault
getDataLength	Extern/ServerFrame/helper/BufferData.h	/^    inline unsigned int getDataLength() { return m_DataLength; }$/;"	f	class:BufferData
getDelay	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline const kxTimeVal& getDelay()$/;"	f	class:KxTimerObject
getDescription	Extern/Tool/Common/Value_.cpp	/^std::string Value_::getDescription() const$/;"	f	class:Value_
getDoubleForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^double LocalDefault::getDoubleForKeyValue(const std::string nKey)$/;"	f	class:LocalDefault
getEncryption	Extern/Tool/LocalDefault/LocalDefault.h	/^	virtual ENCRYPT_TYPE getEncryption(void) const { return _mIsEn; }$/;"	f	class:LocalDefault
getFieldIndex	Extern/Tool/DataManager/DataTable.cpp	/^int DataTable::getFieldIndex(std::string field)$/;"	f	class:DataTable
getFileName	Extern/ServerFrame/log/ILogHandler.h	/^	virtual std::string getFileName()$/;"	f	class:ILogHandler
getFloatData	Extern/Tool/DataManager/DataTable.cpp	/^float RowData::getFloatData(std::string field)$/;"	f	class:RowData
getFloatForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^float LocalDefault::getFloatForKeyValue(const std::string nKey)$/;"	f	class:LocalDefault
getGameEvent	SessionServer/SessionServer/SessionServer.h	/^	IGameEvent*	getGameEvent(){ return m_GameEvent; }$/;"	f	class:SessionServer
getGameUser	Extern/ServerFrame/data/GameUserManager.cpp	/^GameUser* CGameUserManager::getGameUser(int uid, bool noNull)$/;"	f	class:CGameUserManager
getGameUsers	Extern/ServerFrame/data/GameUserManager.h	/^	const std::map<int, GameUser *>& getGameUsers() { return m_GameUsers; }$/;"	f	class:CGameUserManager
getGroupServer	SessionServer/SessionServer/NetworkManager.cpp	/^std::vector<IKxComm*>* NetWorkManager::getGroupServer(int nGroupID)$/;"	f	class:NetWorkManager
getGuest	SessionServer/SessionServer/NetworkManager.cpp	/^IKxComm* NetWorkManager::getGuest(unsigned int guestId)$/;"	f	class:NetWorkManager
getGuestId	SessionServer/SessionServer/SessionClient.h	/^    inline unsigned int getGuestId() { return m_GuestId; }$/;"	f	class:SessionClient
getHandleId	Extern/ServerFrame/log/ILogHandler.h	/^	inline int getHandleId()$/;"	f	class:ILogHandler
getHandler	Extern/ServerFrame/log/LogManager.cpp	/^ILogHandler* LogManager::getHandler(int id)$/;"	f	class:LogManager
getInstance	Client/Client/GameNetworkNode.cpp	/^CGameNetworkNode *CGameNetworkNode::getInstance()$/;"	f	class:CGameNetworkNode
getInstance	Client/Client/TestClient.cpp	/^TestClient* TestClient::getInstance()$/;"	f	class:TestClient
getInstance	Extern/ServerFrame/core/KxMemPool.cpp	/^KxMemManager* KxMemManager::getInstance()$/;"	f	class:KxMemManager
getInstance	Extern/ServerFrame/data/GameUserManager.cpp	/^CGameUserManager *CGameUserManager::getInstance()$/;"	f	class:CGameUserManager
getInstance	Extern/ServerFrame/log/LogManager.cpp	/^LogManager* LogManager::getInstance()$/;"	f	class:LogManager
getInstance	Extern/ServerFrame/server/KxBaseServer.h	/^    static KxBaseServer* getInstance() $/;"	f	class:KxBaseServer
getInstance	Extern/Tool/DBDriver/DBManager.cpp	/^DBManager * DBManager::getInstance()$/;"	f	class:DBManager
getInstance	Extern/Tool/DataManager/DataManager.cpp	/^DataManager* DataManager::getInstance()$/;"	f	class:DataManager
getInstance	Extern/Tool/LocalDefault/LocalDefault.cpp	/^LocalDefault* LocalDefault::getInstance()$/;"	f	class:LocalDefault
getInstance	LoginServer/LoginServer/GateManager.cpp	/^GateManager* GateManager::getInstance()$/;"	f	class:GateManager
getInstance	LoginServer/LoginServer/LoginServer.cpp	/^LoginServer* LoginServer::getInstance()$/;"	f	class:LoginServer
getInstance	SessionServer/SessionServer/NetworkManager.cpp	/^NetWorkManager* NetWorkManager::getInstance()$/;"	f	class:NetWorkManager
getInstance	SessionServer/SessionServer/SessionServer.cpp	/^SessionServer* SessionServer::getInstance()$/;"	f	class:SessionServer
getIntData	Extern/Tool/DataManager/DataTable.cpp	/^int RowData::getIntData(std::string field)$/;"	f	class:RowData
getIntegerForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^int LocalDefault::getIntegerForKeyValue(const std::string nKey)$/;"	f	class:LocalDefault
getLogLevel	Extern/ServerFrame/log/LogManager.h	/^    inline int getLogLevel() { return m_LogLevel; }$/;"	f	class:LogManager
getLongData	Extern/Tool/DataManager/DataTable.cpp	/^long long RowData::getLongData(std::string field)$/;"	f	class:RowData
getMainPoller	Extern/ServerFrame/server/KxBaseServer.h	/^    IKxCommPoller* getMainPoller()$/;"	f	class:KxBaseServer
getModel	Extern/ServerFrame/data/GameUser.cpp	/^IDBModel* GameUser::getModel(int modelType)$/;"	f	class:GameUser
getModelType	Extern/ServerFrame/data/GameUserManager.h	/^	std::vector<ModelType>& getModelType() { return m_VectServerModel; }$/;"	f	class:CGameUserManager
getModule	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    virtual IKxModule* getModule()$/;"	f	class:IKxComm
getNow	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline const kxTimeVal& getNow()$/;"	f	class:KxTimerManager
getOffset	Extern/ServerFrame/helper/BufferData.h	/^    inline unsigned int getOffset() { return m_Offset; }$/;"	f	class:BufferData
getPermission	SessionServer/SessionServer/SessionClient.h	/^	inline unsigned int getPermission() { return m_Permission; }$/;"	f	class:SessionClient
getPollType	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    inline int getPollType()$/;"	f	class:IKxComm
getPoller	Client/Client/GameNetworkNode.h	/^	IKxCommPoller* getPoller()$/;"	f	class:CGameNetworkNode
getPoller	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    virtual IKxCommPoller* getPoller()$/;"	f	class:IKxComm
getReferenceCount	Extern/ServerFrame/core/KxObject.cpp	/^unsigned int KxObject::getReferenceCount() const$/;"	f	class:KxObject
getRepeat	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline int getRepeat()$/;"	f	class:KxTimerObject
getRouteValue	SessionServer/SessionServer/SessionClient.cpp	/^int SessionClient::getRouteValue(int nKey)$/;"	f	class:SessionClient
getServer	SessionServer/SessionServer/NetworkManager.cpp	/^IKxComm* NetWorkManager::getServer(int serverId, int nValue)$/;"	f	class:NetWorkManager
getServerCoinfig	SessionServer/SessionServer/SessionServer.h	/^	ServerConfig * getServerCoinfig() { return &m_ServerConfig; }$/;"	f	class:SessionServer
getServerConn	Client/Client/GameNetworkNode.cpp	/^ServerConn* CGameNetworkNode::getServerConn(EServerConnType connType \/*= SERVER_CONN_SESSION*\/)$/;"	f	class:CGameNetworkNode
getServerData	Extern/ServerFrame/server/ServerConfig.h	/^	std::map<int, ServerData>& getServerData()$/;"	f	class:ServerConfig
getServerDataById	Extern/ServerFrame/server/ServerConfig.h	/^	ServerData getServerDataById(int id)$/;"	f	class:ServerConfig
getServerDataByName	Extern/ServerFrame/server/ServerConfig.h	/^	ServerData getServerDataByName(std::string name)$/;"	f	class:ServerConfig
getServerId	SessionServer/SessionServer/SessionConnect.h	/^	int getServerId() { return m_ServerId; }$/;"	f	class:SessionConnector
getServerName	Extern/ServerFrame/server/KxBaseServer.h	/^	std::string getServerName() const$/;"	f	class:KxBaseServer
getSize	Extern/Tool/Common/Data_.cpp	/^size_t Data_::getSize() const$/;"	f	class:Data_
getSock	Extern/ServerFrame/commnication/KxTCPListener.h	/^    inline KxSock* getSock() { return m_Socket; }$/;"	f	class:KxTCPListener
getSock	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    inline KxSock* getSock() { return m_Socket; }$/;"	f	class:KxTCPUnit
getSockAddr	Extern/ServerFrame/commnication/KxSock.h	/^    inline const kxSocketAddr& getSockAddr() { return m_SockAddr; }$/;"	f	class:KxSock
getSockError	Extern/ServerFrame/commnication/KxSock.cpp	/^int KxSock::getSockError()$/;"	f	class:KxSock
getSockFd	Extern/ServerFrame/commnication/KxSock.h	/^    inline KXCOMMID getSockFd()$/;"	f	class:KxSock
getStringData	Extern/Tool/DataManager/DataTable.cpp	/^std::string RowData::getStringData(std::string field)$/;"	f	class:RowData
getStringForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^std::string LocalDefault::getStringForKeyValue(const std::string nKey)$/;"	f	class:LocalDefault
getStringFromFile	Extern/ServerFrame/helper/CsvLoader.cpp	/^std::string CsvLoader::getStringFromFile(const std::string &path)$/;"	f	class:CsvLoader
getStringFromFile	Extern/Tool/DataManager/DataTable.cpp	/^Data_ DataTable::getStringFromFile(const std::string &path)$/;"	f	class:DataTable
getStringFromFile	Extern/Tool/XML/XML.cpp	/^std::string getStringFromFile(const std::string &path)$/;"	f
getTableByName	Extern/Tool/DataManager/DataManager.h	/^	DataTable* getTableByName(std::string name)$/;"	f	class:DataManager
getTableData	Extern/Tool/DataManager/DataTable.cpp	/^std::multimap<int, RowData>& DataTable::getTableData()$/;"	f	class:DataTable
getTabs	Extern/Tool/Common/Value_.cpp	/^static std::string getTabs(int depth)$/;"	f	file:
getTag	Extern/ServerFrame/log/ILogHandler.h	/^	int getTag()$/;"	f	class:ILogHandler
getTimeVal	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline const  kxTimeVal& getTimeVal()$/;"	f	class:KxTimerObject
getTimerManager	Extern/ServerFrame/server/KxBaseServer.h	/^    KxTimerManager* getTimerManager()$/;"	f	class:KxBaseServer
getTimestamp	Extern/ServerFrame/helper/KxTimerManager.h	/^    long getTimestamp()$/;"	f	class:KxTimerManager
getType	Extern/Tool/Common/Value_.h	/^    inline Type getType() const { return _type; }$/;"	f	class:Value_
getUid	Extern/ServerFrame/data/GameUser.h	/^	int	getUid() { return m_nUid; }$/;"	f	class:GameUser
getUser	SessionServer/SessionServer/NetworkManager.cpp	/^IKxComm* NetWorkManager::getUser(unsigned int userId)$/;"	f	class:NetWorkManager
getUserId	SessionServer/SessionServer/SessionClient.h	/^    inline unsigned int getUserId() { return m_UserId; }$/;"	f	class:SessionClient
getUserName	Extern/ServerFrame/data/GameUser.h	/^	std::string	getUserName() { return m_sUserName; }$/;"	f	class:GameUser
getValueForKey	Extern/Tool/LocalDefault/LocalDefault.cpp	/^std::string LocalDefault::getValueForKey(const char* pKey)$/;"	f	class:LocalDefault
getXMLFilePath	Extern/Tool/LocalDefault/LocalDefault.cpp	/^const std::string& LocalDefault::getXMLFilePath()$/;"	f	class:LocalDefault
getXXTable	Extern/Tool/DataManager/DataManager.h	/^	DataTable* getXXTable()$/;"	f	class:DataManager
getfloat	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline float getfloat() const$/;"	f	class:kxTimeVal
groupId	Extern/ServerFrame/server/ServerConfig.h	/^	int groupId;$/;"	m	struct:ServerData
handle	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^  uv_poll_t          handle;$/;"	m	struct:redisLibuvEvents
head	Extern/ServerFrame/commnication/KxBufferList.h	/^    inline kxBufferNode* head()$/;"	f	class:KxBufferList
head	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline KxTimerObject* head()$/;"	f	class:KxTimerList
head	Extern/Tool/DBDriver/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
heartbeatScheduler	Client/Client/GameNetworkNode.cpp	/^void CGameNetworkNode::heartbeatScheduler(float dt)$/;"	f	class:CGameNetworkNode
hex2dec	Extern/Tool/StringFormat/StringFormat.cpp	/^int StringFormat::hex2dec(const char *hex)$/;"	f	class:StringFormat
host	Client/Client/TestClient.h	/^	std::string host;$/;"	m	struct:ConnectServerConf
host	Extern/Tool/DBDriver/hiredis/hiredis.h	/^        char *host;$/;"	m	struct:redisContext::__anon2
iElemChild	Extern/Tool/XML/XML.h	/^        int iElemChild;$/;"	m	struct:XML::ElemPos
iElemNext	Extern/Tool/XML/XML.h	/^        int iElemNext;$/;"	m	struct:XML::ElemPos
iElemParent	Extern/Tool/XML/XML.h	/^        int iElemParent;$/;"	m	struct:XML::ElemPos
iPos	Extern/Tool/XML/XML.h	/^        int iPos;$/;"	m	struct:XML::SavedPos
iPosChild	Extern/Tool/XML/XML.h	/^        int iPosChild;$/;"	m	struct:XML::SavedPos
iPosParent	Extern/Tool/XML/XML.h	/^        int iPosParent;$/;"	m	struct:XML::SavedPos
id	Extern/Tool/DBDriver/RedisStorer.h	/^    int id;$/;"	m	struct:RankData
id	Extern/Tool/Observer/Observer.h	/^	int id;$/;"	m	struct:ObserverParam
idx	Extern/Tool/DBDriver/hiredis/read.h	/^    int idx; \/* index in parent (array) object *\/$/;"	m	struct:redisReadTask
init	Client/Client/GameNetworkNode.cpp	/^bool CGameNetworkNode::init()$/;"	f	class:CGameNetworkNode
init	Extern/ServerFrame/commnication/KxSock.cpp	/^bool KxSock::init(KXCOMMID fd)$/;"	f	class:KxSock
init	Extern/ServerFrame/commnication/KxSock.cpp	/^bool KxSock::init(KXSOCK_TYPE type, KXSOCK_VERSION sv)$/;"	f	class:KxSock
init	Extern/ServerFrame/commnication/KxTCPClienter.cpp	/^bool KxTCPClienter::init(KXCOMMID fd)$/;"	f	class:KxTCPClienter
init	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^bool KxTCPListener::init()$/;"	f	class:KxTCPListener
init	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^bool KxTCPUnit::init()$/;"	f	class:KxTCPUnit
init	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^bool KxTCPUnit::init(KXSOCK_VERSION ipv)$/;"	f	class:KxTCPUnit
init	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^bool KxUDPUnit::init()$/;"	f	class:KxUDPUnit
init	Extern/ServerFrame/data/DataModel/UserModel.cpp	/^bool UserModel::init(int uid)$/;"	f	class:UserModel
init	Extern/ServerFrame/data/GameUserManager.cpp	/^bool CGameUserManager::init(KxTimerManager *pTimerManager)$/;"	f	class:CGameUserManager
init	Extern/ServerFrame/helper/BufferData.cpp	/^bool BufferData::init(BufferData* pBuffData)$/;"	f	class:BufferData
init	Extern/ServerFrame/helper/BufferData.cpp	/^bool BufferData::init(char* buffer, unsigned int dataLength)$/;"	f	class:BufferData
init	Extern/ServerFrame/helper/BufferData.cpp	/^bool BufferData::init(int bufferSize)$/;"	f	class:BufferData
init	Extern/ServerFrame/helper/IDBModel.h	/^	virtual bool init(int uid) { return true; }$/;"	f	class:IDBModel
init	Extern/ServerFrame/helper/KxTimerCallback.h	/^    void init(float delay, int repeat = 0)$/;"	f	class:KxTimerCallback
init	Extern/Tool/DataManager/DataTable.cpp	/^void DataTable::init(const char* tableName, TEACrypt* tea)$/;"	f	class:DataTable
init	Extern/Tool/LocalDefault/LocalDefault.cpp	/^bool LocalDefault::init()$/;"	f	class:LocalDefault
init	SessionServer/SessionServer/ConnectModule.cpp	/^bool ConnectModule::init(IGameEvent *pSink)$/;"	f	class:ConnectModule
initData	Extern/Tool/DataManager/DataManager.cpp	/^void DataManager::initData()$/;"	f	class:DataManager
initGameUser	Extern/ServerFrame/data/GameUserManager.cpp	/^GameUser* CGameUserManager::initGameUser(int uid)$/;"	f	class:CGameUserManager
initModels	Extern/ServerFrame/data/GameUser.cpp	/^bool GameUser::initModels(int userId)$/;"	f	class:GameUser
initServerInfo	LoginServer/LoginServer/LoginServer.cpp	/^bool LoginServer::initServerInfo()$/;"	f	class:LoginServer
initServerInfo	SessionServer/SessionServer/SessionServer.cpp	/^bool SessionServer::initServerInfo()$/;"	f	class:SessionServer
initSock	Extern/ServerFrame/commnication/KxSock.cpp	/^bool KxSock::initSock()$/;"	f	class:KxSock
initUserData	Extern/ServerFrame/data/GameUserManager.cpp	/^bool CGameUserManager::initUserData(GameUser* gameUsr)$/;"	f	class:CGameUserManager
initXMLFilePath	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::initXMLFilePath()$/;"	f	class:LocalDefault
insert	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerList::insert(KxTimerObject* obj)$/;"	f	class:KxTimerList
intKeyMapVal	Extern/Tool/Common/Value_.h	/^        ValueMapIntKey* intKeyMapVal;$/;"	m	union:Value_::__anon1
intVal	Extern/Tool/Common/Value_.h	/^        int intVal;$/;"	m	union:Value_::__anon1
integer	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    long long integer; \/* The integer when type is REDIS_REPLY_INTEGER *\/$/;"	m	struct:redisReply
invalid	Extern/Tool/DBDriver/hiredis/async.h	/^        redisCallbackList invalid;$/;"	m	struct:redisAsyncContext::__anon7
ip	Extern/ServerFrame/server/ServerConfig.h	/^	std::string ip;$/;"	m	struct:ServerData
ip	Extern/Tool/DBDriver/IStorer.h	/^	std::string ip;$/;"	m	struct:DBRule
isConnecting	Extern/ServerFrame/commnication/KxTCPConnector.h	/^	bool isConnecting() { return m_IsConnecting; }$/;"	f	class:KxTCPConnector
isCurrentLineNull	Extern/ServerFrame/helper/CsvLoader.cpp	/^bool CsvLoader::isCurrentLineNull()$/;"	f	class:CsvLoader
isEmpty	Extern/ServerFrame/commnication/KxBufferList.h	/^    inline bool isEmpty() { return NULL == m_Head; }$/;"	f	class:KxBufferList
isNull	Extern/Tool/Common/Data_.cpp	/^bool Data_::isNull() const$/;"	f	class:Data_
isNull	Extern/Tool/Common/Value_.h	/^    inline bool isNull() const { return _type == Type::NONE; }$/;"	f	class:Value_
isObserverExist	Extern/Tool/Observer/Observer.cpp	/^bool Observable::isObserverExist(Observer* target)$/;"	f	class:Observable
isShowDate	Extern/ServerFrame/log/LogManager.h	/^    inline bool isShowDate() { return m_DateOption; }$/;"	f	class:LogManager
isShowFile	Extern/ServerFrame/log/LogManager.h	/^    inline bool isShowFile() { return m_FileOption; }$/;"	f	class:LogManager
isShowFunc	Extern/ServerFrame/log/LogManager.h	/^    inline bool isShowFunc() { return m_FuncOption; }$/;"	f	class:LogManager
isShowLevel	Extern/ServerFrame/log/LogManager.h	/^    inline bool isShowLevel() { return m_LevelOption; }$/;"	f	class:LogManager
isShowLine	Extern/ServerFrame/log/LogManager.h	/^    inline bool isShowLine() { return m_LineOption; }$/;"	f	class:LogManager
isShowTime	Extern/ServerFrame/log/LogManager.h	/^    inline bool isShowTime()$/;"	f	class:LogManager
isSockBlockError	Extern/ServerFrame/commnication/KxSock.cpp	/^bool KxSock::isSockBlockError()$/;"	f	class:KxSock
isUserClose	Client/Client/GameNetworkNode.h	/^    bool isUserClose(){ return m_bUserClose; }$/;"	f	class:CGameNetworkNode
isXMLFileExist	Extern/Tool/LocalDefault/LocalDefault.cpp	/^bool LocalDefault::isXMLFileExist()$/;"	f	class:LocalDefault
kxBufferNode	Extern/ServerFrame/commnication/KxBufferList.h	/^	kxBufferNode()$/;"	f	struct:kxBufferNode
kxBufferNode	Extern/ServerFrame/commnication/KxBufferList.h	/^	kxBufferNode(char* buf, unsigned int l)$/;"	f	struct:kxBufferNode
kxBufferNode	Extern/ServerFrame/commnication/KxBufferList.h	/^struct kxBufferNode$/;"	s
kxMemMgrAlocate	Extern/ServerFrame/core/KxMemPool.h	/^inline void* kxMemMgrAlocate(unsigned int size)$/;"	f
kxMemMgrAlocate	Extern/ServerFrame/core/KxMemPool.h	/^inline void* kxMemMgrAlocate(unsigned int size, unsigned int& outSize)$/;"	f
kxMemMgrRecycle	Extern/ServerFrame/core/KxMemPool.h	/^inline int kxMemMgrRecycle(void* mem, unsigned int size)$/;"	f
kxSockLen	Extern/ServerFrame/core/KxCore.h	/^typedef int kxSockLen;$/;"	t
kxSockLen	Extern/ServerFrame/core/KxCore.h	/^typedef socklen_t kxSockLen;$/;"	t
kxSocketAddr	Extern/ServerFrame/commnication/KxSock.h	/^typedef sockaddr_in kxSocketAddr;$/;"	t
kxTimeVal	Extern/ServerFrame/helper/KxTimeVal.h	/^    kxTimeVal()$/;"	f	class:kxTimeVal
kxTimeVal	Extern/ServerFrame/helper/KxTimeVal.h	/^    kxTimeVal(float t)$/;"	f	class:kxTimeVal
kxTimeVal	Extern/ServerFrame/helper/KxTimeVal.h	/^    kxTimeVal(long sec, long usec)$/;"	f	class:kxTimeVal
kxTimeVal	Extern/ServerFrame/helper/KxTimeVal.h	/^class kxTimeVal$/;"	c
len	Extern/ServerFrame/commnication/KxBufferList.h	/^	unsigned int len;$/;"	m	struct:kxBufferNode
len	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    size_t len; \/* Length of string *\/$/;"	m	struct:redisReply
len	Extern/Tool/DBDriver/hiredis/read.h	/^    size_t len; \/* Buffer length *\/$/;"	m	struct:redisReader
len	Extern/Tool/DBDriver/hiredis/sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:sdshdr16
len	Extern/Tool/DBDriver/hiredis/sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:sdshdr32
len	Extern/Tool/DBDriver/hiredis/sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:sdshdr64
len	Extern/Tool/DBDriver/hiredis/sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:sdshdr8
length	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline unsigned int length()$/;"	f	class:KxTimerList
length	Extern/ServerFrame/server/Head.h	/^    int length;$/;"	m	struct:Head
length	Extern/Tool/DBDriver/RedisStorer.h	/^    unsigned int length;$/;"	m	struct:RedisBinaryData
limitValue	Extern/Tool/StringFormat/StringFormat.h	/^void limitValue(T& v, const T& min, const T& max)$/;"	f
lineIntersect	Extern/Tool/StringFormat/StringFormat.h	/^inline bool lineIntersect(float x0, float y0, float x1, float y1,$/;"	f
listen	Extern/ServerFrame/commnication/KxSock.cpp	/^int KxSock::listen(int maxListenQueue)$/;"	f	class:KxSock
listen	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^bool KxTCPListener::listen(int port, char* addr, bool nonblock, int listenQ)$/;"	f	class:KxTCPListener
loadFile	Extern/Tool/DataManager/DataTable.cpp	/^void DataTable::loadFile()$/;"	f	class:DataTable
loadServerData	Extern/ServerFrame/server/ServerConfig.cpp	/^bool ServerConfig::loadServerData()$/;"	f	class:ServerConfig
login	Client/Client/TestClient.cpp	/^bool TestClient::login()$/;"	f	class:TestClient
loop	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents
loop	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^    struct ev_loop *loop;$/;"	m	struct:redisLibevEvents	typeref:struct:redisLibevEvents::ev_loop
mData	Extern/Tool/DataManager/DataTable.h	/^	std::vector<std::string> mData;$/;"	m	class:RowData
mDataTable	Extern/Tool/DataManager/DataTable.h	/^	DataTable* mDataTable;$/;"	m	class:RowData
mInstance	Extern/Tool/DataManager/DataManager.cpp	/^DataManager* DataManager::mInstance = nullptr;$/;"	m	class:DataManager	file:
mInstance	Extern/Tool/DataManager/DataManager.h	/^	static DataManager* mInstance;$/;"	m	class:DataManager
mIsLoaded	Extern/Tool/DataManager/DataTable.h	/^	bool mIsLoaded;$/;"	m	class:DataTable
mKey	Extern/Tool/DataManager/DataManager.cpp	/^UnInt32_t DataManager::mKey[] = {0x01, 0x02, 0x03, 0x04};$/;"	m	class:DataManager	file:
mKey	Extern/Tool/DataManager/DataManager.h	/^	static UnInt32_t mKey[];$/;"	m	class:DataManager
mKey	Extern/Tool/Tea/TEACrypt.h	/^	UnInt32_t mKey[4];$/;"	m	class:TEACrypt
mLoop	Extern/Tool/Tea/TEACrypt.h	/^	UnInt32_t mLoop;$/;"	m	class:TEACrypt
mResultBuffer	Extern/Tool/Tea/TEACrypt.h	/^	char* mResultBuffer;$/;"	m	class:TEACrypt
mResultBufferSize	Extern/Tool/Tea/TEACrypt.h	/^	size_t mResultBufferSize;$/;"	m	class:TEACrypt
mTableData	Extern/Tool/DataManager/DataTable.h	/^	std::multimap<int, RowData> mTableData;$/;"	m	class:DataTable
mTableHead	Extern/Tool/DataManager/DataTable.h	/^	std::map<std::string, int> mTableHead;$/;"	m	class:DataTable
mTableName	Extern/Tool/DataManager/DataTable.h	/^	std::string mTableName;$/;"	m	class:DataTable
mTea	Extern/Tool/DataManager/DataManager.h	/^	TEACrypt mTea;$/;"	m	class:DataManager
mTea	Extern/Tool/DataManager/DataTable.h	/^	TEACrypt* mTea;$/;"	m	class:DataTable
mXXTable	Extern/Tool/DataManager/DataManager.h	/^	DataTable mXXTable;$/;"	m	class:DataManager
mXXTableCsv	Extern/Tool/DataManager/DataManager.h	/^	DataTable mXXTableCsv;$/;"	m	class:DataManager
m_AglieTimerList	Extern/ServerFrame/helper/KxTimerManager.h	/^	KxTimerList*         	        m_AglieTimerList;$/;"	m	class:KxTimerManager
m_AlocatedSize	Extern/ServerFrame/core/KxMemPool.h	/^    unsigned int m_AlocatedSize;                            \/\/已分配大小$/;"	m	class:KxMemPool
m_BakServerMapByGroup	SessionServer/SessionServer/NetworkManager.h	/^	std::map<int, std::vector<IKxComm*> >	m_BakServerMapByGroup;	\/\/ 备份连接管理$/;"	m	class:NetWorkManager
m_Buffer	Extern/ServerFrame/helper/BufferData.h	/^    char* m_Buffer;$/;"	m	class:BufferData
m_Buffer	Extern/Tool/DBDriver/RedisStorer.h	/^    char            m_Buffer[2048];$/;"	m	class:RedisStorer
m_BufferList	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    KxBufferList m_BufferList;          \/\/ 待发送的缓冲区列表$/;"	m	class:KxTCPUnit
m_BufferSize	Extern/ServerFrame/helper/BufferData.h	/^    unsigned int m_BufferSize;  \/\/ 缓冲区大小$/;"	m	class:BufferData
m_Callback	Extern/ServerFrame/helper/KxTimerCallback.h	/^    pTimerCallback m_Callback;$/;"	m	class:KxTimerCallback
m_ClientModule	Extern/ServerFrame/commnication/KxTCPListener.h	/^	IKxModule* m_ClientModule;$/;"	m	class:KxTCPListener
m_CurLine	Extern/ServerFrame/helper/CsvLoader.h	/^	std::string m_CurLine;          \/\/当前在解析的列$/;"	m	class:CsvLoader
m_CurrentPollObject	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    IKxComm* m_CurrentPollObject;$/;"	m	class:IKxCommPoller
m_DataLength	Extern/ServerFrame/helper/BufferData.h	/^    unsigned int m_DataLength;  \/\/ 当前实际数据长度$/;"	m	class:BufferData
m_DataTable	Extern/Tool/DataManager/DataManager.h	/^	std::map<std::string, DataTable> m_DataTable;$/;"	m	class:DataManager
m_DateOption	Extern/ServerFrame/log/LogManager.h	/^    bool m_DateOption;$/;"	m	class:LogManager
m_DelUserList	Extern/ServerFrame/data/GameUserManager.h	/^	std::list<SDelayDelData>							m_DelUserList;						\/\/延迟玩家下线列表$/;"	m	class:CGameUserManager
m_Delay	Extern/ServerFrame/helper/KxTimerManager.h	/^    kxTimeVal m_Delay;          \/\/ 执行间隔$/;"	m	class:KxTimerObject
m_Document	Extern/ServerFrame/helper/CsvLoader.h	/^	std::string m_Document;         \/\/CSV文档内容$/;"	m	class:CsvLoader
m_EpollFd	Extern/ServerFrame/commnication/KxEpoller.h	/^	int m_EpollFd;$/;"	m	class:KxEpoller
m_Events	Extern/ServerFrame/commnication/KxEpoller.h	/^	epoll_event m_Events[MAX_EPOLL_EVENTS_PER_RUN];$/;"	m	class:KxEpoller
m_ExceptSet	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    fd_set m_ExceptSet;$/;"	m	class:KxSelectPoller
m_FileOption	Extern/ServerFrame/log/LogManager.h	/^    bool m_FileOption;$/;"	m	class:LogManager
m_FixTimerMap	Extern/ServerFrame/helper/KxTimerManager.h	/^	std::map<long, KxTimerList*>    m_FixTimerMap;	$/;"	m	class:KxTimerManager
m_Free	Extern/ServerFrame/core/KxMemPool.h	/^    MemML m_Free;                                           \/\/空闲内存块$/;"	m	class:KxMemPool
m_FuncOption	Extern/ServerFrame/log/LogManager.h	/^    bool m_FuncOption;$/;"	m	class:LogManager
m_GameEvent	SessionServer/SessionServer/SessionServer.h	/^	IGameEvent*				m_GameEvent;	\/\/SessionServe本地事件处理回调接口$/;"	m	class:SessionServer
m_GameUsers	Extern/ServerFrame/data/GameUserManager.h	/^	std::map<int, GameUser *>							m_GameUsers;$/;"	m	class:CGameUserManager
m_Gate	LoginServer/LoginServer/GateManager.h	/^    IKxComm* m_Gate;$/;"	m	class:GateManager
m_GuestId	SessionServer/SessionServer/NetworkManager.h	/^    unsigned int m_GuestId;													\/\/ 未验证客户端唯一ID$/;"	m	class:NetWorkManager
m_GuestId	SessionServer/SessionServer/SessionClient.h	/^    unsigned int m_GuestId;	                \/\/ 未验证的访客ID$/;"	m	class:SessionClient
m_GuestMap	SessionServer/SessionServer/NetworkManager.h	/^    std::map<unsigned int, IKxComm*> m_GuestMap;		        \/\/ 未验证的客户端连接管理$/;"	m	class:NetWorkManager
m_HandlerId	Extern/ServerFrame/log/ILogHandler.h	/^	int m_HandlerId;$/;"	m	class:ILogHandler
m_Handlers	Extern/ServerFrame/log/LogManager.h	/^    std::map<int, ILogHandler*> m_Handlers;$/;"	m	class:LogManager
m_Head	Extern/ServerFrame/commnication/KxBufferList.h	/^	kxBufferNode* m_Head;$/;"	m	class:KxBufferList
m_Head	Extern/ServerFrame/helper/KxTimerManager.h	/^    KxTimerObject* m_Head;$/;"	m	class:KxTimerList
m_InSet	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    fd_set m_InSet;$/;"	m	class:KxSelectPoller
m_Instance	Client/Client/TestClient.cpp	/^TestClient* TestClient::m_Instance = NULL;$/;"	m	class:TestClient	file:
m_Instance	Client/Client/TestClient.h	/^	static TestClient*	m_Instance;		\/\/单例$/;"	m	class:TestClient
m_Instance	Extern/ServerFrame/core/KxMemPool.cpp	/^KxMemManager* KxMemManager::m_Instance = NULL;$/;"	m	class:KxMemManager	file:
m_Instance	Extern/ServerFrame/core/KxMemPool.h	/^    static KxMemManager* m_Instance;$/;"	m	class:KxMemManager
m_Instance	Extern/ServerFrame/log/LogManager.h	/^    static LogManager* m_Instance;$/;"	m	class:LogManager
m_Instance	LoginServer/LoginServer/GateManager.cpp	/^GateManager* GateManager::m_Instance = NULL;$/;"	m	class:GateManager	file:
m_Instance	LoginServer/LoginServer/GateManager.h	/^    static GateManager* m_Instance;$/;"	m	class:GateManager
m_Instance	LoginServer/LoginServer/LoginServer.h	/^	static LoginServer*		m_Instance;		\/\/单例$/;"	m	class:LoginServer
m_Instance	SessionServer/SessionServer/NetworkManager.cpp	/^NetWorkManager* NetWorkManager::m_Instance = NULL;$/;"	m	class:NetWorkManager	file:
m_Instance	SessionServer/SessionServer/NetworkManager.h	/^    static NetWorkManager* m_Instance;$/;"	m	class:NetWorkManager
m_Instance	SessionServer/SessionServer/SessionServer.h	/^	static SessionServer*	m_Instance;		\/\/单例$/;"	m	class:SessionServer
m_Ip	Extern/Tool/DBDriver/RedisStorer.h	/^    std::string     m_Ip;$/;"	m	class:RedisStorer
m_IsBlock	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    bool m_IsBlock;$/;"	m	class:KxSelectPoller
m_IsClosing	LoginServer/LoginServer/LoginServer.h	/^	bool					m_IsClosing;	\/\/开启平滑关闭时的标志$/;"	m	class:LoginServer
m_IsClosing	SessionServer/SessionServer/SessionServer.h	/^	bool					m_IsClosing;	\/\/开启平滑关闭时的标志$/;"	m	class:SessionServer
m_IsConnecting	Extern/ServerFrame/commnication/KxTCPConnector.h	/^    bool m_IsConnecting;    \/\/ 是否正在连接$/;"	m	class:KxTCPConnector
m_IsInit	Extern/ServerFrame/helper/BufferData.h	/^    bool m_IsInit;              \/\/ 防止重复初始化$/;"	m	class:BufferData
m_IsReadMode	Extern/ServerFrame/helper/BufferData.h	/^    bool m_IsReadMode;          \/\/ 读写模式$/;"	m	class:BufferData
m_IsRunning	Extern/ServerFrame/server/KxBaseServer.h	/^	bool            m_IsRunning;$/;"	m	class:KxBaseServer
m_Length	Extern/ServerFrame/helper/KxTimerManager.h	/^    unsigned int m_Length;$/;"	m	class:KxTimerList
m_LevelOption	Extern/ServerFrame/log/LogManager.h	/^    bool m_LevelOption;$/;"	m	class:LogManager
m_LineOption	Extern/ServerFrame/log/LogManager.h	/^    bool m_LineOption;$/;"	m	class:LogManager
m_LogLevel	Extern/ServerFrame/log/LogManager.h	/^    int m_LogLevel;$/;"	m	class:LogManager
m_MapConKeyValue	SessionServer/SessionServer/SessionClient.h	/^    std::map<int, int> m_MapConKeyValue;    \/\/ 获取对应的key相应的值$/;"	m	class:SessionClient
m_MapDelUserList	Extern/ServerFrame/data/GameUserManager.h	/^	std::map<int, std::list<SDelayDelData>::iterator>	m_MapDelUserList;					\/\/玩家对应的向量迭代器$/;"	m	class:CGameUserManager
m_MaxCount	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    int m_MaxCount;$/;"	m	class:KxSelectPoller
m_MaxEventQueue	Extern/ServerFrame/commnication/KxEpoller.h	/^	int m_MaxEventQueue;$/;"	m	class:KxEpoller
m_MemPool	Extern/ServerFrame/core/KxMemPool.h	/^    KxMemPool* m_MemPool;$/;"	m	class:KxMemManager
m_MinAlocateSize	Extern/ServerFrame/core/KxMemPool.h	/^    unsigned int m_MinAlocateSize;                          \/\/分配最小内存大小为 1 << m_MinAlocateSize$/;"	m	class:KxMemPool
m_Next	Extern/ServerFrame/helper/KxTimerManager.h	/^    KxTimerObject* m_Next;$/;"	m	class:KxTimerObject
m_Now	Extern/ServerFrame/helper/KxTimerManager.h	/^	kxTimeVal					    m_Now;$/;"	m	class:KxTimerManager
m_Object	Extern/ServerFrame/helper/KxTimerCallback.h	/^    T* m_Object;$/;"	m	class:KxTimerCallback
m_Offset	Extern/ServerFrame/helper/BufferData.h	/^    unsigned int m_Offset;      \/\/ 当前读取偏移$/;"	m	class:BufferData
m_OutSet	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    fd_set m_OutSet;$/;"	m	class:KxSelectPoller
m_Permission	SessionServer/SessionServer/SessionClient.h	/^	unsigned int m_Permission;	                    \/\/ 权限$/;"	m	class:SessionClient
m_PollMap	Extern/ServerFrame/commnication/KxEpoller.h	/^    std::map<KXCOMMID, IKxComm*> m_PollMap;$/;"	m	class:KxEpoller
m_PollMap	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    std::map<KXCOMMID, IKxComm*> m_PollMap;$/;"	m	class:KxSelectPoller
m_PollType	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    int	        m_PollType;$/;"	m	class:IKxComm
m_Poller	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    IKxCommPoller* m_Poller;            \/\/ Poller对象，用于非阻塞发送失败时，自动发送缓存数据$/;"	m	class:IKxComm
m_Poller	Extern/ServerFrame/server/KxBaseServer.h	/^	IKxCommPoller*	m_Poller;$/;"	m	class:KxBaseServer
m_Port	Extern/Tool/DBDriver/RedisStorer.h	/^	int             m_Port;$/;"	m	class:RedisStorer
m_Port	SessionServer/SessionServer/SessionConnect.h	/^	int m_Port;			    \/\/ 服务器端口$/;"	m	class:SessionConnector
m_Prev	Extern/ServerFrame/helper/KxTimerManager.h	/^    KxTimerObject* m_Prev;$/;"	m	class:KxTimerObject
m_ProcessModule	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    IKxModule*  m_ProcessModule;$/;"	m	class:IKxComm
m_RecvBuffer	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    char* m_RecvBuffer;                 \/\/ 正在接收的缓冲区$/;"	m	class:KxTCPUnit
m_RecvBuffer	Extern/ServerFrame/commnication/KxUDPUnit.h	/^    char*       m_RecvBuffer;$/;"	m	class:KxUDPUnit
m_RecvBufferLen	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    unsigned int m_RecvBufferLen;       \/\/ 正在接收的缓冲区大小$/;"	m	class:KxTCPUnit
m_RecvBufferOffset	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    unsigned int m_RecvBufferOffset;    \/\/ 正在接收的缓冲区偏移$/;"	m	class:KxTCPUnit
m_ReferenceCount	Extern/ServerFrame/core/KxObject.h	/^    unsigned int m_ReferenceCount;$/;"	m	class:KxObject
m_RemoveSet	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    std::set<IKxComm*> m_RemoveSet;$/;"	m	class:KxSelectPoller
m_Repeat	Extern/ServerFrame/helper/KxTimerManager.h	/^    int m_Repeat;               \/\/ 重复次数$/;"	m	class:KxTimerObject
m_SendBuffer	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    char* m_SendBuffer;                 \/\/ 正在发送的缓冲区$/;"	m	class:KxTCPUnit
m_SendBufferLen	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    unsigned int m_SendBufferLen;       \/\/ 正在发送的缓冲区大小$/;"	m	class:KxTCPUnit
m_SendBufferOffset	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    unsigned int m_SendBufferOffset;    \/\/ 正在发送的缓冲区偏移$/;"	m	class:KxTCPUnit
m_Server	Extern/ServerFrame/server/KxBaseServer.cpp	/^KxBaseServer* KxBaseServer::m_Server = NULL;$/;"	m	class:KxBaseServer	file:
m_Server	Extern/ServerFrame/server/KxBaseServer.h	/^    static KxBaseServer* m_Server;$/;"	m	class:KxBaseServer
m_ServerCon	Client/Client/TestClient.h	/^	ConnectServerConf*  m_ServerCon;$/;"	m	class:TestClient
m_ServerConfig	LoginServer/LoginServer/LoginServer.h	/^	ServerConfig			m_ServerConfig;	\/\/服务器数读取配置表$/;"	m	class:LoginServer
m_ServerConfig	SessionServer/SessionServer/SessionServer.h	/^	ServerConfig			m_ServerConfig;	\/\/服务器数读取配置表$/;"	m	class:SessionServer
m_ServerData	Extern/ServerFrame/server/ServerConfig.h	/^	std::map<int, ServerData>   m_ServerData;$/;"	m	class:ServerConfig
m_ServerData	LoginServer/LoginServer/LoginServer.h	/^	ServerData				m_ServerData;$/;"	m	class:LoginServer
m_ServerData	SessionServer/SessionServer/SessionServer.h	/^	ServerData				m_ServerData;$/;"	m	class:SessionServer
m_ServerID	Extern/ServerFrame/server/KxBaseServer.h	/^	int				m_ServerID;$/;"	m	class:KxBaseServer
m_ServerId	SessionServer/SessionServer/SessionConnect.h	/^	int m_ServerId;			\/\/ 服务器组ID$/;"	m	class:SessionConnector
m_ServerList	SessionServer/SessionServer/NetworkManager.h	/^	std::map<int, IKxComm* >	m_ServerList;		\/\/ 服务端连接管理$/;"	m	class:NetWorkManager
m_ServerMapByGroup	SessionServer/SessionServer/NetworkManager.h	/^    std::map<int, std::vector<IKxComm*> >	m_ServerMapByGroup;		\/\/ 服务端连接管理$/;"	m	class:NetWorkManager
m_ServerName	Extern/ServerFrame/server/KxBaseServer.h	/^	std::string		m_ServerName;$/;"	m	class:KxBaseServer
m_Sock	Extern/ServerFrame/commnication/KxSock.h	/^    KXCOMMID        m_Sock;$/;"	m	class:KxSock
m_SockAddr	Extern/ServerFrame/commnication/KxSock.h	/^    kxSocketAddr    m_SockAddr;$/;"	m	class:KxSock
m_SockType	Extern/ServerFrame/commnication/KxSock.h	/^    int             m_SockType;$/;"	m	class:KxSock
m_SockVersion	Extern/ServerFrame/commnication/KxSock.h	/^	KXSOCK_VERSION  m_SockVersion;$/;"	m	class:KxSock
m_Socket	Extern/ServerFrame/commnication/KxTCPListener.h	/^	KxSock* m_Socket;$/;"	m	class:KxTCPListener
m_Socket	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    KxSock* m_Socket;                   \/\/ Socket对象$/;"	m	class:KxTCPUnit
m_Socket	Extern/ServerFrame/commnication/KxUDPUnit.h	/^	KxSock*     m_Socket;$/;"	m	class:KxUDPUnit
m_StringFormat	Extern/ServerFrame/log/LogManager.h	/^    std::string m_StringFormat;$/;"	m	class:LogManager
m_Stub	Extern/ServerFrame/core/KxMemPool.h	/^    MemMS m_Stub;                                           \/\/内存块存根$/;"	m	class:KxMemPool
m_Tag	Extern/ServerFrame/log/ILogHandler.h	/^	int m_Tag;$/;"	m	class:ILogHandler
m_Tail	Extern/ServerFrame/commnication/KxBufferList.h	/^	kxBufferNode* m_Tail;$/;"	m	class:KxBufferList
m_Tail	Extern/ServerFrame/helper/KxTimerManager.h	/^    KxTimerObject* m_Tail;$/;"	m	class:KxTimerList
m_Tick	Extern/ServerFrame/server/KxBaseServer.h	/^	int				m_Tick;$/;"	m	class:KxBaseServer
m_TimeManager	Extern/ServerFrame/data/GameUserManager.h	/^	KxTimerManager *							m_TimeManager;$/;"	m	class:CGameUserManager
m_TimeOption	Extern/ServerFrame/log/LogManager.h	/^    bool m_TimeOption;$/;"	m	class:LogManager
m_TimeOut	Extern/ServerFrame/commnication/KxEpoller.h	/^	int m_TimeOut;$/;"	m	class:KxEpoller
m_TimeOut	Extern/ServerFrame/commnication/KxSelectPoller.h	/^	kxTimeVal m_TimeOut;$/;"	m	class:KxSelectPoller
m_TimeVal	Extern/ServerFrame/helper/KxTimerManager.h	/^    kxTimeVal m_TimeVal;		\/\/ 超时时间$/;"	m	class:KxTimerObject
m_Timer	Extern/ServerFrame/helper/KxTimerManager.h	/^    KxTimerObject* m_Timer;$/;"	m	class:KxTimerList
m_TimerCallBack	SessionServer/SessionServer/SessionClient.h	/^	KxTimerCallback<SessionClient>* m_TimerCallBack;                    $/;"	m	class:SessionClient
m_TimerCallBack	SessionServer/SessionServer/SessionConnect.h	/^	KxTimerCallback<SessionConnector>* m_TimerCallBack;$/;"	m	class:SessionConnector
m_TimerList	Extern/ServerFrame/helper/KxTimerManager.h	/^    KxTimerList* m_TimerList;$/;"	m	class:KxTimerObject
m_TimerMgr	Extern/ServerFrame/server/KxBaseServer.h	/^    KxTimerManager* m_TimerMgr;$/;"	m	class:KxBaseServer
m_Timestamp	Extern/ServerFrame/helper/KxTimerManager.h	/^    int                             m_Timestamp;$/;"	m	class:KxTimerManager
m_UserId	SessionServer/SessionServer/SessionClient.h	/^    unsigned int m_UserId;                  \/\/ 已验证的用户ID$/;"	m	class:SessionClient
m_UserMap	SessionServer/SessionServer/NetworkManager.h	/^    std::map<unsigned int, IKxComm*> m_UserMap;       		\/\/ 已经验证过的客户端连接管理$/;"	m	class:NetWorkManager
m_VectServerModel	Extern/ServerFrame/data/GameUserManager.h	/^	std::vector<ModelType>								m_VectServerModel;					\/\/服务器所需求服务器模型$/;"	m	class:CGameUserManager
m_WaterMark	Extern/ServerFrame/core/KxMemPool.h	/^    unsigned int m_WaterMark;                               \/\/标记水位$/;"	m	class:KxMemPool
m_aPos	Extern/Tool/XML/XML.h	/^    vectorElemPosT m_aPos;$/;"	m	class:XML
m_bChanging	SessionServer/SessionServer/NetworkManager.h	/^	bool		m_bChanging;											\/\/是否在切换中$/;"	m	class:NetWorkManager
m_bEnabledHb	Client/Client/GameNetworkNode.h	/^    bool                                m_bEnabledHb;                   \/\/ 是否启动心跳$/;"	m	class:CGameNetworkNode
m_bUserClose	Client/Client/GameNetworkNode.h	/^    bool                                m_bUserClose;$/;"	m	class:CGameNetworkNode
m_ctx	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        redisAsyncContext * m_ctx;$/;"	m	class:RedisQtAdapter
m_curFile	Extern/ServerFrame/log/LogFileHandler.h	/^    FILE* m_curFile;$/;"	m	class:LogFileHandler
m_curFileCount	Extern/ServerFrame/log/LogFileHandler.h	/^    int m_curFileCount;$/;"	m	class:LogFileHandler
m_curFileSize	Extern/ServerFrame/log/LogFileHandler.h	/^    int m_curFileSize;$/;"	m	class:LogFileHandler
m_data	Extern/Tool/MD5/MD5.h	/^	UnLong_t m_data[4];$/;"	m	class:CMD5
m_fMaxHbTime	Client/Client/GameNetworkNode.h	/^    float                               m_fMaxHbTime;                   \/\/ 多久没数据交互发送一次心跳包$/;"	m	class:CGameNetworkNode
m_fTickNet	Client/Client/GameNetworkNode.h	/^    float                               m_fTickNet;                     \/\/ 计算与上次交互数据间隔时间$/;"	m	class:CGameNetworkNode
m_fastMode	Extern/ServerFrame/log/LogFileHandler.h	/^    bool m_fastMode;$/;"	m	class:LogFileHandler
m_fileName	Extern/ServerFrame/log/LogFileHandler.h	/^    std::string m_fileName;$/;"	m	class:LogFileHandler
m_filePath	Extern/ServerFrame/log/LogFileHandler.h	/^    std::string m_filePath;$/;"	m	class:LogFileHandler
m_iPos	Extern/Tool/XML/XML.h	/^    int m_iPos;$/;"	m	class:XML
m_iPosChild	Extern/Tool/XML/XML.h	/^    int m_iPosChild;$/;"	m	class:XML
m_iPosFree	Extern/Tool/XML/XML.h	/^    int m_iPosFree;$/;"	m	class:XML
m_iPosParent	Extern/Tool/XML/XML.h	/^    int m_iPosParent;$/;"	m	class:XML
m_lMD5	Extern/Tool/MD5/MD5.h	/^    UnInt32_t m_lMD5[4];$/;"	m	class:MD5
m_lpszBuffer	Extern/Tool/MD5/MD5.h	/^	UnChar_t  m_lpszBuffer[64];$/;"	m	class:MD5
m_mapModels	Extern/ServerFrame/data/GameUser.h	/^	std::map<int, IDBModel*>	m_mapModels;$/;"	m	class:GameUser
m_mapSavedPos	Extern/Tool/XML/XML.h	/^    mapSavedPosT m_mapSavedPos;$/;"	m	class:XML
m_mapServerConns	Client/Client/GameNetworkNode.h	/^    std::map<int, ServerConn>           m_mapServerConns;               \/\/ 服务器连接$/;"	m	class:CGameNetworkNode
m_mapStorers	Extern/Tool/DBDriver/DBManager.h	/^	std::map<std::string, DBRule>		m_mapStorers;	\/\/ <ip:port:model_type, storer>$/;"	m	class:DBManager
m_mapStorers_id	Extern/Tool/DBDriver/DBManager.h	/^	std::map<DBID, DBRule*>				m_mapStorers_id;	\/\/ <ip:port:model_type, storer>$/;"	m	class:DBManager
m_mapUserInfo	Extern/ServerFrame/data/DataModel/UserModel.h	/^	std::map<int, int>		m_mapUserInfo;$/;"	m	class:UserModel
m_maxFileCount	Extern/ServerFrame/log/LogFileHandler.h	/^    int m_maxFileCount;$/;"	m	class:LogFileHandler
m_maxFileSize	Extern/ServerFrame/log/LogFileHandler.h	/^    int m_maxFileSize;$/;"	m	class:LogFileHandler
m_nAccountId	Extern/ServerFrame/data/GameUser.h	/^	int							m_nAccountId;$/;"	m	class:GameUser
m_nCount	Extern/Tool/MD5/MD5.h	/^    UnInt32_t m_nCount[2];$/;"	m	class:MD5
m_nDocOffset	Extern/ServerFrame/helper/CsvLoader.h	/^	std::string::size_type m_nDocOffset;$/;"	m	class:CsvLoader
m_nDocStep	Extern/ServerFrame/helper/CsvLoader.h	/^	std::string::size_type m_nDocStep;        \/\/文档的截取下标$/;"	m	class:CsvLoader
m_nLineOffset	Extern/ServerFrame/helper/CsvLoader.h	/^	std::string::size_type m_nLineOffset;     \/\/行的下标偏移值$/;"	m	class:CsvLoader
m_nLineStep	Extern/ServerFrame/helper/CsvLoader.h	/^	std::string::size_type m_nLineStep;       \/\/行的截取下标$/;"	m	class:CsvLoader
m_nNodeLength	Extern/Tool/XML/XML.h	/^    int m_nNodeLength;$/;"	m	class:XML
m_nNodeOffset	Extern/Tool/XML/XML.h	/^    int m_nNodeOffset;$/;"	m	class:XML
m_nNodeType	Extern/Tool/XML/XML.h	/^    int m_nNodeType;$/;"	m	class:XML
m_nUid	Extern/ServerFrame/data/DataModel/UserModel.h	/^	int						m_nUid;$/;"	m	class:UserModel
m_nUid	Extern/ServerFrame/data/GameUser.h	/^	int							m_nUid;$/;"	m	class:GameUser
m_newFile	Extern/ServerFrame/log/LogFileHandler.h	/^    bool m_newFile;$/;"	m	class:LogFileHandler
m_pChildDS	Extern/Tool/XML/XML.h	/^    const char* m_pChildDS;$/;"	m	class:XML
m_pContext	Extern/Tool/DBDriver/RedisStorer.h	/^	redisContext*   m_pContext;         \/\/Redis连接上下文对象$/;"	m	class:RedisStorer
m_pGameModule	Client/Client/GameNetworkNode.h	/^    BaseModule*                        m_pGameModule;                  \/\/ 处理逻辑模块实例$/;"	m	class:CGameNetworkNode
m_pInstance	Client/Client/GameNetworkNode.cpp	/^CGameNetworkNode *CGameNetworkNode::m_pInstance = NULL;$/;"	m	class:CGameNetworkNode	file:
m_pInstance	Client/Client/GameNetworkNode.h	/^    static CGameNetworkNode*            m_pInstance;                    \/\/ $/;"	m	class:CGameNetworkNode
m_pInstance	Extern/ServerFrame/data/GameUserManager.cpp	/^CGameUserManager * CGameUserManager::m_pInstance = NULL;$/;"	m	class:CGameUserManager	file:
m_pInstance	Extern/ServerFrame/data/GameUserManager.h	/^	static CGameUserManager *							m_pInstance;$/;"	m	class:CGameUserManager
m_pInstance	Extern/Tool/DBDriver/DBManager.cpp	/^DBManager* DBManager::m_pInstance = NULL;$/;"	m	class:DBManager	file:
m_pInstance	Extern/Tool/DBDriver/DBManager.h	/^    static DBManager *				m_pInstance;$/;"	m	class:DBManager
m_pMainDS	Extern/Tool/XML/XML.h	/^    const char* m_pMainDS;$/;"	m	class:XML
m_pPoller	Client/Client/GameNetworkNode.h	/^    IKxCommPoller*            m_pPoller;                      \/\/ 轮询器$/;"	m	class:CGameNetworkNode
m_pReply	Extern/Tool/DBDriver/RedisStorer.h	/^	redisReply*     m_pReply;           \/\/Redis命令对象$/;"	m	class:RedisStorer
m_pSink	SessionServer/SessionServer/ConnectModule.h	/^	IGameEvent* m_pSink;    \/\/ 处理游戏逻辑回调$/;"	m	class:ConnectModule
m_pStorer	Extern/ServerFrame/data/DataModel/UserModel.h	/^	IStorer *				m_pStorer;$/;"	m	class:UserModel
m_pssward	Extern/Tool/DBDriver/RedisStorer.h	/^	std::string     m_pssward;$/;"	m	class:RedisStorer
m_read	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        QSocketNotifier * m_read;$/;"	m	class:RedisQtAdapter
m_sUserName	Extern/ServerFrame/data/GameUser.h	/^	std::string					m_sUserName;$/;"	m	class:GameUser
m_strDoc	Extern/Tool/XML/XML.h	/^    std::string m_strDoc;$/;"	m	class:XML
m_strError	Extern/Tool/XML/XML.h	/^    std::string m_strError;$/;"	m	class:XML
m_strIP	SessionServer/SessionServer/SessionConnect.h	/^	char m_strIP[16];	    \/\/ 服务器IP$/;"	m	class:SessionConnector
m_strUserName	Extern/ServerFrame/data/DataModel/UserModel.h	/^	std::string				m_strUserName;$/;"	m	class:UserModel
m_strUsrKey	Extern/ServerFrame/data/DataModel/UserModel.h	/^	std::string				m_strUsrKey;$/;"	m	class:UserModel
m_write	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        QSocketNotifier * m_write;$/;"	m	class:RedisQtAdapter
main	Client/Client/main.cpp	/^int main(int argc, char ** argv) $/;"	f
main	LoginServer/LoginServer/main.cpp	/^int main(int argc, char ** argv) $/;"	f
main	SessionServer/SessionServer/main.cpp	/^int main(int argc, char ** argv) $/;"	f
mapSavedPosT	Extern/Tool/XML/XML.h	/^    typedef std::map<std::string,SavedPos> mapSavedPosT;$/;"	t	class:XML
mapVal	Extern/Tool/Common/Value_.h	/^        ValueMap* mapVal;$/;"	m	union:Value_::__anon1
maxbuf	Extern/Tool/DBDriver/hiredis/read.h	/^    size_t maxbuf; \/* Max length of unused buffer *\/$/;"	m	struct:redisReader
md5_context	Extern/Tool/MD5/MD5.h	/^	struct md5_context$/;"	s	class:CMD5
md5_finish	Extern/Tool/MD5/MD5.cpp	/^void CMD5::md5_finish(struct md5_context *ctx, UnChar_t digest[16])$/;"	f	class:CMD5
md5_padding	Extern/Tool/MD5/MD5.cpp	/^static UnChar_t md5_padding[64] =$/;"	v	file:
md5_process	Extern/Tool/MD5/MD5.cpp	/^void CMD5::md5_process(struct md5_context *ctx, UnChar_t data[64])$/;"	f	class:CMD5
md5_starts	Extern/Tool/MD5/MD5.cpp	/^void CMD5::md5_starts(struct md5_context *ctx)$/;"	f	class:CMD5
md5_update	Extern/Tool/MD5/MD5.cpp	/^void CMD5::md5_update(struct md5_context *ctx, UnChar_t *input, UnLongInt_t length)$/;"	f	class:CMD5
memAlocate	Extern/ServerFrame/core/KxMemPool.cpp	/^void* KxMemManager::memAlocate(unsigned int size)$/;"	f	class:KxMemManager
memAlocate	Extern/ServerFrame/core/KxMemPool.cpp	/^void* KxMemManager::memAlocate(unsigned int size, unsigned int& outSize)$/;"	f	class:KxMemManager
memAlocate	Extern/ServerFrame/core/KxMemPool.cpp	/^void* KxMemPool::memAlocate(unsigned int size)$/;"	f	class:KxMemPool
memAutoRelease	Extern/ServerFrame/core/KxMemPool.cpp	/^int KxMemPool::memAutoRelease(unsigned size, std::list<void*>* plist, std::set<void*>* pset)$/;"	f	class:KxMemPool
memDumpInfo	Extern/ServerFrame/core/KxMemPool.cpp	/^void KxMemManager::memDumpInfo()$/;"	f	class:KxMemManager
memDumpInfo	Extern/ServerFrame/core/KxMemPool.cpp	/^void KxMemPool::memDumpInfo()$/;"	f	class:KxMemPool
memExtend	Extern/ServerFrame/core/KxMemPool.cpp	/^int KxMemPool::memExtend(unsigned int size, std::list<void*>* plist, std::set<void*>* pset)$/;"	f	class:KxMemPool
memExtendNewSize	Extern/ServerFrame/core/KxMemPool.cpp	/^int KxMemPool::memExtendNewSize(unsigned int size)$/;"	f	class:KxMemPool
memFitCounts	Extern/ServerFrame/core/KxMemPool.cpp	/^unsigned int KxMemPool::memFitCounts(unsigned int size)$/;"	f	class:KxMemPool
memFitSize	Extern/ServerFrame/core/KxMemPool.cpp	/^unsigned int KxMemPool::memFitSize(unsigned int size)$/;"	f	class:KxMemPool
memRecycle	Extern/ServerFrame/core/KxMemPool.cpp	/^int KxMemManager::memRecycle(void* mem, unsigned int size)$/;"	f	class:KxMemManager
memRecycle	Extern/ServerFrame/core/KxMemPool.cpp	/^int KxMemPool::memRecycle(void* mem, unsigned int size)$/;"	f	class:KxMemPool
memReleaseWithSize	Extern/ServerFrame/core/KxMemPool.cpp	/^int KxMemPool::memReleaseWithSize(unsigned int size)$/;"	f	class:KxMemPool
memRelsaseCount	Extern/ServerFrame/core/KxMemPool.cpp	/^unsigned int KxMemPool::memRelsaseCount(unsigned int size, unsigned int freecount, unsigned int stubcount)$/;"	f	class:KxMemPool
modifyCommObject	Extern/ServerFrame/commnication/KxEpoller.cpp	/^	int KxEpoller::modifyCommObject(IKxComm* obj, int events)$/;"	f	class:KxEpoller
modifyCommObject	Extern/ServerFrame/commnication/KxSelectPoller.cpp	/^int KxSelectPoller::modifyCommObject(IKxComm* obj, int type)$/;"	f	class:KxSelectPoller
move	Extern/Tool/Common/Data_.cpp	/^void Data_::move(Data_& other)$/;"	f	class:Data_
mystrdup	Extern/Tool/MD5/MD5.cpp	/^char * mystrdup(const char *s)$/;"	f
nDelayTime	Extern/ServerFrame/data/GameUserManager.h	/^	int nDelayTime;$/;"	m	struct:SDelayDelData
nEndL	Extern/Tool/XML/XML.h	/^        int nEndL;$/;"	m	struct:XML::ElemPos
nEndR	Extern/Tool/XML/XML.h	/^        int nEndR;$/;"	m	struct:XML::ElemPos
nL	Extern/Tool/XML/XML.h	/^        int nL;$/;"	m	struct:XML::TokenPos
nNext	Extern/Tool/XML/XML.h	/^        int nNext;$/;"	m	struct:XML::TokenPos
nR	Extern/Tool/XML/XML.h	/^        int nR;$/;"	m	struct:XML::TokenPos
nReserved	Extern/Tool/XML/XML.h	/^        int nReserved;$/;"	m	struct:XML::ElemPos
nStartL	Extern/Tool/XML/XML.h	/^        int nStartL;$/;"	m	struct:XML::ElemPos
nStartR	Extern/Tool/XML/XML.h	/^        int nStartR;$/;"	m	struct:XML::ElemPos
nUid	Extern/ServerFrame/data/GameUserManager.h	/^	int nUid;$/;"	m	struct:SDelayDelData
name	Extern/ServerFrame/server/ServerConfig.h	/^	std::string name;$/;"	m	struct:ServerData
newBufferData	Extern/ServerFrame/helper/BufferTool.h	/^inline BufferData* newBufferData(int mainCMD, int subCmd)$/;"	f
newGameUser	Extern/ServerFrame/data/GameUserManager.cpp	/^GameUser *CGameUserManager::newGameUser(int uid, int accountId)$/;"	f	class:CGameUserManager
next	Extern/ServerFrame/commnication/KxBufferList.cpp	/^kxBufferNode* KxBufferList::next()$/;"	f	class:KxBufferList
next	Extern/ServerFrame/commnication/KxBufferList.h	/^	kxBufferNode* next;$/;"	m	struct:kxBufferNode
next	Extern/Tool/DBDriver/hiredis/async.h	/^    struct redisCallback *next; \/* simple singly linked list *\/$/;"	m	struct:redisCallback	typeref:struct:redisCallback::redisCallback
notifyObservers	Extern/Tool/Observer/Observer.cpp	/^void Observable::notifyObservers(void* data) $/;"	f	class:Observable
now	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline kxTimeVal& now()$/;"	f	class:kxTimeVal
obj	Extern/Tool/DBDriver/hiredis/read.h	/^    void *obj; \/* holds user-generated value for a read task *\/$/;"	m	struct:redisReadTask
observers	Extern/Tool/Observer/Observer.h	/^	vector<Observer*> observers;$/;"	m	class:Observable
obuf	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    char *obuf; \/* Write buffer *\/$/;"	m	struct:redisContext
onAccept	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^KxTCPClienter* KxTCPListener::onAccept(KXCOMMID client)$/;"	f	class:KxTCPListener
onAccept	LoginServer/LoginServer/LoginListener.cpp	/^KxTCPClienter* LoginListener::onAccept(KXCOMMID client)$/;"	f	class:LoginListener
onAccept	SessionServer/SessionServer/SessionListener.cpp	/^KxTCPClienter* SessionListener::onAccept(KXCOMMID client)$/;"	f	class:SessionListener
onClean	Extern/ServerFrame/log/ILogHandler.h	/^	virtual void onClean() { }$/;"	f	class:ILogHandler
onConnect	Extern/Tool/DBDriver/hiredis/async.h	/^    redisConnectCallback *onConnect;$/;"	m	struct:redisAsyncContext
onConnected	Extern/ServerFrame/commnication/KxTCPConnector.cpp	/^void KxTCPConnector::onConnected(bool success)$/;"	f	class:KxTCPConnector
onConnected	SessionServer/SessionServer/SessionConnect.cpp	/^void SessionConnector::onConnected(bool success)$/;"	f	class:SessionConnector
onDisconnect	Extern/Tool/DBDriver/hiredis/async.h	/^    redisDisconnectCallback *onDisconnect;$/;"	m	struct:redisAsyncContext
onEnter	Client/Client/GameNetworkNode.cpp	/^void CGameNetworkNode::onEnter()$/;"	f	class:CGameNetworkNode
onEnter	Extern/ServerFrame/log/ILogHandler.h	/^	virtual void onEnter() { }$/;"	f	class:ILogHandler
onError	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    virtual int onError()$/;"	f	class:IKxComm
onError	SessionServer/SessionServer/SessionConnect.cpp	/^int SessionConnector::onError()$/;"	f	class:SessionConnector
onExit	Client/Client/GameNetworkNode.cpp	/^void CGameNetworkNode::onExit()$/;"	f	class:CGameNetworkNode
onExit	Extern/ServerFrame/log/ILogHandler.h	/^	virtual void onExit() { }$/;"	f	class:ILogHandler
onLog	Extern/ServerFrame/log/LogConsoleHandler.cpp	/^bool LogConsoleHandler::onLog(int level, const std::string& log)$/;"	f	class:LogConsoleHandler
onLog	Extern/ServerFrame/log/LogFileHandler.cpp	/^bool LogFileHandler::onLog(int level, const std::string& log)$/;"	f	class:LogFileHandler
onRecv	Extern/ServerFrame/commnication/KxTCPConnector.cpp	/^int KxTCPConnector::onRecv()$/;"	f	class:KxTCPConnector
onRecv	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^int KxTCPListener::onRecv()$/;"	f	class:KxTCPListener
onRecv	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^int KxTCPUnit::onRecv()$/;"	f	class:KxTCPUnit
onRecv	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^int KxUDPUnit::onRecv()$/;"	f	class:KxUDPUnit
onRecv	SessionServer/SessionServer/SessionClient.cpp	/^int SessionClient::onRecv()$/;"	f	class:SessionClient
onSend	Extern/ServerFrame/commnication/KxTCPConnector.cpp	/^int KxTCPConnector::onSend()$/;"	f	class:KxTCPConnector
onSend	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^int KxTCPListener::onSend()$/;"	f	class:KxTCPListener
onSend	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^int KxTCPUnit::onSend()$/;"	f	class:KxTCPUnit
onSend	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^int KxUDPUnit::onSend()$/;"	f	class:KxUDPUnit
onServerInit	Client/Client/TestClient.cpp	/^bool TestClient::onServerInit()$/;"	f	class:TestClient
onServerInit	Extern/ServerFrame/server/KxBaseServer.cpp	/^bool KxBaseServer::onServerInit()$/;"	f	class:KxBaseServer
onServerInit	LoginServer/LoginServer/LoginServer.cpp	/^bool LoginServer::onServerInit()$/;"	f	class:LoginServer
onServerInit	SessionServer/SessionServer/SessionServer.cpp	/^bool SessionServer::onServerInit()$/;"	f	class:SessionServer
onServerUninit	Extern/ServerFrame/server/KxBaseServer.cpp	/^void KxBaseServer::onServerUninit()$/;"	f	class:KxBaseServer
onServerUpdate	Extern/ServerFrame/server/KxBaseServer.cpp	/^void KxBaseServer::onServerUpdate()$/;"	f	class:KxBaseServer
onTimer	Extern/ServerFrame/data/GameUserManager.cpp	/^void CGameUserManager::onTimer(const kxTimeVal& now)$/;"	f	class:CGameUserManager
onTimer	Extern/ServerFrame/helper/KxTimerCallback.h	/^    virtual void onTimer(const kxTimeVal& now)$/;"	f	class:KxTimerCallback
onTimer	Extern/ServerFrame/helper/KxTimerManager.cpp	/^void KxTimerObject::onTimer(const kxTimeVal& now)$/;"	f	class:KxTimerObject
onTimer	SessionServer/SessionServer/NetworkManager.cpp	/^void NetWorkManager::onTimer(const kxTimeVal& now)$/;"	f	class:NetWorkManager
onTimer	SessionServer/SessionServer/SessionClient.cpp	/^void SessionClient::onTimer()$/;"	f	class:SessionClient
onTimer	SessionServer/SessionServer/SessionConnect.cpp	/^void SessionConnector::onTimer()$/;"	f	class:SessionConnector
onUserEvent	SessionServer/SessionServer/ConnectEvent.cpp	/^bool ConnectEvent::onUserEvent(int nType, IKxComm* target)$/;"	f	class:ConnectEvent
onUserEvent	SessionServer/SessionServer/SessionEvent.cpp	/^bool SessionEvent::onUserEvent(int nType, IKxComm* target) \/\/Session本地路由时根据nType对客户端进行不同的响应$/;"	f	class:SessionEvent
onUserProc	SessionServer/SessionServer/ConnectEvent.cpp	/^bool ConnectEvent::onUserProc(unsigned int id)$/;"	f	class:ConnectEvent
onUserProc	SessionServer/SessionServer/SessionEvent.cpp	/^bool SessionEvent::onUserProc(unsigned int id)\/\/Session本地路由时根据命令ID执行操作$/;"	f	class:SessionEvent
on_close	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^static void on_close(uv_handle_t* handle) {$/;"	f
openLogfile	Extern/ServerFrame/log/LogFileHandler.cpp	/^bool LogFileHandler::openLogfile(const char* mode)$/;"	f	class:LogFileHandler
operator !=	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline bool operator!=(const kxTimeVal& v) const$/;"	f	class:kxTimeVal
operator !=	Extern/Tool/Common/Value_.cpp	/^bool Value_::operator!= (const Value_& v) const$/;"	f	class:Value_
operator !=	Extern/Tool/Common/Value_.cpp	/^bool Value_::operator!= (const Value_& v)$/;"	f	class:Value_
operator +	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline const kxTimeVal operator+(const kxTimeVal& v) const$/;"	f	class:kxTimeVal
operator +	Extern/Tool/MD5/MD5.cpp	/^CMD5 CMD5::operator +(CMD5 adder)$/;"	f	class:CMD5
operator +=	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline kxTimeVal& operator+=(const kxTimeVal& v)$/;"	f	class:kxTimeVal
operator +=	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline kxTimeVal& operator+=(float v)$/;"	f	class:kxTimeVal
operator -	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline const kxTimeVal operator-(const kxTimeVal& v) const$/;"	f	class:kxTimeVal
operator -=	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline kxTimeVal& operator-=(const kxTimeVal& v)$/;"	f	class:kxTimeVal
operator -=	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline kxTimeVal& operator-=(float v)$/;"	f	class:kxTimeVal
operator <	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline bool operator<(const kxTimeVal& v) const$/;"	f	class:kxTimeVal
operator =	Extern/Tool/Common/Data_.cpp	/^Data_& Data_::operator= (Data_&& other)$/;"	f	class:Data_
operator =	Extern/Tool/Common/Data_.cpp	/^Data_& Data_::operator= (const Data_& other)$/;"	f	class:Data_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (ValueMap&& v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (ValueMapIntKey&& v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (ValueVector&& v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (Value_&& other)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (bool v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (const ValueMap& v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (const ValueMapIntKey& v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (const ValueVector& v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (const Value_& other)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (const char* v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (const std::string& v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (double v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (float v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (int v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (unsigned char v)$/;"	f	class:Value_
operator =	Extern/Tool/Common/Value_.cpp	/^Value_& Value_::operator= (unsigned int v)$/;"	f	class:Value_
operator =	Extern/Tool/XML/XML.cpp	/^void XML::operator=( const XML& markup )$/;"	f	class:XML
operator ==	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline bool operator==(const kxTimeVal& v) const$/;"	f	class:kxTimeVal
operator ==	Extern/Tool/Common/Value_.cpp	/^bool Value_::operator== (const Value_& v) const$/;"	f	class:Value_
operator ==	Extern/Tool/Common/Value_.cpp	/^bool Value_::operator== (const Value_& v)$/;"	f	class:Value_
operator ==	Extern/Tool/MD5/MD5.cpp	/^bool CMD5::operator ==(CMD5 cmper)$/;"	f	class:CMD5
operator >	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline bool operator>(const kxTimeVal& v) const$/;"	f	class:kxTimeVal
pTimerCallback	Extern/ServerFrame/helper/KxTimerCallback.h	/^    typedef void(T::*pTimerCallback)();$/;"	t	class:KxTimerCallback
parent	Extern/Tool/DBDriver/hiredis/read.h	/^    struct redisReadTask *parent; \/* parent task *\/$/;"	m	struct:redisReadTask	typeref:struct:redisReadTask::redisReadTask
parseCsvMathVec	Extern/Tool/StringFormat/StringFormat.h	/^	static void parseCsvMathVec(const std::string strSrc, std::vector<T>& vecDst, char separetor)$/;"	f	class:StringFormat
parseCsvStringMap	Extern/Tool/StringFormat/StringFormat.cpp	/^void StringFormat::parseCsvStringMap(const std::string strSrc, std::map<int, int>& mapDst)$/;"	f	class:StringFormat
parseCsvStringVec	Extern/Tool/StringFormat/StringFormat.cpp	/^void StringFormat::parseCsvStringVec(const std::string strSrc, std::vector<std::string>& vecDst, char separetor \/*= '|'*\/)$/;"	f	class:StringFormat
parseCsvStringVec	Extern/Tool/StringFormat/StringFormat.cpp	/^void StringFormat::parseCsvStringVec(const std::string strSrc, std::vector<std::vector<int> >& vecDst)$/;"	f	class:StringFormat
parseCsvStringVecByChar	Extern/Tool/StringFormat/StringFormat.cpp	/^void StringFormat::parseCsvStringVecByChar(const std::string strSrc, std::vector<int>& vecDst, char separetor)$/;"	f	class:StringFormat
passWord	Extern/ServerFrame/server/Protocol.h	/^	char passWord[16];$/;"	m	struct:REGISTER_DATA
password	Extern/Tool/DBDriver/IStorer.h	/^	std::string password;$/;"	m	struct:DBRule
path	Extern/Tool/DBDriver/hiredis/hiredis.h	/^        char *path;$/;"	m	struct:redisContext::__anon3
patterns	Extern/Tool/DBDriver/hiredis/async.h	/^        struct dict *patterns;$/;"	m	struct:redisAsyncContext::__anon7	typeref:struct:redisAsyncContext::__anon7::dict
pending_subs	Extern/Tool/DBDriver/hiredis/async.h	/^    int pending_subs;$/;"	m	struct:redisCallback
poll	Extern/ServerFrame/commnication/KxEpoller.cpp	/^	int KxEpoller::poll()$/;"	f	class:KxEpoller
poll	Extern/ServerFrame/commnication/KxSelectPoller.cpp	/^int KxSelectPoller::poll()$/;"	f	class:KxSelectPoller
poll_fd	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^    GPollFD poll_fd;$/;"	m	struct:__anon4
port	Client/Client/TestClient.h	/^	int port;$/;"	m	struct:ConnectServerConf
port	Extern/ServerFrame/server/ServerConfig.h	/^	int port;$/;"	m	struct:ServerData
port	Extern/Tool/DBDriver/IStorer.h	/^	int port;$/;"	m	struct:DBRule
port	Extern/Tool/DBDriver/hiredis/hiredis.h	/^        int port;$/;"	m	struct:redisContext::__anon2
pos	Extern/Tool/DBDriver/hiredis/read.h	/^    size_t pos; \/* Buffer cursor *\/$/;"	m	struct:redisReader
preciseInvSqrt	Extern/Tool/StringFormat/StringFormat.h	/^inline float preciseInvSqrt(float x)$/;"	f
preciseSqrt	Extern/Tool/StringFormat/StringFormat.h	/^inline float preciseSqrt(float x)$/;"	f
privdata	Extern/Tool/DBDriver/hiredis/async.h	/^    void *privdata;$/;"	m	struct:redisCallback
privdata	Extern/Tool/DBDriver/hiredis/read.h	/^    void *privdata; \/* user-settable arbitrary field *\/$/;"	m	struct:redisReadTask
privdata	Extern/Tool/DBDriver/hiredis/read.h	/^    void *privdata;$/;"	m	struct:redisReader
processError	Client/Client/GameModule.cpp	/^void GameModule::processError(IKxComm *target)$/;"	f	class:GameModule
processError	LoginServer/LoginServer/LoginSessionModule.cpp	/^void LoginSessionModule::processError(IKxComm *target)$/;"	f	class:LoginSessionModule
processError	SessionServer/SessionServer/ClientModule.cpp	/^void ClientModule::processError(IKxComm *target)$/;"	f	class:ClientModule
processError	SessionServer/SessionServer/ConnectModule.cpp	/^void ConnectModule::processError(IKxComm *target)$/;"	f	class:ConnectModule
processEvent	Client/Client/GameModule.cpp	/^void GameModule::processEvent(int eventId, IKxComm* target)$/;"	f	class:GameModule
processEvent	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    virtual void processEvent(int eventId, IKxComm* target) {}$/;"	f	class:IKxModule
processEvent	SessionServer/SessionServer/ConnectModule.cpp	/^void ConnectModule::processEvent(int eventId, IKxComm* target)$/;"	f	class:ConnectModule
processLength	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    virtual int processLength(char* buffer, unsigned int len)$/;"	f	class:IKxModule
processLength	Extern/ServerFrame/helper/BaseModule.h	/^    virtual int processLength(char* buffer, unsigned int len)$/;"	f	class:BaseModule
processLength	LoginServer/LoginServer/LoginSessionModule.cpp	/^int LoginSessionModule::processLength(char* buffer, unsigned int len)$/;"	f	class:LoginSessionModule
processLogic	Client/Client/GameModule.cpp	/^void GameModule::processLogic(char* buffer, unsigned int len, IKxComm *target)$/;"	f	class:GameModule
processLogic	LoginServer/LoginServer/LoginSessionModule.cpp	/^void LoginSessionModule::processLogic(char* buffer, unsigned int len, IKxComm *target)$/;"	f	class:LoginSessionModule
processLogic	SessionServer/SessionServer/ClientModule.cpp	/^void ClientModule::processLogic(char* buffer, unsigned int len, IKxComm *target)$/;"	f	class:ClientModule
processLogic	SessionServer/SessionServer/ConnectModule.cpp	/^void ConnectModule::processLogic(char* buffer, unsigned int len, IKxComm *target)$/;"	f	class:ConnectModule
processServiceC2S	LoginServer/LoginServer/LoginService.cpp	/^void LoginService::processServiceC2S(int subcmd, int uid, char *buffer, int len, IKxComm *commun)$/;"	f	class:LoginService
processServiceS2S	LoginServer/LoginServer/LoginService.cpp	/^void LoginService::processServiceS2S(int subcmd, int uid, char *buffer, int len, IKxComm *commun)$/;"	f	class:LoginService
processSingal	Extern/ServerFrame/server/KxBaseServer.cpp	/^void processSingal(int nSingal)$/;"	f
processUserEvent	SessionServer/SessionServer/ConnectModule.cpp	/^bool ConnectModule::processUserEvent(int nType, IKxComm* target)$/;"	f	class:ConnectModule
processUserReconect	LoginServer/LoginServer/LoginService.cpp	/^void LoginService::processUserReconect(int uid, char *buffer, int len, IKxComm *commun)$/;"	f	class:LoginService
pushBack	Extern/ServerFrame/commnication/KxBufferList.cpp	/^void KxBufferList::pushBack(char* buffer, unsigned int len)$/;"	f	class:KxBufferList
pushBack	Extern/ServerFrame/commnication/KxBufferList.cpp	/^void KxBufferList::pushBack(kxBufferNode* node)$/;"	f	class:KxBufferList
pushBack	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerList::pushBack(KxTimerObject* obj)$/;"	f	class:KxTimerList
pushFront	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerList::pushFront(KxTimerObject* obj)$/;"	f	class:KxTimerList
range_maxvalue	Extern/Tool/DBDriver/IStorer.h	/^	int range_maxvalue;          \/\/ id最大值$/;"	m	struct:DBRule
range_minvalue	Extern/Tool/DBDriver/IStorer.h	/^	int range_minvalue;          \/\/ id最小值$/;"	m	struct:DBRule
reSetGameUserData	Extern/ServerFrame/data/GameUserManager.cpp	/^void CGameUserManager::reSetGameUserData(int uid, bool bLogin)$/;"	f	class:CGameUserManager
read	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        void read() { redisAsyncHandleRead(m_ctx); }$/;"	f	class:RedisQtAdapter
readData	Extern/ServerFrame/helper/BufferData.cpp	/^bool BufferData::readData(void* data, unsigned int dataSize)$/;"	f	class:BufferData
readData	Extern/ServerFrame/helper/BufferData.h	/^    bool readData(T& data)$/;"	f	class:BufferData
reader	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    redisReader *reader; \/* Protocol reader *\/$/;"	m	struct:redisContext
reading	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents
reading	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents
reconnect	Extern/Tool/DBDriver/RedisStorer.cpp	/^int RedisStorer::reconnect()$/;"	f	class:RedisStorer
reconnect	SessionServer/SessionServer/SessionConnect.cpp	/^bool SessionConnector::reconnect()$/;"	f	class:SessionConnector
reconnectToServer	Client/Client/GameNetworkNode.cpp	/^bool CGameNetworkNode::reconnectToServer(EServerConnType connType, std::function<void(bool)> callBack \/*= nullptr*\/)$/;"	f	class:CGameNetworkNode
recv	Extern/ServerFrame/commnication/KxSock.cpp	/^int KxSock::recv(char* buffer, int size)$/;"	f	class:KxSock
recvData	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^int KxTCPListener::recvData(char* buffer, unsigned int len)$/;"	f	class:KxTCPListener
recvData	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^int KxTCPUnit::recvData(char* buffer, unsigned int len)$/;"	f	class:KxTCPUnit
recvData	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^int KxUDPUnit::recvData(char* buffer, unsigned int len)$/;"	f	class:KxUDPUnit
redisAeAddRead	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^static void redisAeAddRead(void *privdata) {$/;"	f
redisAeAddWrite	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^static void redisAeAddWrite(void *privdata) {$/;"	f
redisAeAttach	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f
redisAeCleanup	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^static void redisAeCleanup(void *privdata) {$/;"	f
redisAeDelRead	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^static void redisAeDelRead(void *privdata) {$/;"	f
redisAeDelWrite	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^static void redisAeDelWrite(void *privdata) {$/;"	f
redisAeEvents	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^typedef struct redisAeEvents {$/;"	s
redisAeEvents	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents
redisAeReadEvent	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
redisAeWriteEvent	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
redisAsyncContext	Extern/Tool/DBDriver/hiredis/async.h	/^typedef struct redisAsyncContext {$/;"	s
redisAsyncContext	Extern/Tool/DBDriver/hiredis/async.h	/^} redisAsyncContext;$/;"	t	typeref:struct:redisAsyncContext
redisCallback	Extern/Tool/DBDriver/hiredis/async.h	/^typedef struct redisCallback {$/;"	s
redisCallback	Extern/Tool/DBDriver/hiredis/async.h	/^} redisCallback;$/;"	t	typeref:struct:redisCallback
redisCallbackFn	Extern/Tool/DBDriver/hiredis/async.h	/^typedef void (redisCallbackFn)(struct redisAsyncContext*, void*, void*);$/;"	t
redisCallbackList	Extern/Tool/DBDriver/hiredis/async.h	/^typedef struct redisCallbackList {$/;"	s
redisCallbackList	Extern/Tool/DBDriver/hiredis/async.h	/^} redisCallbackList;$/;"	t	typeref:struct:redisCallbackList
redisConnectCallback	Extern/Tool/DBDriver/hiredis/async.h	/^typedef void (redisConnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisConnectionType	Extern/Tool/DBDriver/hiredis/hiredis.h	/^enum redisConnectionType {$/;"	g
redisContext	Extern/Tool/DBDriver/hiredis/hiredis.h	/^typedef struct redisContext {$/;"	s
redisContext	Extern/Tool/DBDriver/hiredis/hiredis.h	/^} redisContext;$/;"	t	typeref:struct:redisContext
redisDisconnectCallback	Extern/Tool/DBDriver/hiredis/async.h	/^typedef void (redisDisconnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisIvykisAddRead	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^static void redisIvykisAddRead(void *privdata) {$/;"	f
redisIvykisAddWrite	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^static void redisIvykisAddWrite(void *privdata) {$/;"	f
redisIvykisAttach	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^static int redisIvykisAttach(redisAsyncContext *ac) {$/;"	f
redisIvykisCleanup	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^static void redisIvykisCleanup(void *privdata) {$/;"	f
redisIvykisDelRead	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^static void redisIvykisDelRead(void *privdata) {$/;"	f
redisIvykisDelWrite	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^static void redisIvykisDelWrite(void *privdata) {$/;"	f
redisIvykisEvents	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^typedef struct redisIvykisEvents {$/;"	s
redisIvykisEvents	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^} redisIvykisEvents;$/;"	t	typeref:struct:redisIvykisEvents
redisIvykisReadEvent	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^static void redisIvykisReadEvent(void *arg) {$/;"	f
redisIvykisWriteEvent	Extern/Tool/DBDriver/hiredis/adapters/ivykis.h	/^static void redisIvykisWriteEvent(void *arg) {$/;"	f
redisLibevAddRead	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^static void redisLibevAddRead(void *privdata) {$/;"	f
redisLibevAddWrite	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^static void redisLibevAddWrite(void *privdata) {$/;"	f
redisLibevAttach	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^static int redisLibevAttach(EV_P_ redisAsyncContext *ac) {$/;"	f
redisLibevCleanup	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^static void redisLibevCleanup(void *privdata) {$/;"	f
redisLibevDelRead	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^static void redisLibevDelRead(void *privdata) {$/;"	f
redisLibevDelWrite	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^static void redisLibevDelWrite(void *privdata) {$/;"	f
redisLibevEvents	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^typedef struct redisLibevEvents {$/;"	s
redisLibevEvents	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^} redisLibevEvents;$/;"	t	typeref:struct:redisLibevEvents
redisLibevReadEvent	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^static void redisLibevReadEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f
redisLibevWriteEvent	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^static void redisLibevWriteEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f
redisLibeventAddRead	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^static void redisLibeventAddRead(void *privdata) {$/;"	f
redisLibeventAddWrite	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^static void redisLibeventAddWrite(void *privdata) {$/;"	f
redisLibeventAttach	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {$/;"	f
redisLibeventCleanup	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^static void redisLibeventCleanup(void *privdata) {$/;"	f
redisLibeventDelRead	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^static void redisLibeventDelRead(void *privdata) {$/;"	f
redisLibeventDelWrite	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^static void redisLibeventDelWrite(void *privdata) {$/;"	f
redisLibeventEvents	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^typedef struct redisLibeventEvents {$/;"	s
redisLibeventEvents	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^} redisLibeventEvents;$/;"	t	typeref:struct:redisLibeventEvents
redisLibeventReadEvent	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^static void redisLibeventReadEvent(int fd, short event, void *arg) {$/;"	f
redisLibeventWriteEvent	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^static void redisLibeventWriteEvent(int fd, short event, void *arg) {$/;"	f
redisLibuvAddRead	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^static void redisLibuvAddRead(void *privdata) {$/;"	f
redisLibuvAddWrite	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^static void redisLibuvAddWrite(void *privdata) {$/;"	f
redisLibuvAttach	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^static int redisLibuvAttach(redisAsyncContext* ac, uv_loop_t* loop) {$/;"	f
redisLibuvCleanup	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^static void redisLibuvCleanup(void *privdata) {$/;"	f
redisLibuvDelRead	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^static void redisLibuvDelRead(void *privdata) {$/;"	f
redisLibuvDelWrite	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^static void redisLibuvDelWrite(void *privdata) {$/;"	f
redisLibuvEvents	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^typedef struct redisLibuvEvents {$/;"	s
redisLibuvEvents	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^} redisLibuvEvents;$/;"	t	typeref:struct:redisLibuvEvents
redisLibuvPoll	Extern/Tool/DBDriver/hiredis/adapters/libuv.h	/^static void redisLibuvPoll(uv_poll_t* handle, int status, int events) {$/;"	f
redisMacOSAddRead	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^static void redisMacOSAddRead(void *privdata) {$/;"	f
redisMacOSAddWrite	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^static void redisMacOSAddWrite(void *privdata) {$/;"	f
redisMacOSAsyncCallback	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^static void redisMacOSAsyncCallback(CFSocketRef __unused s, CFSocketCallBackType callbackType, CFDataRef __unused address, const void __unused *data, void *info) {$/;"	f
redisMacOSAttach	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^static int redisMacOSAttach(redisAsyncContext *redisAsyncCtx, CFRunLoopRef runLoop) {$/;"	f
redisMacOSCleanup	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^static void redisMacOSCleanup(void *privdata) {$/;"	f
redisMacOSDelRead	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^static void redisMacOSDelRead(void *privdata) {$/;"	f
redisMacOSDelWrite	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^static void redisMacOSDelWrite(void *privdata) {$/;"	f
redisReadTask	Extern/Tool/DBDriver/hiredis/read.h	/^typedef struct redisReadTask {$/;"	s
redisReadTask	Extern/Tool/DBDriver/hiredis/read.h	/^} redisReadTask;$/;"	t	typeref:struct:redisReadTask
redisReader	Extern/Tool/DBDriver/hiredis/read.h	/^typedef struct redisReader {$/;"	s
redisReader	Extern/Tool/DBDriver/hiredis/read.h	/^} redisReader;$/;"	t	typeref:struct:redisReader
redisReaderGetError	Extern/Tool/DBDriver/hiredis/read.h	/^#define redisReaderGetError(/;"	d
redisReaderGetObject	Extern/Tool/DBDriver/hiredis/read.h	/^#define redisReaderGetObject(/;"	d
redisReaderSetPrivdata	Extern/Tool/DBDriver/hiredis/read.h	/^#define redisReaderSetPrivdata(/;"	d
redisReply	Extern/Tool/DBDriver/hiredis/hiredis.h	/^typedef struct redisReply {$/;"	s
redisReply	Extern/Tool/DBDriver/hiredis/hiredis.h	/^} redisReply;$/;"	t	typeref:struct:redisReply
redisReplyObjectFunctions	Extern/Tool/DBDriver/hiredis/read.h	/^typedef struct redisReplyObjectFunctions {$/;"	s
redisReplyObjectFunctions	Extern/Tool/DBDriver/hiredis/read.h	/^} redisReplyObjectFunctions;$/;"	t	typeref:struct:redisReplyObjectFunctions
redis_source_add_read	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_add_read (gpointer data)$/;"	f
redis_source_add_write	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_add_write (gpointer data)$/;"	f
redis_source_check	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_check (GSource *source)$/;"	f
redis_source_cleanup	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_cleanup (gpointer data)$/;"	f
redis_source_del_read	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_del_read (gpointer data)$/;"	f
redis_source_del_write	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_del_write (gpointer data)$/;"	f
redis_source_dispatch	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_dispatch (GSource      *source,$/;"	f
redis_source_finalize	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_finalize (GSource *source)$/;"	f
redis_source_new	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_new (redisAsyncContext *ac)$/;"	f
redis_source_prepare	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^redis_source_prepare (GSource *source,$/;"	f
refreshModel	Extern/ServerFrame/data/GameUser.cpp	/^void GameUser::refreshModel(int modelType)$/;"	f	class:GameUser
refreshModels	Extern/ServerFrame/data/GameUser.cpp	/^void GameUser::refreshModels()$/;"	f	class:GameUser
registeNetworkCommunicate	Client/Client/GameNetworkNode.cpp	/^void CGameNetworkNode::registeNetworkCommunicate(void *data)$/;"	f	class:CGameNetworkNode
release	Extern/ServerFrame/commnication/KxTCPClienter.cpp	/^void KxTCPClienter::release()$/;"	f	class:KxTCPClienter
release	Extern/ServerFrame/core/KxObject.cpp	/^void KxObject::release()$/;"	f	class:KxObject
release	SessionServer/SessionServer/SessionClient.h	/^    virtual void release()$/;"	f	class:SessionClient
remove	Extern/ServerFrame/helper/KxTimerManager.cpp	/^bool KxTimerList::remove(KxTimerObject* obj)$/;"	f	class:KxTimerList
removeCommObject	Extern/ServerFrame/commnication/KxEpoller.cpp	/^	int KxEpoller::removeCommObject(IKxComm* obj)$/;"	f	class:KxEpoller
removeCommObject	Extern/ServerFrame/commnication/KxSelectPoller.cpp	/^int KxSelectPoller::removeCommObject(IKxComm* obj)$/;"	f	class:KxSelectPoller
removeGameUser	Extern/ServerFrame/data/GameUserManager.cpp	/^void CGameUserManager::removeGameUser(int uid)$/;"	f	class:CGameUserManager
removeGuest	SessionServer/SessionServer/NetworkManager.cpp	/^bool NetWorkManager::removeGuest(unsigned int guestId)$/;"	f	class:NetWorkManager
removeHandler	Extern/ServerFrame/log/LogManager.cpp	/^bool LogManager::removeHandler(int handleId)$/;"	f	class:LogManager
removeObserver	Extern/Tool/Observer/Observer.cpp	/^void Observable::removeObserver(Observer* target)$/;"	f	class:Observable
removeUser	SessionServer/SessionServer/NetworkManager.cpp	/^bool NetWorkManager::removeUser(unsigned int userId)$/;"	f	class:NetWorkManager
replies	Extern/Tool/DBDriver/hiredis/async.h	/^    redisCallbackList replies;$/;"	m	struct:redisAsyncContext
reply	Extern/Tool/DBDriver/hiredis/read.h	/^    void *reply; \/* Temporary reply pointer *\/$/;"	m	struct:redisReader
reset	Extern/Tool/Common/Value_.cpp	/^void Value_::reset(Type type)$/;"	f	class:Value_
resetDataLength	Extern/ServerFrame/helper/BufferData.h	/^    void resetDataLength() { m_Offset = 0; m_DataLength = 0; }$/;"	f	class:BufferData
resetOffset	Extern/ServerFrame/helper/BufferData.h	/^    inline void resetOffset() { m_Offset = 0; }$/;"	f	class:BufferData
retain	Extern/ServerFrame/commnication/KxTCPClienter.cpp	/^void KxTCPClienter::retain()$/;"	f	class:KxTCPClienter
retain	Extern/ServerFrame/core/KxObject.cpp	/^void KxObject::retain()$/;"	f	class:KxObject
retain	SessionServer/SessionServer/SessionClient.h	/^    virtual void retain() $/;"	f	class:SessionClient
rev	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents
rev	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^    struct event *rev, *wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::event
ridx	Extern/Tool/DBDriver/hiredis/read.h	/^    int ridx; \/* Index of current read task *\/$/;"	m	struct:redisReader
rstack	Extern/Tool/DBDriver/hiredis/read.h	/^    redisReadTask rstack[9];$/;"	m	struct:redisReader
runServer	Extern/ServerFrame/server/KxBaseServer.cpp	/^void KxBaseServer::runServer()$/;"	f	class:KxBaseServer
s_IsInit	Extern/ServerFrame/commnication/KxSock.cpp	/^bool KxSock::s_IsInit = false;$/;"	m	class:KxSock	file:
s_IsInit	Extern/ServerFrame/commnication/KxSock.h	/^    static bool     s_IsInit;$/;"	m	class:KxSock
s_RecvBuffer	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^char* KxTCPUnit::s_RecvBuffer = NULL;$/;"	m	class:KxTCPUnit	file:
s_RecvBuffer	Extern/ServerFrame/commnication/KxTCPUnit.h	/^    static char* s_RecvBuffer;          \/\/ 全局接收缓冲区$/;"	m	class:KxTCPUnit
sds	Extern/Tool/DBDriver/hiredis/sds.h	/^typedef char *sds;$/;"	t
sdsalloc	Extern/Tool/DBDriver/hiredis/sds.h	/^static inline size_t sdsalloc(const sds s) {$/;"	f
sdsavail	Extern/Tool/DBDriver/hiredis/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdshdr16	Extern/Tool/DBDriver/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr16 {$/;"	s
sdshdr32	Extern/Tool/DBDriver/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr32 {$/;"	s
sdshdr5	Extern/Tool/DBDriver/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr5 {$/;"	s
sdshdr64	Extern/Tool/DBDriver/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr64 {$/;"	s
sdshdr8	Extern/Tool/DBDriver/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr8 {$/;"	s
sdsinclen	Extern/Tool/DBDriver/hiredis/sds.h	/^static inline void sdsinclen(sds s, size_t inc) {$/;"	f
sdslen	Extern/Tool/DBDriver/hiredis/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdssetalloc	Extern/Tool/DBDriver/hiredis/sds.h	/^static inline void sdssetalloc(sds s, size_t newlen) {$/;"	f
sdssetlen	Extern/Tool/DBDriver/hiredis/sds.h	/^static inline void sdssetlen(sds s, size_t newlen) {$/;"	f
searchAllDataById	Extern/Tool/DataManager/DataTable.cpp	/^std::vector<RowData*> DataTable::searchAllDataById(int id)$/;"	f	class:DataTable
searchDataById	Extern/Tool/DataManager/DataTable.cpp	/^RowData* DataTable::searchDataById(int id)$/;"	f	class:DataTable
searchTableById	Extern/Tool/DataManager/DataManager.h	/^	RowData* searchTableById(std::string name,int id)$/;"	f	class:DataManager
searchXXTableById	Extern/Tool/DataManager/DataManager.h	/^	RowData* searchXXTableById(int id)$/;"	f	class:DataManager
self	Extern/Tool/Observer/Observer.h	/^	Observable* self;$/;"	m	struct:ObserverParam
send	Extern/ServerFrame/commnication/KxSock.cpp	/^int KxSock::send(const char* buffer, int size)$/;"	f	class:KxSock
sendData	Client/Client/GameNetworkNode.cpp	/^int CGameNetworkNode::sendData(char* buffer, unsigned int len, EServerConnType connType \/*= SERVER_CONN_SESSION*\/)$/;"	f	class:CGameNetworkNode
sendData	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^int KxTCPListener::sendData(const char* buffer, unsigned int len)$/;"	f	class:KxTCPListener
sendData	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^int KxTCPUnit::sendData(const char* buffer, unsigned int len)$/;"	f	class:KxTCPUnit
sendData	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^int KxUDPUnit::sendData(const char* buffer, unsigned int len)$/;"	f	class:KxUDPUnit
sendData	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^int KxUDPUnit::sendData(const char* buffer, unsigned int len, char* ip, int port)$/;"	f	class:KxUDPUnit
sendDataToActor	SessionServer/SessionServer/ConnectEvent.cpp	/^bool ConnectEvent::sendDataToActor(SessionClient* pClient, int nMainCmd, int nSubCmd, char *pszContext, int nLen)$/;"	f	class:ConnectEvent
sendDataToActor	SessionServer/SessionServer/SessionEvent.cpp	/^bool SessionEvent::sendDataToActor(SessionClient* pClient, int nMainCmd, int nSubCmd, char *pszContext, int nLen)$/;"	f	class:SessionEvent
sendDataToAllServer	SessionServer/SessionServer/SessionClient.cpp	/^bool SessionClient::sendDataToAllServer(char *pszContext, int nLen)$/;"	f	class:SessionClient
sendDataToClient	SessionServer/SessionServer/NetworkManager.cpp	/^bool NetWorkManager::sendDataToClient(SessionClient* pClient, int nMainCmd, int nSubCmd, char *pszContext, int nLen)$/;"	f	class:NetWorkManager
sendDataToGroupServer	SessionServer/SessionServer/SessionClient.cpp	/^bool SessionClient::sendDataToGroupServer(int nGroupID, char *pszContext, int nLen)$/;"	f	class:SessionClient
sendDataToServer	SessionServer/SessionServer/SessionClient.cpp	/^bool SessionClient::sendDataToServer(int mainCmd, int subCmd, char *pszContext, int nLen)$/;"	f	class:SessionClient
serverGroup	Client/Client/TestClient.h	/^	int serverGroup;$/;"	m	struct:ConnectServerConf
serverId	Extern/ServerFrame/server/ServerConfig.h	/^	int serverId;$/;"	m	struct:ServerData
setAccountId	Extern/ServerFrame/data/GameUser.h	/^	void setAccountId(int accountId) { m_nAccountId = accountId; }$/;"	f	class:GameUser
setBoolForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::setBoolForKeyValue(const std::string nKey, bool value)$/;"	f	class:LocalDefault
setBytes	Extern/Tool/Common/Data_.cpp	/^void Data_::setBytes(unsigned char* bytes)$/;"	f	class:Data_
setCallback	Extern/ServerFrame/helper/KxTimerCallback.h	/^    void setCallback(T* obj, pTimerCallback callback)$/;"	f	class:KxTimerCallback
setChangeFlag	SessionServer/SessionServer/NetworkManager.h	/^	void setChangeFlag(bool bChange) { m_bChanging = bChange; }$/;"	f	class:NetWorkManager
setClientModule	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^void KxTCPListener::setClientModule(IKxModule* module)$/;"	f	class:KxTCPListener
setConServer	SessionServer/SessionServer/SessionClient.cpp	/^bool SessionClient::setConServer(int nKey, int nValue)$/;"	f	class:SessionClient
setContext	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        int setContext(redisAsyncContext * ac) {$/;"	f	class:RedisQtAdapter
setData	Extern/Tool/DataManager/DataTable.cpp	/^void RowData::setData(std::vector<std::string>& data)$/;"	f	class:RowData
setDataForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::setDataForKeyValue(const char* nKey, const Data_& value)$/;"	f	class:LocalDefault
setDataForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::setDataForKeyValue(const char* nKey, const cocos2d::Data& value)$/;"	f	class:LocalDefault
setDelay	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline void setDelay(const kxTimeVal& d)$/;"	f	class:KxTimerObject
setDelay	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline void setDelay(float d)$/;"	f	class:KxTimerObject
setDelay	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline void setDelay(long sec, long usec)$/;"	f	class:KxTimerObject
setDoubleForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::setDoubleForKeyValue(const std::string nKey, double value)$/;"	f	class:LocalDefault
setEncryption	Extern/Tool/LocalDefault/LocalDefault.h	/^	virtual void setEncryption(ENCRYPT_TYPE var){ _mIsEn = var; }$/;"	f	class:LocalDefault
setFastModel	Extern/ServerFrame/log/LogFileHandler.h	/^    inline void setFastModel(bool isfast)$/;"	f	class:LogFileHandler
setFileName	Extern/ServerFrame/log/LogFileHandler.h	/^    inline void setFileName(const std::string& fileName)$/;"	f	class:LogFileHandler
setFilePath	Extern/ServerFrame/log/LogFileHandler.h	/^    inline void setFilePath(const std::string& path)$/;"	f	class:LogFileHandler
setFloatForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::setFloatForKeyValue(const std::string nKey, float value)$/;"	f	class:LocalDefault
setFromfloat	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline void setFromfloat(float t)$/;"	f	class:kxTimeVal
setGuestId	SessionServer/SessionServer/SessionClient.h	/^    inline void setGuestId(unsigned int guestId) { m_GuestId = guestId; }$/;"	f	class:SessionClient
setHandleId	Extern/ServerFrame/log/ILogHandler.h	/^	inline void setHandleId(int handleId)$/;"	f	class:ILogHandler
setHeartbeatTime	Client/Client/GameNetworkNode.cpp	/^void CGameNetworkNode::setHeartbeatTime(float fHbTime)$/;"	f	class:CGameNetworkNode
setIntegerForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::setIntegerForKeyValue(const std::string nKey, int value)$/;"	f	class:LocalDefault
setIsHeartbeat	Client/Client/GameNetworkNode.cpp	/^void CGameNetworkNode::setIsHeartbeat(bool bEnabled) $/;"	f	class:CGameNetworkNode
setIsReadModel	Extern/ServerFrame/helper/BufferData.h	/^    inline void setIsReadModel(bool isReadModel){ m_IsReadMode = isReadModel; }$/;"	f	class:BufferData
setKey	Extern/Tool/Tea/TEACrypt.cpp	/^void TEACrypt::setKey(UnInt32_t key[])$/;"	f	class:TEACrypt
setLogLevel	Extern/ServerFrame/log/LogManager.h	/^    inline void setLogLevel(int lv) { m_LogLevel = lv; };$/;"	f	class:LogManager
setLoop	Extern/Tool/Tea/TEACrypt.cpp	/^void TEACrypt::setLoop(int loop)$/;"	f	class:TEACrypt
setMaxFileCount	Extern/ServerFrame/log/LogFileHandler.h	/^    inline void setMaxFileCount(int count)$/;"	f	class:LogFileHandler
setMaxFileSize	Extern/ServerFrame/log/LogFileHandler.h	/^    inline void setMaxFileSize(int size)$/;"	f	class:LogFileHandler
setModel	Extern/ServerFrame/data/GameUser.cpp	/^void GameUser::setModel(int modelType, IDBModel *model)$/;"	f	class:GameUser
setModule	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    virtual void setModule(IKxModule *model)$/;"	f	class:IKxComm
setNewFile	Extern/ServerFrame/log/LogFileHandler.h	/^	inline void setNewFile(bool isNewFile)$/;"	f	class:LogFileHandler
setPermission	SessionServer/SessionServer/SessionClient.h	/^    inline void setPermission(unsigned int permission) { m_Permission = permission; }$/;"	f	class:SessionClient
setPollBlock	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    inline void setPollBlock(bool isBlock) { m_IsBlock = isBlock; }$/;"	f	class:KxSelectPoller
setPollType	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    inline void setPollType(int type)$/;"	f	class:IKxComm
setPoller	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    virtual void setPoller(IKxCommPoller* poller)$/;"	f	class:IKxComm
setRepeat	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline void setRepeat(int t)$/;"	f	class:KxTimerObject
setSendToAddr	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^int KxUDPUnit::setSendToAddr(char* ip, int port)$/;"	f	class:KxUDPUnit
setServerName	Extern/ServerFrame/server/KxBaseServer.h	/^	virtual void setServerName(std::string serverName)$/;"	f	class:KxBaseServer
setSessionServerClose	LoginServer/LoginServer/LoginServer.cpp	/^void LoginServer::setSessionServerClose()$/;"	f	class:LoginServer
setSessionServerClose	SessionServer/SessionServer/SessionServer.cpp	/^void SessionServer::setSessionServerClose()$/;"	f	class:SessionServer
setSessionServerClosing	LoginServer/LoginServer/LoginServer.cpp	/^void LoginServer::setSessionServerClosing()$/;"	f	class:LoginServer
setSessionServerClosing	SessionServer/SessionServer/SessionServer.cpp	/^void SessionServer::setSessionServerClosing()$/;"	f	class:SessionServer
setShowDate	Extern/ServerFrame/log/LogManager.h	/^    inline void setShowDate(bool b) { m_DateOption = b; }$/;"	f	class:LogManager
setShowFile	Extern/ServerFrame/log/LogManager.h	/^    inline void setShowFile(bool b) { m_FileOption = b; }$/;"	f	class:LogManager
setShowFunc	Extern/ServerFrame/log/LogManager.h	/^    inline void setShowFunc(bool b) { m_FuncOption = b; }$/;"	f	class:LogManager
setShowLevel	Extern/ServerFrame/log/LogManager.h	/^    inline void setShowLevel(bool b) { m_LevelOption = b; }$/;"	f	class:LogManager
setShowLine	Extern/ServerFrame/log/LogManager.h	/^    inline void setShowLine(bool b) { m_LineOption = b; }$/;"	f	class:LogManager
setShowTime	Extern/ServerFrame/log/LogManager.h	/^    inline void setShowTime(bool b)$/;"	f	class:LogManager
setSize	Extern/Tool/Common/Data_.cpp	/^void Data_::setSize(size_t size)$/;"	f	class:Data_
setSockAddr	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::setSockAddr(const char* ip, int port)$/;"	f	class:KxSock
setSockAddr	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::setSockAddr(kxSocketAddr &name)$/;"	f	class:KxSock
setSockAddrReuse	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::setSockAddrReuse()$/;"	f	class:KxSock
setSockKeepAlive	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::setSockKeepAlive()$/;"	f	class:KxSock
setSockNonblock	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::setSockNonblock()$/;"	f	class:KxSock
setSockNondelay	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::setSockNondelay()$/;"	f	class:KxSock
setStringForKeyValue	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::setStringForKeyValue(const std::string nKey, const std::string & sValue)$/;"	f	class:LocalDefault
setTableHead	Extern/Tool/DataManager/DataTable.cpp	/^void DataTable::setTableHead(std::vector<std::string>& vecHead)$/;"	f	class:DataTable
setTag	Extern/ServerFrame/log/ILogHandler.h	/^	inline void setTag(int tag)$/;"	f	class:ILogHandler
setTimeOut	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    inline void setTimeOut(float timeOut){ m_TimeOut.setFromfloat(timeOut); m_IsBlock = false; }$/;"	f	class:KxSelectPoller
setTimeOut	Extern/ServerFrame/commnication/KxSelectPoller.h	/^    inline void setTimeOut(long sec, long usec) { m_TimeOut = kxTimeVal(sec, usec); m_IsBlock = false; }$/;"	f	class:KxSelectPoller
setTimeout	Extern/ServerFrame/commnication/KxEpoller.h	/^    inline void setTimeout(int timeout) { m_TimeOut = timeout; }$/;"	f	class:KxEpoller
setTimer	SessionServer/SessionServer/SessionClient.cpp	/^void SessionClient::setTimer()$/;"	f	class:SessionClient
setTimer	SessionServer/SessionServer/SessionConnect.cpp	/^void SessionConnector::setTimer(int nSec)$/;"	f	class:SessionConnector
setUid	Extern/ServerFrame/data/GameUser.h	/^	void setUid(int uid) { m_nUid = uid; }$/;"	f	class:GameUser
setUserId	SessionServer/SessionServer/SessionClient.h	/^    inline void setUserId(unsigned int userId) { m_UserId = userId; }$/;"	f	class:SessionClient
setUserName	Extern/ServerFrame/data/GameUser.h	/^	void setUserName(std::string userName) { m_sUserName = userName; }$/;"	f	class:GameUser
setValueForKey	Extern/Tool/LocalDefault/LocalDefault.cpp	/^void LocalDefault::setValueForKey(const char* pKey, const char* pValue)$/;"	f	class:LocalDefault
snprintf	Extern/ServerFrame/core/KxCore.h	/^#define snprintf /;"	d
sockInitAddr	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::sockInitAddr(kxSocketAddr &name, int port, const char* ip)$/;"	f	class:KxSock
socketRef	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^    CFSocketRef socketRef;$/;"	m	struct:__anon5
source	Extern/Tool/DBDriver/RedisStorer.h	/^    int source;$/;"	m	struct:RankData
source	Extern/Tool/DBDriver/hiredis/adapters/glib.h	/^    GSource source;$/;"	m	struct:__anon4
sourceRef	Extern/Tool/DBDriver/hiredis/adapters/macosx.h	/^    CFRunLoopSourceRef sourceRef;$/;"	m	struct:__anon5
source_addr	Extern/Tool/DBDriver/hiredis/hiredis.h	/^        char *source_addr;$/;"	m	struct:redisContext::__anon2
split	Extern/Tool/StringFormat/StringFormat.cpp	/^void StringFormat::split(std::vector<std::string>& dest, std::string str, std::string pattern)$/;"	f	class:StringFormat
splitStringToVec	Extern/Tool/StringFormat/StringFormat.h	/^inline std::vector<std::string> splitStringToVec(const std::string& str, const std::string& splt)$/;"	f
splitStringToVec	Extern/Tool/StringFormat/StringFormat.h	/^inline void splitStringToVec(const std::string& str, const std::string& splt, std::vector<std::string>& out)$/;"	f
sstrdup	Extern/ServerFrame/core/KxCore.h	/^#define sstrdup /;"	d
start	Extern/ServerFrame/helper/KxTimerManager.cpp	/^void KxTimerObject::start(const kxTimeVal& now)$/;"	f	class:KxTimerObject
startServer	Extern/ServerFrame/server/KxBaseServer.cpp	/^void KxBaseServer::startServer()$/;"	f	class:KxBaseServer
startWithTime	Extern/ServerFrame/helper/KxTimerManager.cpp	/^void KxTimerObject::startWithTime(const kxTimeVal& now)$/;"	f	class:KxTimerObject
state	Extern/Tool/MD5/MD5.h	/^		UnLongInt_t state[4];$/;"	m	struct:CMD5::md5_context
stlocaltime	Extern/ServerFrame/core/KxCore.h	/^#define stlocaltime(/;"	d
stop	Extern/ServerFrame/helper/KxTimerManager.cpp	/^void KxTimerObject::stop()$/;"	f	class:KxTimerObject
stopServer	Extern/ServerFrame/server/KxBaseServer.h	/^    virtual void stopServer() { m_IsRunning = false; }$/;"	f	class:KxBaseServer
store_type	Extern/Tool/DBDriver/IStorer.h	/^	STORE_TYPE store_type;		 \/\/$/;"	m	struct:DBRule
storer	Extern/Tool/DBDriver/IStorer.h	/^	IStorer * storer;		     \/\/ 数据库实体$/;"	m	struct:DBRule
str	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    char *str; \/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING *\/$/;"	m	struct:redisReply
strVal	Extern/Tool/Common/Value_.h	/^        std::string* strVal;$/;"	m	union:Value_::__anon1
strim	Extern/Tool/DataManager/DataTable.cpp	/^std::string& DataTable::strim(std::string &s)$/;"	f	class:DataTable
strncpys	Extern/ServerFrame/core/KxCore.h	/^#define strncpys /;"	d
sub	Extern/ServerFrame/helper/KxTimeVal.h	/^    inline void sub(const kxTimeVal& v)$/;"	f	class:kxTimeVal
sub	Extern/Tool/DBDriver/hiredis/async.h	/^    } sub;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon7
szDoc	Extern/Tool/XML/XML.h	/^        const char* szDoc;$/;"	m	struct:XML::TokenPos
tail	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline KxTimerObject* tail()$/;"	f	class:KxTimerList
tail	Extern/Tool/DBDriver/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
takeBuffer	Extern/Tool/Common/Data_.cpp	/^unsigned char* Data_::takeBuffer(size_t* size)$/;"	f	class:Data_
tcp	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    } tcp;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon2
timeToKey	Extern/ServerFrame/helper/KxTimerManager.h	/^    inline long timeToKey(const kxTimeVal& delay)$/;"	f	class:KxTimerManager
timeout	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    struct timeval *timeout;$/;"	m	struct:redisContext	typeref:struct:redisContext::timeval
timezone	Extern/ServerFrame/core/KxCore.h	/^struct timezone$/;"	s
toAbs	Extern/Tool/StringFormat/StringFormat.h	/^	static T toAbs(T num)$/;"	f	class:StringFormat
toNum	Extern/Tool/StringFormat/StringFormat.h	/^	static T toNum(const std::string& str)$/;"	f	class:StringFormat
toString	Extern/Tool/StringFormat/StringFormat.h	/^	static std::string toString(T var)$/;"	f	class:StringFormat
total	Extern/Tool/MD5/MD5.h	/^		UnLongInt_t total[2];$/;"	m	struct:CMD5::md5_context
tv_sec	Extern/ServerFrame/helper/KxTimeVal.h	/^    long tv_sec;		\/\/ 秒$/;"	m	class:kxTimeVal
tv_usec	Extern/ServerFrame/helper/KxTimeVal.h	/^    long tv_usec;		\/\/ 毫秒(百万分之一秒)$/;"	m	class:kxTimeVal
type	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    int type; \/* REDIS_REPLY_* *\/$/;"	m	struct:redisReply
type	Extern/Tool/DBDriver/hiredis/read.h	/^    int type;$/;"	m	struct:redisReadTask
tz_dsttime	Extern/ServerFrame/core/KxCore.h	/^	int tz_dsttime;$/;"	m	struct:timezone
tz_minuteswest	Extern/ServerFrame/core/KxCore.h	/^	int tz_minuteswest;$/;"	m	struct:timezone
uid	Extern/ServerFrame/server/Head.h	/^	int uid; \/\/服务器用$/;"	m	struct:Head
uint32ToChar	Extern/Tool/Tea/TEACrypt.cpp	/^void TEACrypt::uint32ToChar(UnInt32_t n1, UnInt32_t n2, char src[])$/;"	f	class:TEACrypt
uint32_tToByte	Extern/Tool/MD5/MD5.cpp	/^void MD5::uint32_tToByte(UnChar_t* Output, UnInt32_t* Input, UnInt32_t nLength)$/;"	f	class:MD5
uninitSock	Extern/ServerFrame/commnication/KxSock.cpp	/^void KxSock::uninitSock()$/;"	f	class:KxSock
unix_sock	Extern/Tool/DBDriver/hiredis/hiredis.h	/^    } unix_sock;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon3
unsignedVal	Extern/Tool/Common/Value_.h	/^        unsigned int unsignedVal;$/;"	m	union:Value_::__anon1
update	Client/Client/GameNetworkNode.cpp	/^void CGameNetworkNode::update(float dt)$/;"	f	class:CGameNetworkNode
update	Extern/ServerFrame/helper/KxTimerManager.cpp	/^void KxTimerList::update(const kxTimeVal& now)$/;"	f	class:KxTimerList
updateData	Extern/Tool/Observer/Observer.h	/^	void* updateData;$/;"	m	struct:ObserverParam
updateFormat	Extern/ServerFrame/log/LogManager.cpp	/^void LogManager::updateFormat(int level, const char* log, const char* file, const char* func, int line)$/;"	f	class:LogManager
updateGameUserData	Extern/ServerFrame/data/GameUserManager.cpp	/^void CGameUserManager::updateGameUserData(GameUser* gameUsr, bool bLogin)$/;"	f	class:CGameUserManager
updateOffset	Extern/ServerFrame/helper/BufferData.h	/^    inline void updateOffset(unsigned int offset) { m_Offset = offset; }$/;"	f	class:BufferData
updateTimers	Extern/ServerFrame/helper/KxTimerManager.cpp	/^void KxTimerManager::updateTimers()$/;"	f	class:KxTimerManager
userDisconnect	SessionServer/SessionServer/ClientModule.cpp	/^void ClientModule::userDisconnect(IKxComm *target)$/;"	f	class:ClientModule
vectorElemPosT	Extern/Tool/XML/XML.h	/^    typedef std::vector<ElemPos> vectorElemPosT;$/;"	t	class:XML
vectorVal	Extern/Tool/Common/Value_.h	/^        ValueVector* vectorVal;$/;"	m	union:Value_::__anon1
visit	Extern/Tool/Common/Value_.cpp	/^static std::string visit(const Value_& v, int depth)$/;"	f	file:
visitMap	Extern/Tool/Common/Value_.cpp	/^static std::string visitMap(const T& v, int depth)$/;"	f	file:
visitVector	Extern/Tool/Common/Value_.cpp	/^static std::string visitVector(const ValueVector& v, int depth)$/;"	f	file:
vsnprintf_s	Extern/ServerFrame/core/KxCore.h	/^#define vsnprintf_s /;"	d
wev	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents
wev	Extern/Tool/DBDriver/hiredis/adapters/libevent.h	/^    struct event *rev, *wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::
write	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        void write() { redisAsyncHandleWrite(m_ctx); }$/;"	f	class:RedisQtAdapter
writeData	Extern/ServerFrame/helper/BufferData.cpp	/^bool BufferData::writeData(const void* data, unsigned int length)$/;"	f	class:BufferData
writeData	Extern/ServerFrame/helper/BufferData.h	/^    bool writeData(T data)$/;"	f	class:BufferData
writeFastLog	Extern/ServerFrame/log/LogFileHandler.cpp	/^bool LogFileHandler::writeFastLog(const std::string& log)$/;"	f	class:LogFileHandler
writeLog	Extern/ServerFrame/log/LogFileHandler.cpp	/^bool LogFileHandler::writeLog(const std::string& log)$/;"	f	class:LogFileHandler
writelog	Extern/ServerFrame/log/LogManager.cpp	/^void LogManager::writelog(int tag, int level, const char* file, const char* func, int line, const char* log, ...)$/;"	f	class:LogManager
writing	Extern/Tool/DBDriver/hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents
writing	Extern/Tool/DBDriver/hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents
x_AddElem	Extern/Tool/XML/XML.cpp	/^bool XML::x_AddElem( const char* szName, const char* szValue, bool bInsert, bool bAddChild )$/;"	f	class:XML
x_AddNode	Extern/Tool/XML/XML.cpp	/^bool XML::x_AddNode( int nNodeType, const char* szText, bool bInsert )$/;"	f	class:XML
x_AddSubDoc	Extern/Tool/XML/XML.cpp	/^bool XML::x_AddSubDoc( const char* szSubDoc, bool bInsert, bool bAddChild )$/;"	f	class:XML
x_Adjust	Extern/Tool/XML/XML.cpp	/^void XML::x_Adjust( int iPos, int nShift, bool bAfterPos )$/;"	f	class:XML
x_AdjustForNode	Extern/Tool/XML/XML.cpp	/^void XML::x_AdjustForNode( int iPosParent, int iPos, int nShift )$/;"	f	class:XML
x_CreateNode	Extern/Tool/XML/XML.cpp	/^bool XML::x_CreateNode( string& strNode, int nNodeType, const char* szText )$/;"	f	class:XML
x_DocChange	Extern/Tool/XML/XML.cpp	/^void XML::x_DocChange( int nLeft, int nReplace, const string& strInsert )$/;"	f	class:XML
x_FindAttrib	Extern/Tool/XML/XML.cpp	/^bool XML::x_FindAttrib( XML::TokenPos& token, const char* szAttrib ) const$/;"	f	class:XML
x_FindChar	Extern/Tool/XML/XML.cpp	/^bool XML::x_FindChar( const char* szDoc, int& nChar, char c )$/;"	f	class:XML
x_FindElem	Extern/Tool/XML/XML.cpp	/^int XML::x_FindElem( int iPosParent, int iPos, const char* szPath )$/;"	f	class:XML
x_FindToken	Extern/Tool/XML/XML.cpp	/^bool XML::x_FindToken( XML::TokenPos& token )$/;"	f	class:XML
x_GetAttrib	Extern/Tool/XML/XML.cpp	/^string XML::x_GetAttrib( int iPos, const char* szAttrib ) const$/;"	f	class:XML
x_GetData	Extern/Tool/XML/XML.cpp	/^string XML::x_GetData( int iPos ) const$/;"	f	class:XML
x_GetFreePos	Extern/Tool/XML/XML.cpp	/^int XML::x_GetFreePos()$/;"	f	class:XML
x_GetTagName	Extern/Tool/XML/XML.cpp	/^string XML::x_GetTagName( int iPos ) const$/;"	f	class:XML
x_GetToken	Extern/Tool/XML/XML.cpp	/^string XML::x_GetToken( const XML::TokenPos& token ) const$/;"	f	class:XML
x_LocateNew	Extern/Tool/XML/XML.cpp	/^void XML::x_LocateNew( int iPosParent, int& iPosRel, int& nOffset, int nLength, int nFlags )$/;"	f	class:XML
x_ParseElem	Extern/Tool/XML/XML.cpp	/^int XML::x_ParseElem( int iPosParent )$/;"	f	class:XML
x_ParseError	Extern/Tool/XML/XML.cpp	/^int XML::x_ParseError( const char* szError, const char* szName )$/;"	f	class:XML
x_ParseNode	Extern/Tool/XML/XML.cpp	/^int XML::x_ParseNode( XML::TokenPos& token )$/;"	f	class:XML
x_ReleasePos	Extern/Tool/XML/XML.cpp	/^int XML::x_ReleasePos()$/;"	f	class:XML
x_RemoveAttrib	Extern/Tool/XML/XML.cpp	/^bool XML::x_RemoveAttrib( int iPos, const char* szAttrib )$/;"	f	class:XML
x_RemoveElem	Extern/Tool/XML/XML.cpp	/^int XML::x_RemoveElem( int iPos )$/;"	f	class:XML
x_RemoveNode	Extern/Tool/XML/XML.cpp	/^void XML::x_RemoveNode( int iPosParent, int& iPos, int& nNodeType, int& nNodeOffset, int& nNodeLength )$/;"	f	class:XML
x_SetAttrib	Extern/Tool/XML/XML.cpp	/^bool XML::x_SetAttrib( int iPos, const char* szAttrib, const char* szValue )$/;"	f	class:XML
x_SetAttrib	Extern/Tool/XML/XML.cpp	/^bool XML::x_SetAttrib( int iPos, const char* szAttrib, int nValue )$/;"	f	class:XML
x_SetData	Extern/Tool/XML/XML.cpp	/^bool XML::x_SetData( int iPos, const char* szData, int nCDATA )$/;"	f	class:XML
x_SetPos	Extern/Tool/XML/XML.h	/^    void x_SetPos( int iPosParent, int iPos, int iPosChild )$/;"	f	class:XML
x_TextFromDoc	Extern/Tool/XML/XML.cpp	/^string XML::x_TextFromDoc( int nLeft, int nRight ) const$/;"	f	class:XML
x_TextToDoc	Extern/Tool/XML/XML.cpp	/^string XML::x_TextToDoc( const char* szText, bool bAttrib ) const$/;"	f	class:XML
x_VERSIONTAG	Extern/Tool/XML/XML.cpp	/^#define x_VERSIONTAG /;"	d	file:
~BaseModule	Extern/ServerFrame/helper/BaseModule.h	/^    virtual ~BaseModule(void){}$/;"	f	class:BaseModule
~BufferData	Extern/ServerFrame/helper/BufferData.cpp	/^BufferData::~BufferData()$/;"	f	class:BufferData
~CGameNetworkNode	Client/Client/GameNetworkNode.cpp	/^CGameNetworkNode::~CGameNetworkNode(void)$/;"	f	class:CGameNetworkNode
~CGameUserManager	Extern/ServerFrame/data/GameUserManager.cpp	/^CGameUserManager::~CGameUserManager()$/;"	f	class:CGameUserManager
~ClientModule	SessionServer/SessionServer/ClientModule.cpp	/^ClientModule::~ClientModule(void)$/;"	f	class:ClientModule
~ConnectEvent	SessionServer/SessionServer/ConnectEvent.cpp	/^ConnectEvent::~ConnectEvent()$/;"	f	class:ConnectEvent
~ConnectModule	SessionServer/SessionServer/ConnectModule.cpp	/^ConnectModule::~ConnectModule(void)$/;"	f	class:ConnectModule
~CsvLoader	Extern/ServerFrame/helper/CsvLoader.cpp	/^CsvLoader::~CsvLoader()$/;"	f	class:CsvLoader
~DBManager	Extern/Tool/DBDriver/DBManager.cpp	/^DBManager::~DBManager()$/;"	f	class:DBManager
~DataManager	Extern/Tool/DataManager/DataManager.cpp	/^DataManager::~DataManager()$/;"	f	class:DataManager
~DataTable	Extern/Tool/DataManager/DataTable.cpp	/^DataTable::~DataTable()$/;"	f	class:DataTable
~Data_	Extern/Tool/Common/Data_.cpp	/^Data_::~Data_()$/;"	f	class:Data_
~GameModule	Client/Client/GameModule.cpp	/^GameModule::~GameModule(void)$/;"	f	class:GameModule
~GameUser	Extern/ServerFrame/data/GameUser.cpp	/^GameUser::~GameUser()$/;"	f	class:GameUser
~GateManager	LoginServer/LoginServer/GateManager.cpp	/^GateManager::~GateManager(void)$/;"	f	class:GateManager
~IDBModel	Extern/ServerFrame/helper/IDBModel.cpp	/^IDBModel::~IDBModel()$/;"	f	class:IDBModel
~IKxComm	Extern/ServerFrame/commnication/KxCommInterfaces.h	/^    virtual ~IKxComm()$/;"	f	class:IKxComm
~ILogHandler	Extern/ServerFrame/log/ILogHandler.h	/^	virtual ~ILogHandler() { }$/;"	f	class:ILogHandler
~IStorer	Extern/Tool/DBDriver/IStorer.cpp	/^IStorer::~IStorer()$/;"	f	class:IStorer
~KxBaseServer	Extern/ServerFrame/server/KxBaseServer.cpp	/^KxBaseServer::~KxBaseServer()$/;"	f	class:KxBaseServer
~KxBufferList	Extern/ServerFrame/commnication/KxBufferList.cpp	/^KxBufferList::~KxBufferList()$/;"	f	class:KxBufferList
~KxEpoller	Extern/ServerFrame/commnication/KxEpoller.cpp	/^	KxEpoller::~KxEpoller()$/;"	f	class:KxEpoller
~KxMemManager	Extern/ServerFrame/core/KxMemPool.cpp	/^KxMemManager::~KxMemManager()$/;"	f	class:KxMemManager
~KxMemPool	Extern/ServerFrame/core/KxMemPool.cpp	/^KxMemPool::~KxMemPool()$/;"	f	class:KxMemPool
~KxObject	Extern/ServerFrame/core/KxObject.cpp	/^KxObject::~KxObject()$/;"	f	class:KxObject
~KxSelectPoller	Extern/ServerFrame/commnication/KxSelectPoller.cpp	/^KxSelectPoller::~KxSelectPoller()$/;"	f	class:KxSelectPoller
~KxSock	Extern/ServerFrame/commnication/KxSock.cpp	/^KxSock::~KxSock()$/;"	f	class:KxSock
~KxTCPClienter	Extern/ServerFrame/commnication/KxTCPClienter.cpp	/^KxTCPClienter::~KxTCPClienter()$/;"	f	class:KxTCPClienter
~KxTCPConnector	Extern/ServerFrame/commnication/KxTCPConnector.cpp	/^KxTCPConnector::~KxTCPConnector()$/;"	f	class:KxTCPConnector
~KxTCPListener	Extern/ServerFrame/commnication/KxTCPListener.cpp	/^KxTCPListener::~KxTCPListener()$/;"	f	class:KxTCPListener
~KxTCPUnit	Extern/ServerFrame/commnication/KxTCPUnit.cpp	/^KxTCPUnit::~KxTCPUnit()$/;"	f	class:KxTCPUnit
~KxTimerCallback	Extern/ServerFrame/helper/KxTimerCallback.h	/^    virtual ~KxTimerCallback()$/;"	f	class:KxTimerCallback
~KxTimerList	Extern/ServerFrame/helper/KxTimerManager.cpp	/^KxTimerList::~KxTimerList()$/;"	f	class:KxTimerList
~KxTimerManager	Extern/ServerFrame/helper/KxTimerManager.cpp	/^KxTimerManager::~KxTimerManager()$/;"	f	class:KxTimerManager
~KxTimerObject	Extern/ServerFrame/helper/KxTimerManager.cpp	/^KxTimerObject::~KxTimerObject()$/;"	f	class:KxTimerObject
~KxUDPUnit	Extern/ServerFrame/commnication/KxUDPUnit.cpp	/^KxUDPUnit::~KxUDPUnit()$/;"	f	class:KxUDPUnit
~LocalDefault	Extern/Tool/LocalDefault/LocalDefault.cpp	/^LocalDefault::~LocalDefault()$/;"	f	class:LocalDefault
~LogConsoleHandler	Extern/ServerFrame/log/LogConsoleHandler.h	/^	virtual ~LogConsoleHandler()$/;"	f	class:LogConsoleHandler
~LogFileHandler	Extern/ServerFrame/log/LogFileHandler.cpp	/^LogFileHandler::~LogFileHandler()$/;"	f	class:LogFileHandler
~LogManager	Extern/ServerFrame/log/LogManager.cpp	/^LogManager::~LogManager()$/;"	f	class:LogManager
~LoginListener	LoginServer/LoginServer/LoginListener.cpp	/^LoginListener::~LoginListener(void)$/;"	f	class:LoginListener
~LoginServer	LoginServer/LoginServer/LoginServer.cpp	/^LoginServer::~LoginServer(void)$/;"	f	class:LoginServer
~LoginSessionModule	LoginServer/LoginServer/LoginSessionModule.cpp	/^LoginSessionModule::~LoginSessionModule(void)$/;"	f	class:LoginSessionModule
~MD5	Extern/Tool/MD5/MD5.h	/^    virtual ~MD5() {};$/;"	f	class:MD5
~NetWorkManager	SessionServer/SessionServer/NetworkManager.cpp	/^NetWorkManager::~NetWorkManager(void)$/;"	f	class:NetWorkManager
~Observable	Extern/Tool/Observer/Observer.h	/^	~Observable()$/;"	f	class:Observable
~Observer	Extern/Tool/Observer/Observer.h	/^	~Observer(){}$/;"	f	class:Observer
~RedisBinaryData	Extern/Tool/DBDriver/RedisStorer.h	/^	~RedisBinaryData()$/;"	f	struct:RedisBinaryData
~RedisQtAdapter	Extern/Tool/DBDriver/hiredis/adapters/qt.h	/^        ~RedisQtAdapter() {$/;"	f	class:RedisQtAdapter
~RedisStorer	Extern/Tool/DBDriver/RedisStorer.cpp	/^RedisStorer::~RedisStorer()$/;"	f	class:RedisStorer
~RowData	Extern/Tool/DataManager/DataTable.cpp	/^RowData::~RowData()$/;"	f	class:RowData
~ServerConfig	Extern/ServerFrame/server/ServerConfig.cpp	/^ServerConfig::~ServerConfig()$/;"	f	class:ServerConfig
~SessionClient	SessionServer/SessionServer/SessionClient.cpp	/^SessionClient::~SessionClient(void)$/;"	f	class:SessionClient
~SessionConnector	SessionServer/SessionServer/SessionConnect.cpp	/^SessionConnector::~SessionConnector()$/;"	f	class:SessionConnector
~SessionEvent	SessionServer/SessionServer/SessionEvent.cpp	/^SessionEvent::~SessionEvent()$/;"	f	class:SessionEvent
~SessionListener	SessionServer/SessionServer/SessionListener.cpp	/^SessionListener::~SessionListener(void)$/;"	f	class:SessionListener
~SessionServer	SessionServer/SessionServer/SessionServer.cpp	/^SessionServer::~SessionServer(void)$/;"	f	class:SessionServer
~TEACrypt	Extern/Tool/Tea/TEACrypt.cpp	/^TEACrypt::~TEACrypt()$/;"	f	class:TEACrypt
~TestClient	Client/Client/TestClient.cpp	/^TestClient::~TestClient(void)$/;"	f	class:TestClient
~UserModel	Extern/ServerFrame/data/DataModel/UserModel.cpp	/^UserModel::~UserModel()$/;"	f	class:UserModel
~Value_	Extern/Tool/Common/Value_.cpp	/^Value_::~Value_()$/;"	f	class:Value_
~XML	Extern/Tool/XML/XML.h	/^    virtual ~XML() {};$/;"	f	class:XML
